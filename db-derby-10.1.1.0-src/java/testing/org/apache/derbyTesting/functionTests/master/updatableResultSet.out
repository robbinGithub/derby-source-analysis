Start testing delete and update using JDBC2.0 updateable resultset apis
Negative Testl - request for scroll insensitive updatable resultset will give a read only scroll insensitive resultset
WARNING 01J03: Scroll sensitive and scroll insensitive updatable ResultSets are not currently implemented.
requested TYPE_SCROLL_INSENSITIVE, CONCUR_UPDATABLE but that is not supported
Make sure that we got TYPE_SCROLL_INSENSITIVE? true
Make sure that we got CONCUR_READ_ONLY? true
ownDeletesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE)? false
othersDeletesAreVisible(ResultSet.TYPE_SCROLL_INSENSITIVE)? false
deletesAreDetected(ResultSet.TYPE_SCROLL_INSENSITIVE)? false
JDBC 2.0 updatable resultset api will fail on this resultset because this is not an updatable resultset
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test2 - request for scroll sensitive updatable resultset will give a read only scroll insensitive resultset
WARNING 01J02: Scroll sensitive cursors are not currently implemented.
WARNING 01J03: Scroll sensitive and scroll insensitive updatable ResultSets are not currently implemented.
requested TYPE_SCROLL_SENSITIVE, CONCUR_UPDATABLE but that is not supported
Jira issue Derby-154 : When client connects to Network Server using JCC, it incorrectly shows support for scroll sensitive updatable resultsets
Make sure that we got TYPE_SCROLL_INSENSITIVE? true
Make sure that we got CONCUR_READ_ONLY? true
JDBC 2.0 updatable resultset api will fail on this resultset because this is not an updatable resultset
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test3 - request a read only resultset and attempt deleteRow and updateRow on it
Make sure that we got CONCUR_READ_ONLY? true
Now attempting to send a deleteRow on a read only resultset.
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
Now attempting to send an updateRow on a read only resultset.
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test4 - request a read only resultset and send a sql with FOR UPDATE clause and attempt deleteRow/updateRow on it
Make sure that we got CONCUR_READ_ONLY? true
Now attempting to send a deleteRow on a read only resultset with FOR UPDATE clause in the SELECT sql.
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
Now attempting to send a updateRow on a read only resultset with FOR UPDATE clause in the SELECT sql.
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test5 - request updatable resultset for sql with no FOR UPDATE clause
Make sure that we got CONCUR_READ_ONLY? true
Jira issue Derby-159 : Warnings raised by Derby are not getting passed to the Client in Network Server Mode
Will see the warnings in embedded mode only
WARNING 01J06: ResultSet not updatable. Query does not qualify to generate an updatable ResultSet.
Now attempting to send a delete on a sql with no FOR UPDATE clause.
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
Now attempting to send a updateRow on a sql with no FOR UPDATE clause.
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test6 - request updatable resultset for sql with FOR READ ONLY clause
Make sure that we got CONCUR_READ_ONLY? true
Jira issue Derby-159 : Warnings raised by Derby are not getting passed to the Client in Network Server Mode
Will see the warnings in embedded mode only
WARNING 01J06: ResultSet not updatable. Query does not qualify to generate an updatable ResultSet.
Now attempting to send a delete on a sql with FOR READ ONLY clause.
SQL State : XJ083
Got expected exception 'deleteRow' not allowed because the ResultSet is not an updatable ResultSet. 
Now attempting to send a updateRow on a sql with FOR READ ONLY clause.
SQL State : XJ083
Got expected exception 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Negative Test7 - attempt to deleteRow & updateRow on updatable resultset when the resultset is not positioned on a row
Make sure that we got CONCUR_UPDATABLE? true
Now attempt a deleteRow without first doing next on the resultset.
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Now attempt a updateRow without first doing next on the resultset.
updateRow will check if it is on a row or not even though no changes have been made to the row using updateXXX
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
ResultSet is positioned after the last row. attempt to deleteRow at this point should fail!
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
ResultSet is positioned after the last row. attempt to updateRow at this point should fail!
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Negative Test8 - attempt deleteRow & updateRow on updatable resultset after closing the resultset
Make sure that we got CONCUR_UPDATABLE? true
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'deleteRow' not permitted. Verify that autocommit is OFF.
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'updateRow' not permitted. Verify that autocommit is OFF.
Negative Test9 - try updatable resultset on system table
SQL State : 42Y90
Got expected exception FOR UPDATE is not permitted in this type of statement.  
Negative Test10 - try updatable resultset on a view
SQL State : 42Y90
Got expected exception FOR UPDATE is not permitted in this type of statement.  
Negative Test11 - attempt to open updatable resultset when there is join in the select query should fail
SQL State : 42Y90
Got expected exception FOR UPDATE is not permitted in this type of statement.  
Negative Test12 - With autocommit on, attempt to drop a table when there is an open updatable resultset on it
Opened an updatable resultset. Now trying to drop that table through another Statement
SQL State : X0X95
Got expected exception Operation 'DROP TABLE' cannot be performed on object 'T1' because there is an open ResultSet dependent on that object.
Since autocommit is on, the drop table exception resulted in a runtime rollback causing updatable resultset object to close
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'updateRow' not permitted. Verify that autocommit is OFF.
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'deleteRow' not permitted. Verify that autocommit is OFF.
Negative Test13 - foreign key constraint failure will cause deleteRow to fail
SQL State : 23503
Got expected exception DELETE on table 'TABLEWITHPRIMARYKEY' caused a violation of foreign key constraint 'FK' for key (1,1).  The statement has been rolled back.
Since autocommit is on, the constraint exception resulted in a runtime rollback causing updatable resultset object to close
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
Negative Test14 - foreign key constraint failure will cause updateRow to fail
SQL State : 23503
Got expected exception UPDATE on table 'TABLEWITHPRIMARYKEY' caused a violation of foreign key constraint 'FK' for key (1,1).  The statement has been rolled back.
Since autocommit is on, the constraint exception resulted in a runtime rollback causing updatable resultset object to close
SQL State : XCL16
Got expected exception ResultSet not open. Operation 'next' not permitted. Verify that autocommit is OFF.
Negative Test15 - Can't call updateXXX methods on columns that do not correspond to a column in the table
SQL State : XJ084
Got expected exception Column does not correspond to a column in the base table. Cannot issue 'updateInt' on this column.
Negative Test16 - Call updateXXX method on out of the range column
There are only 2 columns in the select list and we are trying to send updateXXX on column position 3
SQL State : XCL14
Got expected exception The column position '3' is out of range.  The number of columns for this ResultSet is '2'.
Positive Test1a - request updatable resultset for forward only type resultset
requested TYPE_FORWARD_ONLY, CONCUR_UPDATABLE
got TYPE_FORWARD_ONLY? true
got CONCUR_UPDATABLE? true
JDBC 2.0 updatable resultset apis on this ResultSet object will pass because this is an updatable resultset
column 1 on this row before deleteRow is 1
column 2 on this row before deleteRow is aa                  
Since after deleteRow(), in embedded mode and Network Server mode using Derby Net Client, ResultSet is positioned before the next row, getXXX will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
calling deleteRow again w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to deletRow() on the current row now
Positive Test1b - request updatable resultset for forward only type resultset
column 1 on this row before updateInt is 1
column 1 on this row after updateInt is 234
column 2 on this row before updateString is aa                  
now updateRow on the row
Since after updateRow(), in embedded mode and Network Server mode using Derby Net Client, ResultSet is positioned before the next row, getXXX will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
calling updateRow again w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to updateRow() on the current row now
Positive Test2 - even if no columns from table specified in the column list, we should be able to get updatable resultset
Will work in embedded mode because target table is not derived from the columns in the select list
Will not work in network server mode because it derives the target table from the columns in the select list
total number of rows in T1 
	 1
	 -
	{3}
column 1 on this row is 1
PASS!!! passed in embedded mode
total number of rows in T1 after one deleteRow is 
	 1
	 -
	{2}
Positive Test3a - use prepared statement with concur updatable status to test deleteRow
requested TYPE_FORWARD_ONLY, CONCUR_UPDATABLE
got TYPE_FORWARD_ONLY? true
got CONCUR_UPDATABLE? true
column 1 on this row is 1
Since after deleteRow(), ResultSet is positioned before the next row, getXXX will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
calling deleteRow again w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to deletRow() on the current row now
Positive Test3b - use prepared statement with concur updatable status to test updateXXX
requested TYPE_FORWARD_ONLY, CONCUR_UPDATABLE
got TYPE_FORWARD_ONLY? true
got CONCUR_UPDATABLE? true
column 1 on this row is 1
column 1 on this row after updateInt is 5
Since after updateRow(), ResultSet is positioned before the next row, getXXX will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
calling updateRow/updateXXX again w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to cancelRowUpdates() on the current row now
Positive Test4 - use callable statement with concur updatable status
requested TYPE_FORWARD_ONLY, CONCUR_UPDATABLE
got TYPE_FORWARD_ONLY? true
got CONCUR_UPDATABLE? true
column 1 on this row is 1
Since after deleteRow(), ResultSet is positioned before the next row, getXXX will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
calling deleteRow again w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to deletRow() on the current row now
Positive Test5 - donot have to select primary key to get an updatable resultset
column 1 on this row is 1
now try to delete row when primary key is not selected for that row
Positive Test6a - For Forward Only resultsets, DatabaseMetaData will return false for ownDeletesAreVisible and deletesAreDetected
This is because, after deleteRow, we position the ResultSet before the next row. We don't make a hole for the deleted row and then stay on that deleted hole
ownDeletesAreVisible(ResultSet.TYPE_FORWARD_ONLY)? false
othersDeletesAreVisible(ResultSet.TYPE_FORWARD_ONLY)? true
deletesAreDetected(ResultSet.TYPE_FORWARD_ONLY)? false
The JDBC program should look at rowDeleted only if deletesAreDetected returns true
Since Derby returns false for detlesAreDetected for FORWARD_ONLY updatable resultset,the program should not rely on rs.rowDeleted() for FORWARD_ONLY updatable resultsets
Have this call to rs.rowDeleted() just to make sure the method does always return false? false
Have this call to rs.rowDeleted() just to make sure the method does always return false? false
Positive Test6b - For Forward Only resultsets, DatabaseMetaData will return false for ownUpdatesAreVisible and updatesAreDetected
This is because, after updateRow, we position the ResultSet before the next row
ownUpdatesAreVisible(ResultSet.TYPE_FORWARD_ONLY)? false
othersUpdatesAreVisible(ResultSet.TYPE_FORWARD_ONLY)? true
updatesAreDetected(ResultSet.TYPE_FORWARD_ONLY)? false
The JDBC program should look at rowUpdated only if updatesAreDetected returns true
Since Derby returns false for updatesAreDetected for FORWARD_ONLY updatable resultset,the program should not rely on rs.rowUpdated() for FORWARD_ONLY updatable resultsets
Have this call to rs.rowUpdated() just to make sure the method does always return false? false
Have this call to rs.rowUpdated() just to make sure the method does always return false? false
Positive Test7a - delete using updatable resultset api from a temporary table
following rows in temp table before deleteRow
	 C21,C22
	 --- ---
	{21,1}
	{22,1}
As expected, no rows in temp table after deleteRow
	 C21,C22
	 --- ---
Positive Test7b - update using updatable resultset api from a temporary table
following rows in temp table before deleteRow
	 C31,C32
	 --- ---
	{21,1}
	{22,1}
As expected, updated rows in temp table after updateRow
	 C31,C32
	 --- ---
	{123,1}
	{123,1}
Positive Test8a - change the name of the statement when the resultset is open and see if deleteRow still works
This test works in embedded mode since Derby can handle the change in the name of the statement with an open resultset
But it fails under Network Server mode because JCC and Derby Net Client do not allow statement name change when there an open resultset against it
change the cursor name(case sensitive name) with setCursorName and then try to deleteRow
change the cursor name one more time with setCursorName and then try to deleteRow
PASS!!! passed in embedded mode
Positive Test8b - change the name of the statement when the resultset is open and see if updateRow still works
This test works in embedded mode since Derby can handle the change in the name of the statement with an open resultset
But it fails under Network Server mode because JCC and Derby Net Client do not allow statement name change when there an open resultset against it
change the cursor name one more time with setCursorName and then try to updateRow
change the cursor name(case sensitive name) with setCursorName and then try to updateRow
PASS!!! passed in embedded mode
Positive Test9a - using correlation name for the table in the select sql works in embedded mode and Network Server using Derby Net Client driver
Correlation name for table does not work in Network Server mode (using JCC) because the drivers construct the delete sql with the correlation name rather than the base table name
column 1 on this row is 1
now try to deleteRow
PASS!!! passed in embedded mode
Positive Test9b - using correlation name for updatable columns is not allowed.
Table t1 has following rows
	 C1,C2
	 -- --
	{1,aa                  }
	{2,bb                  }
	{3,cc                  }
attempt to get an updatable resultset using correlation name for an updatable column
The sql is SELECT c1 as col1, c2 as col2 FROM t1 abcde FOR UPDATE of c1
SQL State : 42X42
Got expected exception Correlation name not allowed for column 'C1' because it is part of the FOR UPDATE list.
attempt to get an updatable resultset using correlation name for an readonly column. It should work
The sql is SELECT c1, c2 as col2 FROM t1 abcde FOR UPDATE of c1
Table t1 after updateRow has following rows
	 C1,C2
	 -- --
	{11,aa                  }
	{2,bb                  }
	{3,cc                  }
Positive Test9c - try to updateXXX on a readonly column. Should get error
SQL State : 42X31
Got expected exception Column 'C2' is not in the FOR UPDATE list of cursor 'SQLCUR15'.
attempt to get an updatable resultset using correlation name for an readonly column. It should work
The sql is SELECT c1, c2 as col2 FROM t1 abcde FOR UPDATE of c1
Table t1 after updateRow has following rows
	 C1,C2
	 -- --
	{11,aa                  }
	{2,bb                  }
	{3,cc                  }
Positive Test9d - try to updateXXX on a readonly column with correlation name. Should get error
SQL State : 42X31
Got expected exception Column 'COL2' is not in the FOR UPDATE list of cursor 'SQLCUR17'.
Table t1 has following rows
	 C1,C2
	 -- --
	{1,aa                  }
	{2,bb                  }
	{3,cc                  }
Positive Test10 - 2 updatable resultsets going against the same table, will they conflict?
delete using first resultset
attempt to send deleteRow on the same row through a different resultset should throw an exception
SQL State : XCL08
Got expected exception Cursor 'SQLCUR19' is not on a row.
Move to next row in the 2nd resultset and then delete using the second resultset
Positive Test11 - setting the fetch size to > 1 will be ignored by updatable resultset. Same as updatable cursors
Notice the Fetch Size in run time statistics output.


Statement Name: 
	null
Statement Text: 
	SELECT * FROM t1 FOR UPDATE of c1
Parse Time: 0
Bind Time: 0
Optimize Time: 0
Generate Time: 0
Compile Time: 0
Execute Time: 0
Begin Compilation Timestamp : null
End Compilation Timestamp : null
Begin Execution Timestamp : null
End Execution Timestamp : null
Statement Execution Plan Text: 
Table Scan ResultSet for T1 at read committed isolation level using exclusive row locking chosen by the optimizer
Number of opens = 1
Rows seen = 0
Rows filtered = 0
Fetch Size = 1
	constructor time (milliseconds) = 0
	open time (milliseconds) = 0
	next time (milliseconds) = 0
	close time (milliseconds) = 0
scan information: 
	Bit set of columns fetched=All
	Number of columns fetched=2
	Number of pages visited=0
	Number of rows qualified=0
	Number of rows visited=0
	Scan type=heap
	start position: 
null	stop position: 
null	qualifiers:
None
statement's fetch size is 200
Positive Test12a - make sure delete trigger gets fired when deleteRow is issued
Verify that before delete trigger got fired, row count is 0 in deleteTriggerInsertIntoThisTable
	 1
	 -
	{0}
column 1 on this row is 1
now try to delete row and make sure that trigger got fired
Verify that delete trigger got fired by verifying the row count to be 1 in deleteTriggerInsertIntoThisTable
	 1
	 -
	{1}
Positive Test12b - make sure update trigger gets fired when updateRow is issued
Verify that before update trigger got fired, row count is 0 in updateTriggerInsertIntoThisTable
	 1
	 -
	{0}
column 1 on this row is 1
now try to update row and make sure that trigger got fired
Verify that update trigger got fired by verifying the row count to be 1 in updateTriggerInsertIntoThisTable
	 1
	 -
	{1}
Positive Test13a - Another test case for delete trigger
column 1 on this row is 1
this delete row will fire the delete trigger which will delete all the rows from the table and from the resultset
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Verify that delete trigger got fired by verifying the row count to be 0 in table1WithTriggers
	 1
	 -
	{0}
Positive Test13b - Another test case for update trigger
Look at the current contents of table2WithTriggers
	 C1,C2
	 -- --
	{1,1}
	{2,2}
	{3,3}
	{4,4}
column 1 on this row is 2
this update row will fire the update trigger which will update all the rows in the table to have c1=1 and hence no more rows will qualify for the resultset
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Verify that update trigger got fired by verifying that all column c1s have value 1 in table2WithTriggers
	 C1,C2
	 -- --
	{1,1}
	{1,2}
	{1,3}
	{1,4}
Positive Test14a - make sure self referential delete cascade works when deleteRow is issued
	 C1,C2
	 -- --
	{e1,null}
	{e2,e1}
	{e3,e2}
	{e4,e3}
column 1 on this row is e1
this delete row will cause the delete cascade constraint to delete all the rows from the table and from the resultset
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Verify that delete trigger got fired by verifying the row count to be 0 in selfReferencingT1
	 1
	 -
	{0}
Positive Test14b - make sure self referential update restrict works when updateRow is issued
	 C1,C2
	 -- --
	{e1,null}
	{e2,e1}
	{e3,e2}
	{e4,e3}
column 1 on this row is e1
update row should fail because cascade constraint is update restrict
SQL State : 23503
Got expected exception UPDATE on table 'SELFREFERENCINGT2' caused a violation of foreign key constraint 'MANAGES2' for key (e1).  The statement has been rolled back.
Positive Test15 - With autocommit off, attempt to drop a table when there is an open updatable resultset on it
Opened an updatable resultset. Now trying to drop that table through another Statement
SQL State : X0X95
Got expected exception Operation 'DROP TABLE' cannot be performed on object 'T1' because there is an open ResultSet dependent on that object.
Since autocommit is off, the drop table exception will NOT result in a runtime rollback and hence updatable resultset object is still open
Positive Test16a - Do deleteRow within a transaction and then rollback the transaction
Verify that before delete trigger got fired, row count is 0 in deleteTriggerInsertIntoThisTable
	 1
	 -
	{0}
Verify that before deleteRow, row count is 4 in table0WithTriggers
	 1
	 -
	{4}
column 1 on this row is 1
now try to delete row and make sure that trigger got fired
Verify that delete trigger got fired by verifying the row count to be 1 in deleteTriggerInsertIntoThisTable
	 1
	 -
	{1}
Verify that deleteRow in transaction, row count is 3 in table0WithTriggers
	 1
	 -
	{3}
Verify that after rollback, row count is back to 0 in deleteTriggerInsertIntoThisTable
	 1
	 -
	{0}
Verify that after rollback, row count is back to 4 in table0WithTriggers
	 1
	 -
	{4}
Positive Test16b - Do updateRow within a transaction and then rollback the transaction
Verify that before update trigger got fired, row count is 0 in updateTriggerInsertIntoThisTable
	 1
	 -
	{0}
Look at the data in table0WithTriggers before trigger gets fired
	 C1,C2
	 -- --
	{1,1}
	{2,2}
	{3,3}
	{4,4}
column 1 on this row is 1
now try to update row and make sure that trigger got fired
Verify that update trigger got fired by verifying the row count to be 1 in updateTriggerInsertIntoThisTable
	 1
	 -
	{1}
Verify that new data in table0WithTriggers
	 C1,C2
	 -- --
	{123,1}
	{2,2}
	{3,3}
	{4,4}
Verify that after rollback, row count is back to 0 in updateTriggerInsertIntoThisTable
	 1
	 -
	{0}
Verify that after rollback, table0WithTriggers is back to its original contents
	 C1,C2
	 -- --
	{1,1}
	{2,2}
	{3,3}
	{4,4}
Positive Test17 - After deleteRow, resultset is positioned before the next row
getXXX right after deleteRow will fail because resultset is not positioned on a row, instead it is right before the next row
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Positive Test18 - Test cancelRowUpdates method as the first updatable ResultSet api on a read-only resultset
SQL State : XJ083
Got expected exception 'cancelRowUpdates' not allowed because the ResultSet is not an updatable ResultSet. 
Positive Test19 - Test updateRow method as the first updatable ResultSet api on a read-only resultset
  Got expected exception : 'updateRow' not allowed because the ResultSet is not an updatable ResultSet. 
Positive Test20 - Test updateXXX methods as the first updatable ResultSet api on a read-only resultset
  Test updateShort on a readonly resultset
  Using column position as first parameter to updateShort
  Got expected exception : 'updateShort' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateShort
  Got expected exception : 'updateShort' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateInt on a readonly resultset
  Using column position as first parameter to updateInt
  Got expected exception : 'updateInt' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateInt
  Got expected exception : 'updateInt' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateLong on a readonly resultset
  Using column position as first parameter to updateLong
  Got expected exception : 'updateLong' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateLong
  Got expected exception : 'updateLong' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateBigDecimal on a readonly resultset
  Using column position as first parameter to updateBigDecimal
  Got expected exception : 'updateBigDecimal' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateBigDecimal
  Got expected exception : 'updateBigDecimal' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateFloat on a readonly resultset
  Using column position as first parameter to updateFloat
  Got expected exception : 'updateFloat' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateFloat
  Got expected exception : 'updateFloat' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateDouble on a readonly resultset
  Using column position as first parameter to updateDouble
  Got expected exception : 'updateDouble' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateDouble
  Got expected exception : 'updateDouble' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateString on a readonly resultset
  Using column position as first parameter to updateString
  Got expected exception : 'updateString' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateString
  Got expected exception : 'updateString' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateAsciiStream on a readonly resultset
  Using column position as first parameter to updateAsciiStream
  Got expected exception : 'updateAsciiStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateAsciiStream
  Got expected exception : 'updateAsciiStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateCharacterStream on a readonly resultset
  Using column position as first parameter to updateCharacterStream
  Got expected exception : 'updateCharacterStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateCharacterStream
  Got expected exception : 'updateCharacterStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateByte on a readonly resultset
  Using column position as first parameter to updateByte
  Got expected exception : 'updateByte' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateByte
  Got expected exception : 'updateByte' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateBytes on a readonly resultset
  Using column position as first parameter to updateBytes
  Got expected exception : 'updateBytes' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateBytes
  Got expected exception : 'updateBytes' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateBinaryStream on a readonly resultset
  Using column position as first parameter to updateBinaryStream
  Got expected exception : 'updateBinaryStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateBinaryStream
  Got expected exception : 'updateBinaryStream' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateClob on a readonly resultset
  Using column position as first parameter to updateClob
  Using column name as first parameter to updateClob
  Test updateDate on a readonly resultset
  Using column position as first parameter to updateDate
  Got expected exception : 'updateDate' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateDate
  Got expected exception : 'updateDate' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateTime on a readonly resultset
  Using column position as first parameter to updateTime
  Got expected exception : 'updateTime' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateTime
  Got expected exception : 'updateTime' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateTimestamp on a readonly resultset
  Using column position as first parameter to updateTimestamp
  Got expected exception : 'updateTimestamp' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateTimestamp
  Got expected exception : 'updateTimestamp' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateBlob on a readonly resultset
  Using column position as first parameter to updateBlob
  Using column name as first parameter to updateBlob
  Test updateBoolean on a readonly resultset
  Using column position as first parameter to updateBoolean
  Got expected exception : 'updateBoolean' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateBoolean
  Got expected exception : 'updateBoolean' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateNull on a readonly resultset
  Using column position as first parameter to updateNull
  Got expected exception : 'updateNull' not allowed because the ResultSet is not an updatable ResultSet. 
  Using column name as first parameter to updateNull
  Got expected exception : 'updateNull' not allowed because the ResultSet is not an updatable ResultSet. 
  Test updateArray on a readonly resultset
  Using column position as first parameter to updateArray
  Using column name as first parameter to updateArray
  Test updateRef on a readonly resultset
  Using column position as first parameter to updateRef
  Using column name as first parameter to updateRef
Positive Test21 - Test all updateXXX(excluding updateObject) methods on all the supported sql datatypes
Next datatype to test is SMALLINT
  Testing updateShort on SQL type SMALLINT
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type SMALLINT
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type SMALLINT
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type SMALLINT
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type SMALLINT
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type SMALLINT
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type SMALLINT
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type SMALLINT
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type SMALLINT
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type SMALLINT
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type SMALLINT
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'SMALLINT'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'SMALLINT'.
  Testing updateBinaryStream on SQL type SMALLINT
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'SMALLINT' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type SMALLINT
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type SMALLINT
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'SMALLINT'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'SMALLINT'.
  Testing updateTime on SQL type SMALLINT
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'SMALLINT'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'SMALLINT'.
  Testing updateTimestamp on SQL type SMALLINT
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'SMALLINT'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'SMALLINT'.
  Testing updateBlob on SQL type SMALLINT
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type SMALLINT
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type SMALLINT
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type SMALLINT
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type SMALLINT
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is INTEGER
  Testing updateShort on SQL type INTEGER
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type INTEGER
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type INTEGER
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type INTEGER
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type INTEGER
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type INTEGER
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type INTEGER
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type INTEGER
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type INTEGER
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type INTEGER
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type INTEGER
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'INTEGER'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'INTEGER'.
  Testing updateBinaryStream on SQL type INTEGER
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'INTEGER' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type INTEGER
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type INTEGER
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'INTEGER'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'INTEGER'.
  Testing updateTime on SQL type INTEGER
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'INTEGER'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'INTEGER'.
  Testing updateTimestamp on SQL type INTEGER
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'INTEGER'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'INTEGER'.
  Testing updateBlob on SQL type INTEGER
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type INTEGER
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type INTEGER
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type INTEGER
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type INTEGER
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is BIGINT
  Testing updateShort on SQL type BIGINT
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type BIGINT
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type BIGINT
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type BIGINT
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type BIGINT
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type BIGINT
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type BIGINT
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type BIGINT
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type BIGINT
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type BIGINT
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type BIGINT
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'BIGINT'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'BIGINT'.
  Testing updateBinaryStream on SQL type BIGINT
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'BIGINT' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type BIGINT
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type BIGINT
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BIGINT'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BIGINT'.
  Testing updateTime on SQL type BIGINT
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BIGINT'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BIGINT'.
  Testing updateTimestamp on SQL type BIGINT
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BIGINT'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BIGINT'.
  Testing updateBlob on SQL type BIGINT
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type BIGINT
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type BIGINT
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type BIGINT
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type BIGINT
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is DECIMAL(10,5)
  Testing updateShort on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DECIMAL'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DECIMAL'.
  Testing updateBinaryStream on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DECIMAL' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DECIMAL'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DECIMAL'.
  Testing updateTime on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DECIMAL'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DECIMAL'.
  Testing updateTimestamp on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DECIMAL'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DECIMAL'.
  Testing updateBlob on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type DECIMAL(10,5)
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is REAL
  Testing updateShort on SQL type REAL
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type REAL
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type REAL
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type REAL
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type REAL
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type REAL
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type REAL
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type REAL
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type REAL
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type REAL
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type REAL
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'REAL'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'REAL'.
  Testing updateBinaryStream on SQL type REAL
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'REAL' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type REAL
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type REAL
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'REAL'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'REAL'.
  Testing updateTime on SQL type REAL
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'REAL'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'REAL'.
  Testing updateTimestamp on SQL type REAL
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'REAL'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'REAL'.
  Testing updateBlob on SQL type REAL
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type REAL
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type REAL
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type REAL
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type REAL
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is DOUBLE
  Testing updateShort on SQL type DOUBLE
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type DOUBLE
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type DOUBLE
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type DOUBLE
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type DOUBLE
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type DOUBLE
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type DOUBLE
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type DOUBLE
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type DOUBLE
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type DOUBLE
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type DOUBLE
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DOUBLE'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DOUBLE'.
  Testing updateBinaryStream on SQL type DOUBLE
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DOUBLE' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type DOUBLE
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type DOUBLE
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DOUBLE'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DOUBLE'.
  Testing updateTime on SQL type DOUBLE
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DOUBLE'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DOUBLE'.
  Testing updateTimestamp on SQL type DOUBLE
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DOUBLE'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DOUBLE'.
  Testing updateBlob on SQL type DOUBLE
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type DOUBLE
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type DOUBLE
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type DOUBLE
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type DOUBLE
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is CHAR(60)
  Testing updateShort on SQL type CHAR(60)
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type CHAR(60)
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type CHAR(60)
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type CHAR(60)
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type CHAR(60)
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type CHAR(60)
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type CHAR(60)
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type CHAR(60)
    Using column position as first parameter to updateAsciiStream
    Using column name as first parameter to updateAsciiStream
  Testing updateCharacterStream on SQL type CHAR(60)
    Using column position as first parameter to updateCharacterStream
    Using column name as first parameter to updateCharacterStream
  Testing updateByte on SQL type CHAR(60)
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type CHAR(60)
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type CHAR(60)
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type CHAR(60)
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type CHAR(60)
    Using column position as first parameter to updateDate
    Using column name as first parameter to updateDate
  Testing updateTime on SQL type CHAR(60)
    Using column position as first parameter to updateTime
    Using column name as first parameter to updateTime
  Testing updateTimestamp on SQL type CHAR(60)
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type CHAR(60)
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type CHAR(60)
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type CHAR(60)
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type CHAR(60)
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type CHAR(60)
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is VARCHAR(60)
  Testing updateShort on SQL type VARCHAR(60)
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type VARCHAR(60)
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type VARCHAR(60)
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type VARCHAR(60)
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type VARCHAR(60)
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type VARCHAR(60)
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type VARCHAR(60)
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type VARCHAR(60)
    Using column position as first parameter to updateAsciiStream
    Using column name as first parameter to updateAsciiStream
  Testing updateCharacterStream on SQL type VARCHAR(60)
    Using column position as first parameter to updateCharacterStream
    Using column name as first parameter to updateCharacterStream
  Testing updateByte on SQL type VARCHAR(60)
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type VARCHAR(60)
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type VARCHAR(60)
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type VARCHAR(60)
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type VARCHAR(60)
    Using column position as first parameter to updateDate
    Using column name as first parameter to updateDate
  Testing updateTime on SQL type VARCHAR(60)
    Using column position as first parameter to updateTime
    Using column name as first parameter to updateTime
  Testing updateTimestamp on SQL type VARCHAR(60)
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type VARCHAR(60)
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type VARCHAR(60)
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type VARCHAR(60)
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type VARCHAR(60)
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type VARCHAR(60)
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is LONG VARCHAR
  Testing updateShort on SQL type LONG VARCHAR
    Using column position as first parameter to updateShort
    Using column name as first parameter to updateShort
  Testing updateInt on SQL type LONG VARCHAR
    Using column position as first parameter to updateInt
    Using column name as first parameter to updateInt
  Testing updateLong on SQL type LONG VARCHAR
    Using column position as first parameter to updateLong
    Using column name as first parameter to updateLong
  Testing updateBigDecimal on SQL type LONG VARCHAR
    Using column position as first parameter to updateBigDecimal
    Using column name as first parameter to updateBigDecimal
  Testing updateFloat on SQL type LONG VARCHAR
    Using column position as first parameter to updateFloat
    Using column name as first parameter to updateFloat
  Testing updateDouble on SQL type LONG VARCHAR
    Using column position as first parameter to updateDouble
    Using column name as first parameter to updateDouble
  Testing updateString on SQL type LONG VARCHAR
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type LONG VARCHAR
    Using column position as first parameter to updateAsciiStream
    Using column name as first parameter to updateAsciiStream
  Testing updateCharacterStream on SQL type LONG VARCHAR
    Using column position as first parameter to updateCharacterStream
    Using column name as first parameter to updateCharacterStream
  Testing updateByte on SQL type LONG VARCHAR
    Using column position as first parameter to updateByte
    Using column name as first parameter to updateByte
  Testing updateBytes on SQL type LONG VARCHAR
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type LONG VARCHAR
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type LONG VARCHAR
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type LONG VARCHAR
    Using column position as first parameter to updateDate
    Using column name as first parameter to updateDate
  Testing updateTime on SQL type LONG VARCHAR
    Using column position as first parameter to updateTime
    Using column name as first parameter to updateTime
  Testing updateTimestamp on SQL type LONG VARCHAR
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type LONG VARCHAR
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type LONG VARCHAR
    Using column position as first parameter to updateBoolean
    Using column name as first parameter to updateBoolean
  Testing updateNull on SQL type LONG VARCHAR
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type LONG VARCHAR
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type LONG VARCHAR
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is CHAR(2) FOR BIT DATA
  Testing updateShort on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateInt on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateLong on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateBigDecimal on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateFloat on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateDouble on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateString on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateAsciiStream on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR () FOR BIT DATA' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR () FOR BIT DATA' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR () FOR BIT DATA' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'CHAR () FOR BIT DATA' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateBytes on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBinaryStream
    Using column name as first parameter to updateBinaryStream
  Testing updateClob on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateTime on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateTimestamp on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateBlob on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CHAR () FOR BIT DATA'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CHAR () FOR BIT DATA'.
  Testing updateNull on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type CHAR(2) FOR BIT DATA
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is VARCHAR(2) FOR BIT DATA
  Testing updateShort on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateInt on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateLong on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateBigDecimal on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateFloat on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateDouble on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateString on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateAsciiStream on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR () FOR BIT DATA' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR () FOR BIT DATA' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR () FOR BIT DATA' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'VARCHAR () FOR BIT DATA' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateBytes on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBinaryStream
    Using column name as first parameter to updateBinaryStream
  Testing updateClob on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateTime on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateTimestamp on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateBlob on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'VARCHAR () FOR BIT DATA'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'VARCHAR () FOR BIT DATA'.
  Testing updateNull on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type VARCHAR(2) FOR BIT DATA
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is LONG VARCHAR FOR BIT DATA
  Testing updateShort on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateInt on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateLong on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateBigDecimal on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateFloat on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateDouble on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateString on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateAsciiStream on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR FOR BIT DATA' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR FOR BIT DATA' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR FOR BIT DATA' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'LONG VARCHAR FOR BIT DATA' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateBytes on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateBinaryStream
    Using column name as first parameter to updateBinaryStream
  Testing updateClob on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateTime on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateTimestamp on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateBlob on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  Testing updateNull on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type LONG VARCHAR FOR BIT DATA
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is CLOB(1k)
  Testing updateShort on SQL type CLOB(1k)
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CLOB'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CLOB'.
  Testing updateInt on SQL type CLOB(1k)
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CLOB'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CLOB'.
  Testing updateLong on SQL type CLOB(1k)
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CLOB'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CLOB'.
  Testing updateBigDecimal on SQL type CLOB(1k)
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CLOB'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CLOB'.
  Testing updateFloat on SQL type CLOB(1k)
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CLOB'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CLOB'.
  Testing updateDouble on SQL type CLOB(1k)
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CLOB'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CLOB'.
  Testing updateString on SQL type CLOB(1k)
    Using column position as first parameter to updateString
    Using column name as first parameter to updateString
  Testing updateAsciiStream on SQL type CLOB(1k)
    Using column position as first parameter to updateAsciiStream
    Using column name as first parameter to updateAsciiStream
  Testing updateCharacterStream on SQL type CLOB(1k)
    Using column position as first parameter to updateCharacterStream
    Using column name as first parameter to updateCharacterStream
  Testing updateByte on SQL type CLOB(1k)
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'CLOB'.
  Testing updateBytes on SQL type CLOB(1k)
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'CLOB'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'CLOB'.
  Testing updateBinaryStream on SQL type CLOB(1k)
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'CLOB' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'CLOB' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type CLOB(1k)
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type CLOB(1k)
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CLOB'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CLOB'.
  Testing updateTime on SQL type CLOB(1k)
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CLOB'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CLOB'.
  Testing updateTimestamp on SQL type CLOB(1k)
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CLOB'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CLOB'.
  Testing updateBlob on SQL type CLOB(1k)
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type CLOB(1k)
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CLOB'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CLOB'.
  Testing updateNull on SQL type CLOB(1k)
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type CLOB(1k)
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type CLOB(1k)
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is DATE
  Testing updateShort on SQL type DATE
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'DATE'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'DATE'.
  Testing updateInt on SQL type DATE
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'DATE'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'DATE'.
  Testing updateLong on SQL type DATE
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'DATE'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'DATE'.
  Testing updateBigDecimal on SQL type DATE
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'DATE'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'DATE'.
  Testing updateFloat on SQL type DATE
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'DATE'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'DATE'.
  Testing updateDouble on SQL type DATE
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'DATE'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'DATE'.
  Testing updateString on SQL type DATE
    Using column position as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
    Using column name as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  Testing updateAsciiStream on SQL type DATE
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type DATE
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type DATE
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'DATE'.
  Testing updateBytes on SQL type DATE
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DATE'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DATE'.
  Testing updateBinaryStream on SQL type DATE
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'DATE' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type DATE
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type DATE
    Using column position as first parameter to updateDate
    Using column name as first parameter to updateDate
  Testing updateTime on SQL type DATE
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DATE'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DATE'.
  Testing updateTimestamp on SQL type DATE
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type DATE
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type DATE
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'DATE'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'DATE'.
  Testing updateNull on SQL type DATE
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type DATE
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type DATE
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is TIME
  Testing updateShort on SQL type TIME
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIME'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIME'.
  Testing updateInt on SQL type TIME
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIME'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIME'.
  Testing updateLong on SQL type TIME
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIME'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIME'.
  Testing updateBigDecimal on SQL type TIME
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIME'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIME'.
  Testing updateFloat on SQL type TIME
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIME'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIME'.
  Testing updateDouble on SQL type TIME
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIME'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIME'.
  Testing updateString on SQL type TIME
    Using column position as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
    Using column name as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  Testing updateAsciiStream on SQL type TIME
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type TIME
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type TIME
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIME'.
  Testing updateBytes on SQL type TIME
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIME'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIME'.
  Testing updateBinaryStream on SQL type TIME
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'TIME' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type TIME
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type TIME
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'TIME'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'TIME'.
  Testing updateTime on SQL type TIME
    Using column position as first parameter to updateTime
    Using column name as first parameter to updateTime
  Testing updateTimestamp on SQL type TIME
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type TIME
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type TIME
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIME'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIME'.
  Testing updateNull on SQL type TIME
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type TIME
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type TIME
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is TIMESTAMP
  Testing updateShort on SQL type TIMESTAMP
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIMESTAMP'.
  Testing updateInt on SQL type TIMESTAMP
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIMESTAMP'.
  Testing updateLong on SQL type TIMESTAMP
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIMESTAMP'.
  Testing updateBigDecimal on SQL type TIMESTAMP
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIMESTAMP'.
  Testing updateFloat on SQL type TIMESTAMP
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIMESTAMP'.
  Testing updateDouble on SQL type TIMESTAMP
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIMESTAMP'.
  Testing updateString on SQL type TIMESTAMP
    Using column position as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
    Using column name as first parameter to updateString
      Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  Testing updateAsciiStream on SQL type TIMESTAMP
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type TIMESTAMP
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type TIMESTAMP
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'TIMESTAMP'.
  Testing updateBytes on SQL type TIMESTAMP
    Using column position as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateBytes
      Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIMESTAMP'.
  Testing updateBinaryStream on SQL type TIMESTAMP
    Using column position as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateBinaryStream
      Got expected exception : An attempt was made to get a data value of type 'TIMESTAMP' from a data value of type 'java.io.InputStream'.
  Testing updateClob on SQL type TIMESTAMP
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type TIMESTAMP
    Using column position as first parameter to updateDate
    Using column name as first parameter to updateDate
  Testing updateTime on SQL type TIMESTAMP
    Using column position as first parameter to updateTime
    Using column name as first parameter to updateTime
  Testing updateTimestamp on SQL type TIMESTAMP
    Using column position as first parameter to updateTimestamp
    Using column name as first parameter to updateTimestamp
  Testing updateBlob on SQL type TIMESTAMP
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type TIMESTAMP
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIMESTAMP'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIMESTAMP'.
  Testing updateNull on SQL type TIMESTAMP
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type TIMESTAMP
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type TIMESTAMP
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Next datatype to test is BLOB(1k)
  Testing updateShort on SQL type BLOB(1k)
    Using column position as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'BLOB'.
    Using column name as first parameter to updateShort
      Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'BLOB'.
  Testing updateInt on SQL type BLOB(1k)
    Using column position as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'BLOB'.
    Using column name as first parameter to updateInt
      Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'BLOB'.
  Testing updateLong on SQL type BLOB(1k)
    Using column position as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'BLOB'.
    Using column name as first parameter to updateLong
      Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'BLOB'.
  Testing updateBigDecimal on SQL type BLOB(1k)
    Using column position as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'BLOB'.
    Using column name as first parameter to updateBigDecimal
      Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'BLOB'.
  Testing updateFloat on SQL type BLOB(1k)
    Using column position as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'BLOB'.
    Using column name as first parameter to updateFloat
      Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'BLOB'.
  Testing updateDouble on SQL type BLOB(1k)
    Using column position as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'BLOB'.
    Using column name as first parameter to updateDouble
      Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'BLOB'.
  Testing updateString on SQL type BLOB(1k)
    Using column position as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'BLOB'.
    Using column name as first parameter to updateString
      Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'BLOB'.
  Testing updateAsciiStream on SQL type BLOB(1k)
    Using column position as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'BLOB' from a data value of type 'java.io.InputStream'.
    Using column name as first parameter to updateAsciiStream
      Got expected exception : An attempt was made to get a data value of type 'BLOB' from a data value of type 'java.io.InputStream'.
  Testing updateCharacterStream on SQL type BLOB(1k)
    Using column position as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'BLOB' from a data value of type 'java.io.Reader'.
    Using column name as first parameter to updateCharacterStream
      Got expected exception : An attempt was made to get a data value of type 'BLOB' from a data value of type 'java.io.Reader'.
  Testing updateByte on SQL type BLOB(1k)
    Using column position as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.
    Using column name as first parameter to updateByte
      Got expected exception : An attempt was made to put a data value of type 'byte' into a data value of type 'BLOB'.
  Testing updateBytes on SQL type BLOB(1k)
    Using column position as first parameter to updateBytes
    Using column name as first parameter to updateBytes
  Testing updateBinaryStream on SQL type BLOB(1k)
    Using column position as first parameter to updateBinaryStream
    Using column name as first parameter to updateBinaryStream
  Testing updateClob on SQL type BLOB(1k)
    Using column position as first parameter to updateClob
    Using column name as first parameter to updateClob
  Testing updateDate on SQL type BLOB(1k)
    Using column position as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BLOB'.
    Using column name as first parameter to updateDate
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BLOB'.
  Testing updateTime on SQL type BLOB(1k)
    Using column position as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BLOB'.
    Using column name as first parameter to updateTime
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BLOB'.
  Testing updateTimestamp on SQL type BLOB(1k)
    Using column position as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BLOB'.
    Using column name as first parameter to updateTimestamp
      Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BLOB'.
  Testing updateBlob on SQL type BLOB(1k)
    Using column position as first parameter to updateBlob
    Using column name as first parameter to updateBlob
  Testing updateBoolean on SQL type BLOB(1k)
    Using column position as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'BLOB'.
    Using column name as first parameter to updateBoolean
      Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'BLOB'.
  Testing updateNull on SQL type BLOB(1k)
    Using column position as first parameter to updateNull
    Using column name as first parameter to updateNull
  Testing updateArray on SQL type BLOB(1k)
    Using column position as first parameter to updateArray
    Using column name as first parameter to updateArray
  Testing updateRef on SQL type BLOB(1k)
    Using column position as first parameter to updateRef
    Using column name as first parameter to updateRef
Positive Test22 - Test updateObject method
Next datatype to test is SMALLINT
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'SMALLINT'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'SMALLINT'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'SMALLINT'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'SMALLINT'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'SMALLINT'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'SMALLINT'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'SMALLINT'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'SMALLINT'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is INTEGER
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'INTEGER'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'INTEGER'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'INTEGER'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'INTEGER'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'INTEGER'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'INTEGER'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'INTEGER'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'INTEGER'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is BIGINT
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'BIGINT'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'BIGINT'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BIGINT'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BIGINT'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BIGINT'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BIGINT'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BIGINT'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BIGINT'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is DECIMAL(10,5)
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DECIMAL'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DECIMAL'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DECIMAL'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DECIMAL'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DECIMAL'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DECIMAL'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DECIMAL'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DECIMAL'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is REAL
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'REAL'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'REAL'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'REAL'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'REAL'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'REAL'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'REAL'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'REAL'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'REAL'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is DOUBLE
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DOUBLE'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DOUBLE'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DOUBLE'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'DOUBLE'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DOUBLE'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DOUBLE'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DOUBLE'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'DOUBLE'.
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is CHAR(60)
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
  updateObject with column name & Date object as parameters
  updateObject with column position & Time object as parameters
  updateObject with column name & Time object as parameters
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is VARCHAR(60)
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
  updateObject with column name & Date object as parameters
  updateObject with column position & Time object as parameters
  updateObject with column name & Time object as parameters
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is LONG VARCHAR
  updateObject with column position & Short object as parameters
  updateObject with column name & Short object as parameters
  updateObject with column position & Integer object as parameters
  updateObject with column name & Integer object as parameters
  updateObject with column position & Long object as parameters
  updateObject with column name & Long object as parameters
  updateObject with column position & BigDecimal object as parameters
  updateObject with column name & BigDecimal object as parameters
  updateObject with column position & Float object as parameters
  updateObject with column name & Float object as parameters
  updateObject with column position & Double object as parameters
  updateObject with column name & Double object as parameters
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
  updateObject with column name & Date object as parameters
  updateObject with column position & Time object as parameters
  updateObject with column name & Time object as parameters
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
  updateObject with column name & Boolean object as parameters
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is CHAR(2) FOR BIT DATA
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CHAR () FOR BIT DATA'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is VARCHAR(2) FOR BIT DATA
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'VARCHAR () FOR BIT DATA'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is LONG VARCHAR FOR BIT DATA
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'LONG VARCHAR FOR BIT DATA'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is CLOB(1k)
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CLOB'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'CLOB'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CLOB'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'CLOB'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CLOB'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'CLOB'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CLOB'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'CLOB'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CLOB'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'CLOB'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CLOB'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'CLOB'.
  updateObject with column position & String object as parameters
  updateObject with column name & String object as parameters
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'CLOB'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'CLOB'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CLOB'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'CLOB'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CLOB'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'CLOB'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CLOB'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'CLOB'.
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CLOB'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'CLOB'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is DATE
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'DATE'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'DATE'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'DATE'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'DATE'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'DATE'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'DATE'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'DATE'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'DATE'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'DATE'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'DATE'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'DATE'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'DATE'.
  updateObject with column position & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column name & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DATE'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'DATE'.
  updateObject with column position & Date object as parameters
  updateObject with column name & Date object as parameters
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DATE'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'DATE'.
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'DATE'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'DATE'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is TIME
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIME'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIME'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIME'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIME'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIME'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIME'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIME'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIME'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIME'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIME'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIME'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIME'.
  updateObject with column position & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column name & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIME'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIME'.
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'TIME'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'TIME'.
  updateObject with column position & Time object as parameters
  updateObject with column name & Time object as parameters
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIME'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIME'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is TIMESTAMP
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'TIMESTAMP'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'TIMESTAMP'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'TIMESTAMP'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIMESTAMP'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'TIMESTAMP'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'TIMESTAMP'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'TIMESTAMP'.
  updateObject with column position & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column name & String object as parameters
    Got expected exception : The syntax of the string representation of a datetime value is incorrect.
  updateObject with column position & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIMESTAMP'.
  updateObject with column name & bytes[] array as parameters
    Got expected exception : An attempt was made to put a data value of type 'byte[]' into a data value of type 'TIMESTAMP'.
  updateObject with column position & Date object as parameters
  updateObject with column name & Date object as parameters
  updateObject with column position & Time object as parameters
  updateObject with column name & Time object as parameters
  updateObject with column position & TimeStamp object as parameters
  updateObject with column name & TimeStamp object as parameters
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIMESTAMP'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'TIMESTAMP'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Next datatype to test is BLOB(1k)
  updateObject with column position & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'BLOB'.
  updateObject with column name & Short object as parameters
    Got expected exception : An attempt was made to put a data value of type 'short' into a data value of type 'BLOB'.
  updateObject with column position & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'BLOB'.
  updateObject with column name & Integer object as parameters
    Got expected exception : An attempt was made to put a data value of type 'int' into a data value of type 'BLOB'.
  updateObject with column position & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'BLOB'.
  updateObject with column name & Long object as parameters
    Got expected exception : An attempt was made to put a data value of type 'long' into a data value of type 'BLOB'.
  updateObject with column position & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'BLOB'.
  updateObject with column name & BigDecimal object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.math.BigDecimal' into a data value of type 'BLOB'.
  updateObject with column position & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'BLOB'.
  updateObject with column name & Float object as parameters
    Got expected exception : An attempt was made to put a data value of type 'float' into a data value of type 'BLOB'.
  updateObject with column position & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'BLOB'.
  updateObject with column name & Double object as parameters
    Got expected exception : An attempt was made to put a data value of type 'double' into a data value of type 'BLOB'.
  updateObject with column position & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'BLOB'.
  updateObject with column name & String object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.lang.String' into a data value of type 'BLOB'.
  updateObject with column position & bytes[] array as parameters
  updateObject with column name & bytes[] array as parameters
  updateObject with column position & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BLOB'.
  updateObject with column name & Date object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Date' into a data value of type 'BLOB'.
  updateObject with column position & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BLOB'.
  updateObject with column name & Time object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Time' into a data value of type 'BLOB'.
  updateObject with column position & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BLOB'.
  updateObject with column name & TimeStamp object as parameters
    Got expected exception : An attempt was made to put a data value of type 'java.sql.Timestamp' into a data value of type 'BLOB'.
  updateObject with column position & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'BLOB'.
  updateObject with column name & Boolean object as parameters
    Got expected exception : An attempt was made to put a data value of type 'boolean' into a data value of type 'BLOB'.
  updateObject with column position & null as parameters
  updateObject with column name & null as parameters
Positive Test23 - Test cancelRowUpdates after updateXXX methods on all the supported sql datatypes
  updateShort and then cancelRowUpdates
  updateInt and then cancelRowUpdates
  updateLong and then cancelRowUpdates
  updateBigDecimal and then cancelRowUpdates
  updateFloat and then cancelRowUpdates
  updateDouble and then cancelRowUpdates
  updateString and then cancelRowUpdates
  updateAsciiStream and then cancelRowUpdates
  updateCharacterStream and then cancelRowUpdates
  updateByte and then cancelRowUpdates
  updateBytes and then cancelRowUpdates
  updateBinaryStream and then cancelRowUpdates
  updateDate and then cancelRowUpdates
  updateTime and then cancelRowUpdates
  updateTimestamp and then cancelRowUpdates
Positive Test24a - after updateXXX, try cancelRowUpdates and then deleteRow
column 1 on this row before updateInt is 1
column 1 on this row after updateInt is 234
now cancelRowUpdates on the row
Since after cancelRowUpdates(), ResultSet is positioned on the same row, getXXX will pass
column 1 on this row after cancelRowUpdates is 1
Since after cancelRowUpdates(), ResultSet is positioned on the same row, a deleteRow at this point will pass
PASS : deleteRow passed as expected
calling updateRow after deleteRow w/o first positioning the ResultSet on the next row will fail
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Position the ResultSet with next()
Should be able to updateRow() on the current row now
Positive Test25 - issue cancelRowUpdates without any updateXXX
Positive Test26 - issue updateRow without any updateXXX will not move the resultset position
Positive Test27 - issue updateXXX and then deleteRow
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
SQL State : 24000
Got expected exception Invalid cursor state - no current row.
Positive Test28 - issue updateXXXs and then move off the row, the changes should be ignored
	 C1,C2
	 -- --
	{1,aa                  }
	{2,bb                  }
	{3,cc                  }
  column 1 on this row before updateInt is 1
  Issue updateInt to change the column's value to 2345
  Move to next row w/o issuing updateRow
  Make sure that changes didn't make it to the database
	 C1,C2
	 -- --
	{1,aa                  }
	{2,bb                  }
	{3,cc                  }
Positive Test29 - issue multiple updateXXXs and then a updateRow
	 C1,C2
	 -- --
	{1,aa                  }
	{2,bb                  }
	{3,cc                  }
  column 1 on this row before updateInt is 1
  Issue updateInt to change the column's value to 2345
  Issue another updateInt on the same row and column to change the column's value to 9999
  Issue updateString to change the column's value to 'xxxxxxx'
  Now issue updateRow
  Make sure that changes made it to the database correctly
	 C1,C2
	 -- --
	{9999,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
Positive Test30 - call updateXXX methods on only columns that correspond to a column in the table
	 C1,C2
	 -- --
	{9999,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
  Make sure that changes made it to the database correctly
	 C1,C2
	 -- --
	{22,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
Positive Test31a - case sensitive table and column names
  Make sure that changes made it to the database correctly
	 c11,C12
	 --- ---
	{11,22}
Positive Test31b - table and column names with spaces in middle and end
  Make sure for table " t 11 " that changes made it to the database correctly
	  c 111 ,C112
	 ------- ----
	{11,22}
Positive Test32 - call updateXXX methods on column that is not in for update columns list
	 C1,C2
	 -- --
	{22,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
SQL State : 42X31
Got expected exception Column 'C2' is not in the FOR UPDATE list of cursor 'SQLCUR37'.
updateRow passed
  Make sure the contents of table are unchanged
	 C1,C2
	 -- --
	{22,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
Positive Test33 - try to update a table from another schema
  contents of table t1 from current schema
	 C1,C2
	 -- --
	{22,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
  contents of table t1 from schema s2
	 C1S2T1,C2S2T1,C3S2T2
	 ------ ------ ------
	{1,2,2.2}
	{1,3,3.3}
  Try to change contents of 2nd column of s2.t1 using updateRow
  Make sure that changes made to the right table t1
  contents of table t1 from current schema should have remained unchanged
	 C1,C2
	 -- --
	{22,xxxxxxx             }
	{2,bb                  }
	{3,cc                  }
  contents of table t1 from schema s2 should have changed
	 C1S2T1,C2S2T1,C3S2T2
	 ------ ------ ------
	{1,1,2.2}
	{1,1,3.3}
Finished testing updateable resultsets
