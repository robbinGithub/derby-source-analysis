
options
{
	STATIC = false;
	LOOKAHEAD = 1;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	ERROR_REPORTING = true;
	USER_TOKEN_MANAGER = false;
	USER_CHAR_STREAM = true;
	OPTIMIZE_TOKEN_MANAGER = true;
	COMMON_TOKEN_ACTION = true;
	CACHE_TOKENS = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(SQLParser)

/*

   Derby - File org.apache.derby.impl.sql.compile.sqlgrammar.jj

   Copyright 1997, 2005 The Apache Software Foundation or its licensors, as applicable.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

*/

package org.apache.derby.impl.sql.compile;

import org.apache.derby.iapi.sql.Statement;
import org.apache.derby.iapi.sql.StatementType;

/* aggregates */
import org.apache.derby.impl.sql.compile.CountAggregateDefinition;
import org.apache.derby.impl.sql.compile.MaxMinAggregateDefinition;
import org.apache.derby.impl.sql.compile.SumAvgAggregateDefinition;

import org.apache.derby.impl.sql.compile.AggregateNode;
import org.apache.derby.impl.sql.compile.BinaryOperatorNode;
import org.apache.derby.impl.sql.compile.CallStatementNode;
import	org.apache.derby.impl.sql.compile.CharConstantNode;
import	org.apache.derby.impl.sql.compile.CastNode;
import org.apache.derby.impl.sql.compile.ColumnDefinitionNode;
import org.apache.derby.impl.sql.compile.ColumnReference;
import org.apache.derby.impl.sql.compile.CursorNode;
import org.apache.derby.impl.sql.compile.FromBaseTable;
import org.apache.derby.impl.sql.compile.FromList;
import org.apache.derby.impl.sql.compile.FromSubquery;
import org.apache.derby.impl.sql.compile.FromTable;
import org.apache.derby.impl.sql.compile.GroupByList;
import org.apache.derby.impl.sql.compile.HasNodeVisitor;
import org.apache.derby.impl.sql.compile.JavaToSQLValueNode;
import org.apache.derby.impl.sql.compile.JoinNode;
import org.apache.derby.impl.sql.compile.MethodCallNode;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.compile.ReplaceAggregatesWithCRVisitor;
import org.apache.derby.impl.sql.compile.ResultColumnList;
import org.apache.derby.impl.sql.compile.ResultColumn;
import org.apache.derby.impl.sql.compile.OrderByList;
import org.apache.derby.impl.sql.compile.OrderByColumn;
import org.apache.derby.impl.sql.compile.ResultSetNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryNode;
import org.apache.derby.impl.sql.compile.TableName;
import org.apache.derby.impl.sql.compile.TernaryOperatorNode;
import org.apache.derby.impl.sql.compile.ParameterNode;
import org.apache.derby.impl.sql.compile.ConstraintDefinitionNode;
import org.apache.derby.impl.sql.compile.DMLModStatementNode;
import org.apache.derby.impl.sql.compile.StatementNode;
import org.apache.derby.impl.sql.compile.TableElementList;
import org.apache.derby.impl.sql.compile.TableElementNode;
import org.apache.derby.impl.sql.compile.TableOperatorNode;
import org.apache.derby.impl.sql.compile.TransactionStatementNode;
import org.apache.derby.impl.sql.compile.TriggerReferencingStruct;
import org.apache.derby.impl.sql.compile.UnionNode;
import org.apache.derby.impl.sql.compile.IntersectOrExceptNode;
import org.apache.derby.impl.sql.compile.UnaryOperatorNode;
import org.apache.derby.impl.sql.compile.UntypedNullConstantNode;
import org.apache.derby.impl.sql.compile.UpdateNode;
import org.apache.derby.impl.sql.compile.UserTypeConstantNode;
import org.apache.derby.impl.sql.compile.ValueNode;
import org.apache.derby.impl.sql.compile.ValueNodeList;
import org.apache.derby.impl.sql.compile.GroupByColumn;
import org.apache.derby.impl.sql.compile.CurrentDatetimeOperatorNode;
import org.apache.derby.impl.sql.compile.CreateStatementNode;
import org.apache.derby.impl.sql.compile.AlterTableNode;

import org.apache.derby.impl.sql.compile.StringSlicer;
import org.apache.derby.impl.sql.compile.ParseException;
import org.apache.derby.impl.sql.compile.Token;
import org.apache.derby.impl.sql.compile.TokenMgrError;
import org.apache.derby.impl.sql.compile.SQLParserConstants;
import org.apache.derby.impl.sql.compile.CharStream;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.sql.dictionary.TriggerDescriptor;
import org.apache.derby.iapi.sql.dictionary.ViewDescriptor;

import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.execute.ExecutionContext;

import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.TypeId;
import org.apache.derby.iapi.sql.compile.TypeCompiler;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;

import org.apache.derby.iapi.types.DateTimeDataValue;
import org.apache.derby.iapi.types.DataTypeDescriptor;
import org.apache.derby.iapi.types.DataTypeUtilities;
import org.apache.derby.iapi.types.StringDataValue;
import org.apache.derby.iapi.types.DataValueDescriptor;

import org.apache.derby.iapi.error.StandardException;

import org.apache.derby.iapi.reference.SQLState;
import org.apache.derby.iapi.reference.JDBC30Translation;
import org.apache.derby.iapi.reference.Limits;

import org.apache.derby.iapi.sql.compile.CompilerContext;
import org.apache.derby.iapi.sql.compile.C_NodeTypes;

import org.apache.derby.iapi.services.context.ContextManager;

import org.apache.derby.iapi.sql.compile.NodeFactory;

import org.apache.derby.iapi.services.sanity.SanityManager;

import org.apache.derby.catalog.AliasInfo;
import org.apache.derby.catalog.TypeDescriptor;
import org.apache.derby.catalog.types.RoutineAliasInfo;

import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.services.io.StoredFormatIds;
import org.apache.derby.iapi.util.ReuseFactory;
import org.apache.derby.iapi.services.io.FormatableBitSet;
import org.apache.derby.iapi.util.StringUtil;

import java.sql.Types;
import java.util.Properties;
import java.util.Vector;
import java.lang.Character;

public class SQLParser
{
	private static final String[] SAVEPOINT_CLAUSE_NAMES = {"UNIQUE", "ON ROLLBACK RETAIN LOCKS", "ON ROLLBACK RETAIN CURSORS"};
	private static final String[] PROCEDURE_CLAUSE_NAMES =
		{null, "SPECIFIC", "RESULT SET", "LANGUAGE", "EXTERNAL NAME", "PARAMETER STYLE", "SQL", "ON NULL INPUT"};
	private static final String[] TEMPORARY_TABLE_CLAUSE_NAMES = {"NOT LOGGED", "ON COMMIT", "ON ROLLBACK"};
	/* The default length of a char or bit if the length is omitted */
	private static final int	DEFAULT_STRING_COLUMN_LENGTH = 1;

	// Defines for ON or USING clauses
	private static final int	ON_OR_USING_CLAUSE_SIZE = 2;
	private static final int	ON_CLAUSE = 0;
	private static final int	USING_CLAUSE = 1;

	// Defines for optional table clauses
	private static final int	OPTIONAL_TABLE_CLAUSES_SIZE = 3;
	private static final int	OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES = 0;
	private static final int	OPTIONAL_TABLE_CLAUSES_DERIVED_RCL = 1;
	private static final int	OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME = 2;

	// Define for UTF8 max
	private static final int	MAX_UTF8_LENGTH = 65535;

    // Constants for set operator types
    private static final int NO_SET_OP = 0;
    private static final int UNION_OP = 1;
    private static final int UNION_ALL_OP = 2;
    private static final int EXCEPT_OP = 3;
    private static final int EXCEPT_ALL_OP = 4;
    private static final int INTERSECT_OP = 5;
    private static final int INTERSECT_ALL_OP = 6;

	private StringSlicer				stringSlicer;
	private Object[]					paramDefaults;
	private String						statementSQLText;
	private NodeFactory					nodeFactory;
	private ContextManager				cm;
	private CompilerContext				compilerContext;

	/* The number of the next ? parameter */
	private int			parameterNumber;

	/* The list of ? parameters */
	private Vector			parameterList;

	/* Remember if the last identifier or keyword was a
	 * delimited identifier.  This is used for remembering
	 * if the xxx in SERIALIZE(xxx) was a delimited identifier
	 * because we need to know whether or not we can convert
	 * xxx to upper case if we try to resolve it as a class
	 * alias at bind time.
	 */
	private Boolean lastTokenDelimitedIdentifier = Boolean.FALSE;
	private Boolean	nextToLastTokenDelimitedIdentifier = Boolean.FALSE;


	/*
	** Remember the last token we got that was an identifier
	*/	
	private Token	lastIdentifierToken;
	private Token	nextToLastIdentifierToken;

	static final String SINGLEQUOTES = "\'\'";
	static final String DOUBLEQUOTES = "\"\"";

	static final String DEFAULT_INDEX_TYPE = "BTREE";

	//the following 2 booleans are used to make sure only null or not null is
	//defined for a column while creating a table or altering a table. Defining
	//both at the same time will be an error case.
        boolean explicitNotNull = false;
        boolean explicitNull = false;

	//this vector keeps a list of explicitly nullable columns, so that if they
	//get used in the table level primary key constraint, it will result in an
	//exception.	
        Vector explicitlyNullableColumnsList = new Vector();


	final void setCompilerContext(CompilerContext cc) {
		this.compilerContext = cc;
		this.cm = cc.getContextManager();
	}

	/**
	  *	Get the NodeFactory for this database.
	  *
	  *	@return	The NodeFactory for this database.
	  * @exception StandardException		Thrown on error
	  */
	private	final NodeFactory	getNodeFactory()	throws StandardException
	{
		if ( nodeFactory == null )
		{
			nodeFactory = getCompilerContext().getNodeFactory();
		}

		return	nodeFactory;
	}

	private final CompilerContext getCompilerContext()
	{		
		return compilerContext;			
	}

	private DataTypeDescriptor getDataTypeServices(int type, int precision, int scale,
			int length)
	{
		return new DataTypeDescriptor(
					TypeId.getBuiltInTypeId(type),
					precision,
					scale,
					true, /* assume nullable for now, change it if not nullable */
					length
				);
	}

	private DataTypeDescriptor getJavaClassDataTypeDescriptor(String javaClassName) 
	{
		return new DataTypeDescriptor(
					TypeId.getUserDefinedTypeId(
								javaClassName, 
								lastTokenDelimitedIdentifier.booleanValue()),
					true);
	}
	private LanguageConnectionContext getLanguageConnectionContext()
	{
		return (LanguageConnectionContext) getContextManager().getContext(
										LanguageConnectionContext.CONTEXT_ID);
	}

	/**
		Utility method for checking that the underlying database has been
		upgraded to the required level to use this functionality. Used to
		disallow SQL statements that would leave on-disk formats that would
		not be understood by a engine that matches the current upgrade level
		of the database. Throws an exception if the database is not a the required level.
		<P>
		Typically used for CREATE statements at the parser level. Called usually just
		before the node is created, or can be called in just a partial syntax fragment
		
		@param majorVersion Data Dictionary major version (DataDictionary.DD_ constant)
		@param feature SQL Feature name, for error text.
	*/
	private void checkVersion(int version, String feature) throws StandardException
	{
		getLanguageConnectionContext().getDataDictionary().checkVersion(
				version, feature);
	}

	/**
		Check that the current mode supports internal extensions.

		@param feature Description of feature for exception.

		@exception StandardException current mode does not support statement
	*/
	private void checkInternalFeature(String feature) throws StandardException
	{
		CompilerContext cc = getCompilerContext();
		if ((cc.getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, feature);
	}

	/**
	 * check if the type length is ok for the given type.
	 */
	private void checkTypeLimits(int type, int length)
		throws StandardException
	{	
	boolean valid = true;

		
	switch (type) {
		case Types.BINARY:
		case Types.CHAR:
			if (length  > Limits.DB2_CHAR_MAXWIDTH)
				valid = false;
			break;
			
		case Types.VARBINARY:
		case Types.VARCHAR:
			if (length  > Limits.DB2_VARCHAR_MAXWIDTH)
				valid = false;

			break;
		default:
			break;
	}
	if (!valid)  // If these limits are too big 
		{
			DataTypeDescriptor charDTD = 
				DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
	
			throw StandardException.newException(SQLState.LANG_DB2_LENGTH_PRECISION_SCALE_VIOLATION, charDTD.getSQLstring());
		}	
	}
	
	

	// Get the current ContextManager
	private final ContextManager getContextManager()
	{
		return cm;
	}

	private StringSlicer	getStringSlicer()
	{
		if ( stringSlicer == null )
		{
			stringSlicer = new StringSlicer( statementSQLText);
		}
		return	stringSlicer;
	}

	/*
	** Compress 2 adjacent (single or double) quotes into a single (s or d) quote when
	** found in the middle of a String.
	** NOTE:  """" or '''' will be compressed into "" or ''.
	** 		  This function assumes that the leading and trailing quote from a
	** 		  string or delimited identifier have already been removed.
	*/
	private static String compressQuotes(String source, String quotes)
	{
		String	result = source;
		int		index;
	
		/* Find the first occurrence of adjacent quotes. */
		index = result.indexOf(quotes);

		/* Replace each occurrence with a single quote and begin the
		 * search for the next occurrence from where we left off.
		 */
		while (index != -1)
		{
			result = result.substring(0, index + 1) + result.substring(index + 2);

			index = result.indexOf(quotes, index + 1);
		}

		return result;
	}
	
	private static void verifyImageLength(String image) throws StandardException
		{
		// beetle 2758.  For right now throw an error for literals > 64K
		if (image.length() > MAX_UTF8_LENGTH)
			{
	   	throw StandardException.newException(SQLState.LANG_INVALID_LITERAL_LENGTH);
			}	
		}

	/*
	** Converts a delimited id to a canonical form.
	** Post process delimited identifiers to eliminate leading and
	** trailing " and convert all occurrences of "" to ".
	*/
	private static String normalizeDelimitedID(String str)
	{
		str = compressQuotes(str, DOUBLEQUOTES);
		return str;
	}
	private static boolean isDATETIME(int val)
	{
		if (val == DATE || val == TIME || val == TIMESTAMP)
			return true;
		else
			return false;
	}

	/*
	 * Generate a multiplicative operator node, if necessary.
	 *
	 * If there are two operands, generate the multiplicative operator
	 * that corresponds to the multiplicativeOperator parameter.  If there
	 * is no left operand, just return the right operand.
	 *
	 * @param leftOperand	The left operand, null if no operator
	 * @param rightOperand	The right operand
	 * @param multiplicativeOperator	An identifier from BinaryOperatorNode
	 *									telling what operator to generate.
	 *
	 * @return	The multiplicative operator, or the right operand if there is
	 *			no operator.
	 *
	 * @exception StandardException		Thrown on error
	 */

	ValueNode multOp(ValueNode leftOperand,
							ValueNode rightOperand,
							int multiplicativeOperator)
					throws StandardException
	{
		if (leftOperand == null)
		{
			return rightOperand;
		}

		switch (multiplicativeOperator)
		{
		  case BinaryOperatorNode.TIMES:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_TIMES_OPERATOR_NODE,
									leftOperand,
									rightOperand, 
									getContextManager());

		  case BinaryOperatorNode.DIVIDE:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_DIVIDE_OPERATOR_NODE,
									leftOperand,
									rightOperand,
									getContextManager());
		  case BinaryOperatorNode.CONCATENATE:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CONCATENATION_OPERATOR_NODE,
									leftOperand,
									rightOperand,
									getContextManager());

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT("Unexpected multiplicative operator " + 
										multiplicativeOperator);
			return null;
		}
	}

	/**
	 * Set up and like the parameters to the descriptors.
	 * Set all the ParameterNodes to point to the array of
	 * parameter descriptors.
	 * 
	 * @return Nothing
	 *	@exception	StandardException
	 */
	 private void setUpAndLinkParameters()
			throws StandardException
	 {
		CompilerContext cc = getCompilerContext();
		cc.setParameterList(parameterList);
		/* Link the untyped parameters to the array of parameter descriptors */
		
		DataTypeDescriptor[] descriptors = cc.getParameterTypes();

		ParameterNode				newNode;
		ParameterNode				oldNode;
		int							paramCount;

		/*
		** Iterate through the list of untyped parameter nodes, set each one
		** to point to the array of parameter descriptors.
		*/
		paramCount = -1;
		int plSize = parameterList.size();
		for (int index = 0; index < plSize; index++)
		{
			paramCount++;

			newNode = (ParameterNode) parameterList.elementAt(index);
			newNode.setDescriptors(descriptors );
		}
	}

	/**
	 *  Initializes the list of unnamed parameters, i.e., "?" parameters
	 *
	 *	Usually, this routine just gets an empty list for the unnamed parameters.
	 *
	 *
	 */
	void	initUnnamedParameterList()
	{
		parameterList = new Vector();
	}

	/**
	 * Makes a new unnamed ParameterNode and chains it onto parameterList.
	 *
	 *	@return	new unnamed parameter.
	 *
	 *	@exception	StandardException
	 */
	ParameterNode	makeParameterNode(  )
					throws StandardException
	{
		ParameterNode	parm;
		DataValueDescriptor sdv = null;

		if ((paramDefaults != null) && (parameterNumber < paramDefaults.length))
		{
			sdv = (DataValueDescriptor) paramDefaults[parameterNumber];
		}

		parm = (ParameterNode) nodeFactory.getNode(
								C_NodeTypes.PARAMETER_NODE,
								ReuseFactory.getInteger(parameterNumber),
								sdv,
								getContextManager());

		parameterNumber++;
		parameterList.addElement(parm);

		return parm;
	}

	/**
	 * Looks up an unnamed parameter given its parameter number.
	 *
	 *	@param	paramNumber		Number of parameter in unnamed
	 *							parameter list.
	 *
	 *	@return	corresponding unnamed parameter.
	 *
	 */
	ParameterNode	lookupUnnamedParameter( int paramNumber )
	{
		ParameterNode		unnamedParameter;

		unnamedParameter = (ParameterNode) parameterList.elementAt( paramNumber );
		return unnamedParameter;
	}

	/**
	 * Translate a String containing a number into the appropriate type
	 * of Numeric node.
	 *
	 * @exception StandardException		Thrown on error
	 */
	ValueNode getNumericNode(String num) throws StandardException
	{
		ContextManager cm = getContextManager();

		// first, see if it might be an integer
		try
		{
			return (ValueNode) nodeFactory.getNode(
										C_NodeTypes.INT_CONSTANT_NODE,
										new Integer(num),
										cm);
		}
		catch (NumberFormatException nfe)
		{
			// we catch because we want to continue on below
		}

		// next, see if it might be a long
		try
		{
			return (ValueNode) nodeFactory.getNode(
										C_NodeTypes.LONGINT_CONSTANT_NODE,
										new Long(num),
										cm);
		}
		catch (NumberFormatException nfe)
		{
			// we catch because we want to continue on below
		}

		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.DECIMAL_CONSTANT_NODE,
									num,
									cm);
	}
	/**
	 * Determine whether the current token represents one of
	 * the built-in aliases.
	 *
	 * @return	TRUE iff the current token names a built-in alias
	 */
	private boolean isBuiltInAlias()
	{
		boolean retval = false;

		switch (token.kind)
		{
		  case UCASE:
		  case LCASE:
		  case SQRT:
		  case LOCATE:
		  case ABS:
		  case ABSVAL:
		  case SUBSTR:
		  case MOD:
			retval = true;
			break;

		  default:
			retval = false;
			break;
		}


		return retval;
	}


	/**
	 * Determine whether the next sequence of tokens represents one of
	 * the common (built-in) datatypes.
	 *
	 * @return	TRUE iff the next set of tokens names a common datatype
	 */
	boolean commonDatatypeName(boolean checkFollowingToken)
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case CHARACTER:
		  case CHAR:
		  case VARCHAR:
		  case NVARCHAR:
		  case NCHAR:
		  case BIT:
		  case NUMERIC:
		  case DECIMAL:
		  case DEC:
		  case INTEGER:
		  case INT:
		  case SMALLINT:
		  case LONGINT:
		  case FLOAT:
		  case REAL:
		  case DATE:
		  case TIME:
		  case TIMESTAMP:
		  case BOOLEAN:
		  case DOUBLE:
		  case BLOB:
		  case CLOB:
		  case NCLOB:
		  case BINARY: // LARGE OBJECT
		  case XML:
			retval = true;
			break;

		  case LONG:
			if (checkFollowingToken == true)
			{
				switch (getToken(2).kind)
				{
				  case VARCHAR:
				  case NVARCHAR:
				  case BINARY:
				  case VARBINARY:
				  case BIT:
					retval = true;
					break;
				}
				break;
			}
			else
			{
				retval = true;
				break;
			}

		  case NATIONAL:
			if (checkFollowingToken == true)
			{
				switch (getToken(2).kind)
				{
				  case CHAR:
				  case CHARACTER:
					retval = true;
					break;
				}
				break;
			}
			else
			{
				retval = true;
				break;
			}
		}

		return retval;
	}

	/**
	 * Get a DELETE node given the pieces.
	 *
	 *
	 *	@exception	StandardException
	 */
	 private QueryTreeNode getDeleteNode(FromTable fromTable,
										 TableName tableName,
										 ValueNode whereClause)
		throws StandardException
	{
		FromList   fromList = (FromList) nodeFactory.getNode(
								C_NodeTypes.FROM_LIST,
								getContextManager());
		QueryTreeNode retval;
		SelectNode resultSet;

		fromList.addFromTable(fromTable);

		resultSet = (SelectNode) nodeFactory.getNode(
										C_NodeTypes.SELECT_NODE,
										null,
										null, 	/* AGGREGATE list */
										fromList, /* FROM list */
					  					whereClause, /* WHERE clause */
										null, /* GROUP BY list */
										getContextManager());

		retval =
			(QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.DELETE_NODE,
							tableName,
							resultSet,
							getContextManager());

		setUpAndLinkParameters();

		return retval;
	}

	/**
	 * Get an UPDATE node given the pieces.
	 *
	 *
	 *	@exception	StandardException
	 */
	 private QueryTreeNode getUpdateNode(FromTable fromTable,
										 TableName tableName,
										 ResultColumnList setClause,
										 ValueNode whereClause)
		throws StandardException
	{
		FromList   fromList = (FromList) nodeFactory.getNode(
								C_NodeTypes.FROM_LIST,
								getContextManager());
		QueryTreeNode retval;
		SelectNode resultSet;

		fromList.addFromTable(fromTable);

		resultSet = (SelectNode) nodeFactory.getNode(
										C_NodeTypes.SELECT_NODE,
										setClause,
										null, 	/* AGGREGATE list */
										fromList, /* FROM list */
					  					whereClause, /* WHERE clause */
										null, /* GROUP BY list */
										getContextManager());

		retval =
			(QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.UPDATE_NODE,
							tableName,
							resultSet,
							getContextManager());

		setUpAndLinkParameters();

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a remainingPredicate() rule.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			remainingPredicate()
	 */
	private boolean remainingPredicateFollows()
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case EQUALS_OPERATOR:
		  case NOT_EQUALS_OPERATOR:
		  case NOT_EQUALS_OPERATOR2: // !=
		  case LESS_THAN_OPERATOR:
		  case GREATER_THAN_OPERATOR:
		  case LESS_THAN_OR_EQUALS_OPERATOR:
		  case GREATER_THAN_OR_EQUALS_OPERATOR:
		  case IN:
		  case LIKE:
		  case BETWEEN:
		  	retval = true;
			break;

		  case NOT:
		  	switch (getToken(2).kind)
			{
			  case IN:
			  case LIKE:
			  case BETWEEN:
			  	retval = true;
			}
			break;
		}

		return retval;
	}


	/**
	 * Determine whether the next token is a DROP
	 *
	 * @return	TRUE iff the next token is DROP
	 */
	private boolean dropFollows()
	{
		if (getToken(1).kind == DROP)
		{ return true; }
		else { return false; }
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a escapedValueFunction().
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			escapedValueFunction()
	 */
	private boolean escapedValueFunctionFollows()
	{
		if (getToken(1).kind != LEFT_BRACE)
		{
			return false;
		}

		return getToken(2).kind == FN;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a columnInvocation() rule.  columnInvocations start with
	 * [ [ id . ] id . ] id . id (
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			columnInvocation()
	 */
	private boolean columnMethodInvocationFollows()
	{
		int tokKind;

		// First token must not be a built-in function name that can be
		// followed immediately by a PERIOD. There are only a few of
		// these - most built-in functions have a LEFT_PAREN following
		// the function name.

		// if we run out of token, it's probably a syntax error,  
		// in fact
		tokKind = getToken(1).kind;
		if ( tokKind == EOF ) { return false; }                
		
		// disambiguate from named parameter reference
		if ( getToken(1).image.charAt(0) == '?' ) { return false; }

		if (tokKind == CURRENT_DATE ||
			tokKind == CURRENT_TIME ||
			tokKind == CURRENT_TIMESTAMP ||
			tokKind == CURRENT && (isDATETIME(getToken(2).kind)) )
		{
			return false;
		}

		// Second token must be a PERIOD
		if (getToken(2).kind != PERIOD)
		{
			return false;
		}

		// We have established that we start with " id . "
		tokKind = getToken(4).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id(
			return true;
		}

		// Not id.id(, so 4th token must be PERIOD
		if (tokKind != PERIOD)
		{
			return false;
		}

		tokKind = getToken(6).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id.id(
			return true;
		}

		// Not id.id.id(, so 6th token must be PERIOD
		if (tokKind != PERIOD)
		{
			return false;
		}

		tokKind = getToken(8).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id.id.id(
			return true;
		}

		return false;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of an aggregateNode()() rule.  aggregateNodes() start with one
	 * of the built-in aggregate names, or with an identifier followed
	 * by "( DISTINCT". A non-distinct user-defined aggregate invocation
	 * is treated as a staticMethodInvocationAlias() by the parser,
	 * and the binding phase figures out what it really is by looking
	 * at the data dictionary.
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			aggregateNode()
	 */
	private boolean aggregateFollows()
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case COUNT:
		  case MAX:
		  case AVG:
		  case MIN:
		  case SUM:
			// This is a built-in aggregate
			retval = true;
			break;

		  default:
			// Not a built-in aggregate - assume the first token is an
			// identifier, and see whether it is followed by " ( DISTINCT "
		  	if (getToken(2).kind == LEFT_PAREN && getToken(3).kind == DISTINCT)
				retval = true;
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a miscBuiltins().
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			aggregateNode()
	 */
	private boolean miscBuiltinFollows()
	{
		boolean retval = false;
		int tokKind = getToken(1).kind;
		
		if (getToken(0).kind == CALL) 
			retval = true;

		switch (tokKind)
		{
		  case GET_CURRENT_CONNECTION:
		  case CURRENT_DATE:
		  case CURRENT_TIME:
		  case CURRENT_TIMESTAMP:
		  	retval = true;
			break;

		  case CURRENT:
			if (isDATETIME(getToken(2).kind)) 
		  		retval = true;
			break;
	
		  case CAST:
		  case LEFT_PAREN:
		  	retval = false;
			break;

		  default:
		    if (getToken(2).kind == LEFT_PAREN)
				retval = true;
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a subquery. A subquery can begin with an arbitrary number of
	 * left parentheses, followed by either SELECT or VALUES.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			subquery.
	 */
	private boolean subqueryFollows()
	{
		int tokKind;
		boolean retval = false;

		for (int i = 1; true; i++)
		{
			tokKind = getToken(i).kind;
			if (tokKind == LEFT_PAREN)
			{
				// A subquery can start with an arbitrary number of left
				// parentheses.
				continue;
			}
			else if (tokKind == SELECT || tokKind == VALUES)
			{
				// If the first token we find after all the left parentheses
				// is SELECT or VALUES, it's a subquery.
				retval = true;
				break;
			}
			else
			{
				// If the first token we find after all the left parentheses
				// is neither SELECT nor VALUES, it's not a subquery.
				break;
			}
		}

		return retval;
	}


	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a rowValueConstructorList. A rowValueConstructorList is a comma-
	 * separated list of expressions enclosed in parentheses. This presents
	 * special problems, because an expression be nested within an
	 * arbitrary number of parentheses. To determine whether a left
	 * parenthesis introduces a rowValueConstructorList or an expression,
	 * we need to find the closing parenthesis, and determine whether
	 * the next token is a comma.
	 *
	 * For example, the following is a rowValueConstructorList:
	 *
	 *		(((1)), 2)
	 *
	 * and the following is just an expression:
	 *
	 *		(((1)))
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			subquery.
	 */
	private boolean rowValueConstructorListFollows()
	{
		int nesting;
		boolean retval = false;

		// A rowValueConstructorList starts with a left parenthesis
		if (getToken(1).kind == LEFT_PAREN)
		{
			// Keep track of the nesting of parens while looking ahead
			nesting = 1;
			for (int i = 2; true; i++)
			{
				int tokKind = getToken(i).kind;

				// Special case for NULL/DEFAULT because they are not allowed in
				// a parenthesized expression, so (null)/(default) must be seen
				// as a rowValueConstructorList with one element.
				if (i == 2 && (tokKind == NULL || tokKind == _DEFAULT))
				{
					retval = true;
					break;
				}

				// There must be a COMMA at nesting level 1 (i.e. outside of
				// the first expression) for it to be a rowValueConstructorList
				if (nesting == 1 && tokKind == COMMA)
				{
					retval = true;
					break;
				}

				// If we run out of tokens before finding the last closing
				// parenthesis, it's not a rowValueConstructorList (it's
				// probably a syntax error, in fact)
				if (tokKind == EOF)
				{
					break;
				}

				// Increase the nesting for each (, and decrease it for each )
				if (tokKind == LEFT_PAREN)
				{
					nesting++;
				}
				else if (tokKind == RIGHT_PAREN)
				{
					nesting--;
				}

				// Don't look any farther than the last closing parenthesis
				if (nesting == 0)
				{
					break;
				}
			}
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a propertyList(). A properties list is the word "properties"
	 * followed by a dot-separated list, followed by an =,
	 * followed by a value. This means that the first token must be the word
	 * "properties", and the third must be a period (from the dot-separated
	 * list) or an =.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			propertyList().
	 */
	private boolean propertyListFollows()
	{
		int tokKind;

		return 
			getToken(1).kind == PROPERTIES &&
				((tokKind = getToken(3).kind) == PERIOD ||
					tokKind == EQUALS_OPERATOR
				);
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a newInvocation(). A newInvocation() begins with the word "new"
	 * followed by a dot-separated list of identifiers, followed
	 * by a left parenthesis.
	 *
	 * @param startToken	Token to look for new at
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			newInvocation().
	 */
	private boolean newInvocationFollows(int startToken)
	{
		boolean retval = false;

		// newInvocation() starts with the word "new"
		if (getToken(startToken).kind == NEW)
		{
			// Look at every other token. Ignore the identifiers, because
			// they are hard to test for.
			for (int i = 2 + startToken; true; i += 2)
			{
				int tokKind = getToken(i).kind;

				// If we find a left parenthesis without any intervening
				// cruft, we have found a newInvocation()
				if (tokKind == LEFT_PAREN)
				{
					retval = true;
					break;
				}
				else if (tokKind != PERIOD)
				{
					// Anything other than a PERIOD is "cruft"
					break;
				}
			}
		}

		return retval;
	}
	/**
	 * Determine whether the next sequence of tokens is a class name
	 *
	 * @param startToken	Token to look for class name at
	 *
	 * @return	TRUE iff the next set of tokens is the java class name
	 */
	boolean javaClassFollows()
	{
		boolean retval = false;

		// Look at every other token. Ignore the identifiers, because
		// they are hard to test for.
		for (int i = 2; true; i += 2)
		{
			int tokKind = getToken(i).kind;

			// If we find a '::' without any intervening
			// cruft, we have found a javaClass
			if (tokKind == DOUBLE_COLON)
			{
				retval = true;
				break;
			}
			else if (tokKind != PERIOD)
			{
				// Anything other than a PERIOD is "cruft"
				break;
			}
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a FROM newInvocation(). A FROM newInvocation() begins with the words "from new"
	 * followed by a dot-separated list of identifiers, followed
	 * by a left parenthesis.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			FROM newInvocation().
	 */
	private boolean fromNewInvocationFollows()
	{
		boolean retval = false;

		// FROM newInvocation() starts with the words "from new"
		return (getToken(1).kind == FROM && newInvocationFollows(2));
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a joinedTableExpression(). A joinedTableExpression() begins
	 * with one of:
	 *
	 *	JOIN
	 *	INNER JOIN
	 *	LEFT OUTER JOIN
	 *	RIGHT OUTER JOIN
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			joinedTableExpression().
	 */
	private boolean joinedTableExpressionFollows()
	{
		boolean retval = false;

		int tokKind1 = getToken(1).kind;
		int tokKind2 = getToken(2).kind;

		if (tokKind1 == JOIN)
		{
			retval = true;
		}
		else if (tokKind1 == INNER && tokKind2 == JOIN)
		{
			retval = true;
		}
		else if ((tokKind1 == LEFT || tokKind1 == RIGHT) && tokKind2 == OUTER)
		{
			if (getToken(3).kind == JOIN)
			{
				retval = true;
			}
		}
		else if ((tokKind1 == LEFT || tokKind1 == RIGHT) && tokKind2 == JOIN)
		{
			retval = true;
		}

		return retval;
	}

	/**
	 * Translate a token for the name of a built-in aggregate to a String
	 * containing an aggregate name.
	 */
	private static String aggName(Token token)
	{
		String	retval = null;

		switch (token.kind)
		{
		  case MAX:
		  	retval = "MAX";
			break;

		  case AVG:
		    retval = "AVG";
			break;

		  case MIN:
		    retval = "MIN";
			break;

		  case SUM:
		    retval = "SUM";
			break;

		  case COUNT:
		    retval = "COUNT";
			break;

		  default:
		  	if (SanityManager.DEBUG)
			{
				SanityManager.THROWASSERT("Unexpected token type in aggName: " +
											token.kind);
			}
			break;
		}

		return retval;
	}

	/**
	 * Translate a token for the name of a built-in aggregate to an
	 * aggregate definition class.
	 */
	private static Class aggClass(Token token)
	{
		Class	retval = null;

		switch (token.kind)
		{
		  case MAX:
		  case MIN:
		  	retval = MaxMinAggregateDefinition.class;
			break;

		  case AVG:
		  case SUM:
		  	retval = SumAvgAggregateDefinition.class;
			break;

		  case COUNT:
		    retval = CountAggregateDefinition.class;
			break;

		  default:
		  	if (SanityManager.DEBUG)
			{
				SanityManager.THROWASSERT("Unexpected token type in aggClass: "
											+ token.kind);
			}
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of another element in a PROPERTY list. These elements are of the
	 * form:
	 *
	 *		COMMA dot.separated.list = ...
	 *
	 * Look for the COMMA, the dots in the dot-separated list, and the =
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			another element in a PROPERTY list.
	 */
	private boolean anotherPropertyFollows()
	{
		boolean retval = false;

		// Element must start with COMMA
		if (getToken(1).kind == COMMA)
		{
			// Rest of element is dot-separated list with = at end
			int i = 3;
			int tokKind;
			do
			{
				tokKind = getToken(i).kind;

				// If we've found nothing but PERIODs until the EQUALS_OPERATOR
				// it is the beginning of another property list element.
				if (tokKind == EQUALS_OPERATOR)
				{
					retval = true;
					break;
				}

				i += 2;
			} while (tokKind == PERIOD);
		}

		return retval;
	}

	/**
	 * Get one of the several types of create alias nodes.
	 *
	 * @param aliasName	The name of the alias
	 * @param fullStaticMethodName	The full path/method name
	 * @param aliasSpecificInfo	 Information specific to the type of alias being created.
	 * @param aliasType	The type of alias to create
	 * @param delimitedIdentifier	Whether or not to treat the class name
	 *								as a delimited identifier if trying to
	 *								resolve it as a class alias.
	 *
	 * @return	A CreateAliasNode matching the given parameters
	 *
	 * @exception StandardException		Thrown on error
	 */
	QueryTreeNode
	getCreateAliasNode(
		Object aliasName,
		String fullStaticMethodName,
		Object aliasSpecificInfo,
		char aliasType,
		Boolean delimitedIdentifier)
		throws StandardException
	{

		StatementNode aliasNode = (StatementNode) getNodeFactory().getCreateAliasNode
			(
				aliasName,
				fullStaticMethodName,
				aliasSpecificInfo,
				aliasType,
				delimitedIdentifier,
				getContextManager()
			);

		return aliasNode;
	}

	/**
		Create a node for the drop alias/procedure call.
	*/
	QueryTreeNode
	dropAliasNode(Object aliasName, char type) throws StandardException
	{

		StatementNode stmt = (StatementNode) nodeFactory.getNode(
								C_NodeTypes.DROP_ALIAS_NODE,
								aliasName,
								new Character(type),
								getContextManager());

		return stmt;
	}

    /**
     * Get a substring node from
     *      - the string
     *      - the start position
     *      - the length
     *      - a boolean values for specifying the kind of substring function
     * @exception StandardException  Thrown on error
     */
    ValueNode getSubstringNode( ValueNode stringValue, ValueNode startPosition, 
                         ValueNode length, Boolean boolVal ) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode(
	    					C_NodeTypes.SUBSTRING_OPERATOR_NODE,
		    				stringValue,
			    			startPosition,
				    		length,
				    		ReuseFactory.getInteger(TernaryOperatorNode.SUBSTRING),
					    	null,
						    getContextManager());
    }

    final public TableName
    qualifiedName(int id_length_limit) throws ParseException, StandardException
    {
	return qualifiedName( C_NodeTypes.TABLE_NAME, id_length_limit);
    }

    private void initStatement( String statementSQLText, Object[] paramDefaults)
        throws StandardException
    {
        /* Do per-statement initialization here */
        parameterNumber = 0;
        stringSlicer = null;
        this.statementSQLText = statementSQLText;
        this.paramDefaults = paramDefaults;
        nodeFactory = getNodeFactory();
        initUnnamedParameterList();
    } // End of initStatement

    private void checkIdentifierLengthLimit( String identifier, int identifier_length_limit) 
        throws StandardException
    {
	if (identifier.length() > identifier_length_limit)
		throw StandardException.newException(SQLState.LANG_IDENTIFIER_TOO_LONG, identifier, String.valueOf(identifier_length_limit));
    }

    private ValueNode getJdbcIntervalNode( int intervalType) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.INT_CONSTANT_NODE,
                                                ReuseFactory.getInteger( intervalType),
                                                getContextManager());
    }
}

PARSER_END(SQLParser)

TOKEN_MGR_DECLS :
{
	void	CommonTokenAction(Token t)
	{
		t.beginOffset = input_stream.getBeginOffset();
		t.endOffset = input_stream.getEndOffset();
	}
}

SKIP :
{	/* white space */
	  " "
	| "\t"
	| "\n"
	| "\r"
}

SKIP :
{	/* comments */
  <SINGLE_LINE_SQLCOMMENT: "--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/*
	This list should contain only and all SQL92 keywords that are reserved.
	Reserved keywords can be used as identifiers in the language only
	as delimited identifiers.
 */
/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* SQL92 reserved Keywords */
	<ADD: "add">
|	<ALL: "all">
|	<ALLOCATE: "allocate">
|	<ALTER: "alter">
|	<AND: "and">
|	<ANY: "any">
|	<ARE: "are">
|	<AS: "as">
|	<ASC: "asc">
|	<ASSERTION: "assertion">
|	<AT: "at">
|	<AUTHORIZATION: "authorization">
|	<AVG: "avg">
|	<BEGIN: "begin">
|	<BETWEEN: "between">
|	<BINARY: "binary">
|	<BIT: "bit">
|	<BOTH: "both">
|	<BY: "by">
|	<CASCADE: "cascade">
|	<CASCADED: "cascaded">
|	<CASE: "case">
|	<CAST: "cast">
|	<CHAR: "char">
|	<CHARACTER: "character">
|	<CHARACTER_LENGTH: "character_length">
|	<CHECK: "check">
|	<CLOSE: "close">
|	<COALESCE: "coalesce">
|	<COLLATE: "collate">
|	<COLLATION: "collation">
|	<COLUMN: "column">
|	<COMMIT: "commit">
|	<CONNECT: "connect">
|	<CONNECTION: "connection">
|	<CONSTRAINT: "constraint">
|	<CONSTRAINTS: "constraints">
|	<CONTINUE: "continue">
|	<CONVERT: "convert">
|	<CORRESPONDING: "corresponding">
|	<COUNT: "count">
|	<CREATE: "create">
|	<CURRENT: "current">
|	<CURRENT_DATE: "current_date">
|	<CURRENT_TIME: "current_time">
|	<CURRENT_TIMESTAMP: "current_timestamp">
|	<CURRENT_USER: "current_user">
|	<CURSOR: "cursor">
|	<D: "d">
|	<DEALLOCATE: "deallocate">
|	<DEC: "dec">
|	<DECIMAL: "decimal">
|	<DECLARE: "declare">
|	<_DEFAULT: "default">
|	<DEFERRABLE: "deferrable">
|	<DEFERRED: "deferred">
|	<DELETE: "delete">
|	<DESC: "desc">
|	<DESCRIBE: "describe">
|	<DIAGNOSTICS: "diagnostics">
|	<DISCONNECT: "disconnect">
|	<DISTINCT: "distinct">
|	<DOUBLE: "double">
|	<DROP: "drop">
|	<ELSE: "else">
|	<END: "end">
|	<ENDEXEC: "end-exec">
|	<ESCAPE: "escape">
|	<EXCEPT: "except">
|	<EXCEPTION: "exception">
|	<EXEC: "exec">
|	<EXECUTE: "execute">
|	<EXISTS: "exists">
|	<EXTERNAL: "external">
|	<FALSE: "false">
|	<FETCH: "fetch">
|	<FIRST: "first">
|	<FLOAT: "float">
|	<FOR: "for">
|	<FOREIGN: "foreign">
|	<FOUND: "found">
|	<FROM: "from">
|	<FULL: "full">
|	<FUNCTION: "function">
|	<GET: "get">
|	<GLOBAL: "global">
|	<GO: "go">
|	<GOTO: "goto">
|	<GRANT: "grant">
|	<GROUP: "group">
|	<HAVING: "having">
|	<HOUR: "hour">
|	<IDENTITY: "identity">
|	<IMMEDIATE: "immediate">
|	<IN: "in">
|	<INDICATOR: "indicator">
|	<INITIALLY: "initially">
|	<INNER: "inner">
|	<INPUT: "input">
|	<INSENSITIVE: "insensitive">
|	<INSERT: "insert">
|	<INT: "int">
|	<INTEGER: "integer">
|	<INTERSECT: "intersect">
|	<INTO: "into">
|	<IS: "is">
|	<ISOLATION: "isolation">
|	<JOIN: "join">
|	<KEY: "key">
|	<LAST: "last">
|	<LEFT: "left">
|	<LIKE: "like">
|	<LOWER: "lower">
|	<MATCH: "match">
|	<MAX: "max">
|	<MIN: "min">
|	<MINUTE: "minute">
|	<MODULE: "module">
|	<NATIONAL: "national">
|	<NATURAL: "natural">
|	<NCHAR: "nchar">
|	<NEXT: "next">
|	<NO: "no">
|	<NOT: "not">
|	<NULL: "null">
|	<NULLIF: "nullif">
|	<NUMERIC: "numeric">
|	<OF: "of">
|	<ON: "on">
|	<ONLY: "only">
|	<OPEN: "open">
|	<OPTION: "option">
|	<OR: "or">
|	<ORDER: "order">
|	<OUTER: "outer">
|	<OUTPUT: "output">
|	<OVERLAPS: "overlaps">
|	<PAD: "pad">
|	<PARTIAL: "partial">
|	<PREPARE: "prepare">
|	<PRESERVE: "preserve">
|	<PRIMARY: "primary">
|	<PRIOR: "prior">
|	<PRIVILEGES: "privileges">
|	<PROCEDURE: "procedure">
|	<PUBLIC: "public">
|	<READ: "read">
|	<REAL: "real">
|	<REFERENCES: "references">
|	<RELATIVE: "relative">
|	<RESTRICT: "restrict">
|	<REVOKE: "revoke">
|	<RIGHT: "right">
|	<ROLLBACK: "rollback">
|	<ROWS: "rows">
|	<SCHEMA: "schema">
|	<SCROLL: "scroll">
|	<SECOND: "second">
|	<SELECT: "select">
|	<SESSION_USER: "session_user">
|	<SET: "set">
|	<SMALLINT: "smallint">
|	<SOME: "some">
|	<SPACE: "space">
|	<SQL: "sql">
|	<SQLCODE: "sqlcode">
|	<SQLERROR: "sqlerror">
|	<SQLSTATE: "sqlstate">
|	<SUBSTRING: "substring">
|	<SUM: "sum">
|	<SYSTEM_USER: "system_user">
|	<T: "t">
|	<TABLE: "table">
|	<TEMPORARY: "temporary">
|	<TIMEZONE_HOUR: "timezone_hour">
|	<TIMEZONE_MINUTE: "timezone_minute">
|	<TO: "to">
|	<TRANSACTION: "transaction">
|	<TRANSLATE: "translate">
|	<TRANSLATION: "translation">
|	<TRUE: "true">
|	<TS: "ts">
|	<UNION: "union">
|	<UNIQUE: "unique">
|	<UNKNOWN: "unknown">
|	<UPDATE: "update">
|	<UPPER: "upper">
|	<USER: "user">
|	<USING: "using">
|	<VALUE: "value">
|	<VALUES: "values">
|	<VARBINARY: "varbinary">
|	<VARCHAR: "varchar">
|	<VARYING: "varying">
|	<VIEW: "view">
|	<WHENEVER: "whenever">
|	<WHERE: "where">
|	<WITH: "with">
|	<WORK: "work">
|	<WRITE: "write">
|	<YEAR: "year">
}

/*
	This list should contain only and all SQL92 keywords that are non-reserved.
	Non-reserved keywords can be used as identifiers in the language.
	To make that happen, the individual tokens have to be repeated in
	the nonReservedKeyword() rule -- unless there's some other JavaCC shorthand?

	NOTE: I've commented out most of these because we won't be using them
	right away and the grammar is taking forever to process.
 */
/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* SQL92 non-reserved Keywords */
    <ABS: "abs">
|    <ABSVAL: "absval">
|	<ACTION: "action">
|	<ALWAYS: "always">
|	<BLOB: "blob">
  |	<C: "c">
  | <CALLED: "called">
|	<CLOB: "clob">
  |	<COBOL: "cobol">
|	<COMMITTED: "committed">
|   <CONCAT: "concat">
|	<CONTAINS: "contains">
|	<DATA: "data">
|	<DATE: "date">
|	<DAY: "day">
|   <DYNAMIC: "dynamic">
|	<FORTRAN: "fortran">
|   <GENERATED: "generated">
|	<IDENTITY_VAL_LOCAL: "identity_val_local">
|	<INCREMENT: "increment">
|	<INITIAL: "initial">
|   <INOUT: "inout">
|	<INTERVAL: "interval">
|	<LANGUAGE: "language">
|	<LARGE: "large">
|	<LENGTH: "length">
|	<LEVEL: "level">
|	<LOCKS: "locks">
|	<LOCKSIZE: "locksize">
|	<LOGGED: "logged">
|       <MOD: "mod">
|	<MODIFIES: "modifies">
|	<MODIFY: "modify">
|	<MONTH: "month">
|	<_MORE: "more">
|	<MUMPS: "mumps">
|	<NAME: "name">
|	<NCLOB: "nclob">
|	<NULLABLE: "nullable">
|	<NUMBER: "number">
|	<OBJECT: "object">
|	<PASCAL: "pascal">
|	<PLI: "pli">
|	<PRECISION: "precision">
|	<RELEASE: "release">
|	<REPEATABLE: "repeatable">
|	<RETURNS: "returns">
|	<ROW: "row">
|	<SAVEPOINT: "savepoint">
|	<SCALE: "scale">
|	<SERIALIZABLE: "serializable">
|	<SQL_TSI_FRAC_SECOND: "sql_tsi_frac_second">
|	<SQL_TSI_SECOND: "sql_tsi_second">
|	<SQL_TSI_MINUTE: "sql_tsi_minute">
|	<SQL_TSI_HOUR: "sql_tsi_hour">
|	<SQL_TSI_DAY: "sql_tsi_day">
|	<SQL_TSI_WEEK: "sql_tsi_week">
|	<SQL_TSI_MONTH: "sql_tsi_month">
|	<SQL_TSI_QUARTER: "sql_tsi_quarter">
|	<SQL_TSI_YEAR: "sql_tsi_year">
|	<START: "start">
|	<STATEMENT: "statement">
|	<SYNONYM: "synonym">
|	<THEN: "then">
|	<TIME: "time">
|	<TIMESTAMP: "timestamp">
|	<TIMESTAMPADD: "timestampadd">
|	<TIMESTAMPDIFF: "timestampdiff">
|	<TRUNCATE: "truncate">
|	<TYPE: "type">
|	<UNCOMMITTED: "uncommitted">
|	<USAGE: "usage">
|	<WHEN: "when">
}

/*
	The next lists should contain non-SQL92 keywords, and should
	specify whether their keywords are reserved or non-reserved.
	If they are non-reserved, they need to be added to the identifier() rule.

	NOTE: XML, XMLPARSE, XMLSERIALIZE, and XMLEXISTS are considered reserved
	words to comply with the SQL/XML (2003) standard, section 5.1.
 */

/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* Additional JSQL reserved keywords -- non-SQL92 reserved Keywords */
	<BOOLEAN: "boolean">
|	<CALL: "call">
|	<CURDATE: "curdate">
|	<CURTIME: "curtime">
|   <DATABASE: "database">
|	<GET_CURRENT_CONNECTION: "getCurrentConnection">
|	<EXPLAIN: "explain">
|	<LONGINT: "bigint">
|	<LONG: "long">
|	<LTRIM: "ltrim">
|	<RTRIM: "rtrim">
|	<SUBSTR:	"substr">
|	<XML:	"xml">
|	<XMLPARSE:	"xmlparse">
|	<XMLSERIALIZE:	"xmlserialize">
|	<XMLEXISTS:	"xmlexists">
}

/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 *
 * NOTE: CONTENT, DOCUMENT, STRIP, WHITESPACE and PASSING are considered NON-
 * reserved words to comply with the SQL/XML (2003) standard, section 5.1.
 * PRESERVE is also listed as non-reserved in the SQL/XML spec, but
 * since that word is already reserved, we leave it alone.
 */
TOKEN [IGNORE_CASE] :
{	/* Additional JSQL keywords -- non-SQL92 non-reserved Keywords */
	<AFTER: "after">
|	<BEFORE: "before">
|	<CLASS: "class">
|	<COMPRESS: "compress">
|	<CONTENT: "content">
|   <CS: "cs">
|	<CURSORS: "cursors">
|	<DB2SQL: "db2sql">
|       <DIRTY: "dirty">
|	<DOCUMENT: "document">
|	<EACH: "each">
|	<EXCLUSIVE: "exclusive">
|	<FN: "fn">
|	<INDEX: "index">
|	<JAVA: "java">
|   <LCASE: "lcase">
|   <LOCATE: "locate">
|	<LOCK: "lock">
|	<MESSAGE_LOCALE: "message_locale">
|	<METHOD: "method">
|	<MODE: "mode">
|	<NEW: "new">
|   <NEW_TABLE: "new_table">
|	<NVARCHAR: "nvarchar"> 
|	<OJ: "oj">
|	<OFF: "off">
|	<OLD: "old">
|   <OLD_TABLE: "old_table">
|   <OUT: "out">
|	<PARAMETER: "parameter">
|	<PASSING: "passing">
|	<PROPERTIES: "properties">
|	<READS: "reads">
|	<REF: "ref">
|	<REFERENCING: "referencing">
|	<RENAME: "rename">
|       <RESET: "reset">
|	<RESULT: "result">
|	<RETAIN: "retain">
|   <RR: "rr">
|   <RS: "rs">
|	<SEQUENTIAL: "sequential">
|	<SETS: "sets">
|	<SHARE: "share">
|	<SQLID: "sqlid">
|	<SPECIFIC: "specific">
|   <SQRT: "sqrt">
|       <STABILITY: "stability">
|   <STRIP: "strip">
|   <STYLE: "style">
|	<TRIGGER: "trigger">
|   <UCASE: "ucase">
|   <UR: "ur">
|   <WHITESPACE: "whitespace">
}

TOKEN :
{	/* Operators and punctuation */
	<DOUBLE_QUOTE: "\"">
|	<PERCENT: "%">
|	<AMPERSAND: "&">
|	<QUOTE: "'">
|	<LEFT_BRACE: "{">
|	<RIGHT_BRACE: "}">
|	<LEFT_PAREN: "(">
|	<RIGHT_PAREN: ")">
|	<ASTERISK: "*">
|	<PLUS_SIGN: "+">
|	<COMMA: ",">
|	<MINUS_SIGN: "-">
|	<PERIOD: ".">
|	<SOLIDUS: "/">
|	<COLON: ":">
|	<DOUBLE_COLON: "::">
|	<SEMICOLON: ";">
|	<LESS_THAN_OPERATOR: "<">
|	<LESS_THAN_OR_EQUALS_OPERATOR: "<=">
|	<EQUALS_OPERATOR: "=">
|	<NOT_EQUALS_OPERATOR: "<>">
|	<NOT_EQUALS_OPERATOR2: "!=">
|	<GREATER_THAN_OPERATOR: ">">
|	<GREATER_THAN_OR_EQUALS_OPERATOR: ">=">
|	<QUESTION_MARK: "?">
|	<UNDERSCORE: "_">
|	<VERTICAL_BAR: "|">
|	<LEFT_BRACKET: "[">
|	<RIGHT_BRACKET: "]">
|	<CONCATENATION_OPERATOR: "||">
|	<FIELD_REFERENCE: "->">
}

TOKEN :
{	/* Identifiers */
	<IDENTIFIER: ( <LETTER> ) (<LETTER> | "_" | <DIGIT>)* >
}

TOKEN: {	<K: "K" >	 }
TOKEN: {	<M: "M" >	 }
TOKEN: {	<G: "G" >	 }

TOKEN:
{
	<#LETTER: [
				"a"-"z",
				"A"-"Z",
				"\u00aa",
				"\u00b5",
				"\u00ba",
				"\u00c0" - "\u00d6",
				"\u00d8" - "\u00f6",
				"\u00f8" - "\u01f5",
				"\u01fa" - "\u0217",
				"\u0250" - "\u02a8",
				"\u02b0" - "\u02b8",
				"\u02bb" - "\u02c1",
				"\u02d0" - "\u02d1",
				"\u02e0" - "\u02e4",
				"\u037a",
				"\u0386",
				"\u0388" - "\u038a",
				"\u038c",
				"\u038e" - "\u03a1",
				"\u03a3" - "\u03ce",
				"\u03d0" - "\u03d6",
				"\u03da",
				"\u03dc",
				"\u03de",
				"\u03e0",
				"\u03e2" - "\u03f3",
				"\u0401" - "\u040c",
				"\u040e" - "\u044f",
				"\u0451" - "\u045c",
				"\u045e" - "\u0481",
				"\u0490" - "\u04c4",
				"\u04c7" - "\u04c8",
				"\u04cb" - "\u04cc",
				"\u04d0" - "\u04eb",
				"\u04ee" - "\u04f5",
				"\u04f8" - "\u04f9",
				"\u0531" - "\u0556",
				"\u0559",
				"\u0561" - "\u0587",
				"\u05d0" - "\u05ea",
				"\u05f0" - "\u05f2",
				"\u0621" - "\u063a",
				"\u0640" - "\u064a",
				"\u0671" - "\u06b7",
				"\u06ba" - "\u06be",
				"\u06c0" - "\u06ce",
				"\u06d0" - "\u06d3",
				"\u06d5",
				"\u06e5" - "\u06e6",
				"\u0905" - "\u0939",
				"\u093d",
				"\u0958" - "\u0961",
				"\u0985" - "\u098c",
				"\u098f" - "\u0990",
				"\u0993" - "\u09a8",
				"\u09aa" - "\u09b0",
				"\u09b2",
				"\u09b6" - "\u09b9",
				"\u09dc" - "\u09dd",
				"\u09df" - "\u09e1",
				"\u09f0" - "\u09f1",
				"\u0a05" - "\u0a0a",
				"\u0a0f" - "\u0a10",
				"\u0a13" - "\u0a28",
				"\u0a2a" - "\u0a30",
				"\u0a32" - "\u0a33",
				"\u0a35" - "\u0a36",
				"\u0a38" - "\u0a39",
				"\u0a59" - "\u0a5c",
				"\u0a5e",
				"\u0a72" - "\u0a74",
				"\u0a85" - "\u0a8b",
				"\u0a8d",
				"\u0a8f" - "\u0a91",
				"\u0a93" - "\u0aa8",
				"\u0aaa" - "\u0ab0",
				"\u0ab2" - "\u0ab3",
				"\u0ab5" - "\u0ab9",
				"\u0abd",
				"\u0ae0",
				"\u0b05" - "\u0b0c",
				"\u0b0f" - "\u0b10",
				"\u0b13" - "\u0b28",
				"\u0b2a" - "\u0b30",
				"\u0b32" - "\u0b33",
				"\u0b36" - "\u0b39",
				"\u0b3d",
				"\u0b5c" - "\u0b5d",
				"\u0b5f" - "\u0b61",
				"\u0b85" - "\u0b8a",
				"\u0b8e" - "\u0b90",
				"\u0b92" - "\u0b95",
				"\u0b99" - "\u0b9a",
				"\u0b9c",
				"\u0b9e" - "\u0b9f",
				"\u0ba3" - "\u0ba4",
				"\u0ba8" - "\u0baa",
				"\u0bae" - "\u0bb5",
				"\u0bb7" - "\u0bb9",
				"\u0c05" - "\u0c0c",
				"\u0c0e" - "\u0c10",
				"\u0c12" - "\u0c28",
				"\u0c2a" - "\u0c33",
				"\u0c35" - "\u0c39",
				"\u0c60" - "\u0c61",
				"\u0c85" - "\u0c8c",
				"\u0c8e" - "\u0c90",
				"\u0c92" - "\u0ca8",
				"\u0caa" - "\u0cb3",
				"\u0cb5" - "\u0cb9",
				"\u0cde",
				"\u0ce0" - "\u0ce1",
				"\u0d05" - "\u0d0c",
				"\u0d0e" - "\u0d10",
				"\u0d12" - "\u0d28",
				"\u0d2a" - "\u0d39",
				"\u0d60" - "\u0d61",
				"\u0e01" - "\u0e2e",
				"\u0e30",
				"\u0e32" - "\u0e33",
				"\u0e40" - "\u0e46",
				"\u0e81" - "\u0e82",
				"\u0e84",
				"\u0e87" - "\u0e88",
				"\u0e8a",
				"\u0e8d",
				"\u0e94" - "\u0e97",
				"\u0e99" - "\u0e9f",
				"\u0ea1" - "\u0ea3",
				"\u0ea5",
				"\u0ea7",
				"\u0eaa" - "\u0eab",
				"\u0ead" - "\u0eae",
				"\u0eb0",
				"\u0eb2" - "\u0eb3",
				"\u0ebd",
				"\u0ec0" - "\u0ec4",
				"\u0ec6",
				"\u0edc" - "\u0edd",
				"\u0f40" - "\u0f47",
				"\u0f49" - "\u0f69",
				"\u10a0" - "\u10c5",
				"\u10d0" - "\u10f6",
				"\u1100" - "\u1159",
				"\u115f" - "\u11a2",
				"\u11a8" - "\u11f9",
				"\u1e00" - "\u1e9b",
				"\u1ea0" - "\u1ef9",
				"\u1f00" - "\u1f15",
				"\u1f18" - "\u1f1d",
				"\u1f20" - "\u1f45",
				"\u1f48" - "\u1f4d",
				"\u1f50" - "\u1f57",
				"\u1f59",
				"\u1f5b",
				"\u1f5d",
				"\u1f5f" - "\u1f7d",
				"\u1f80" - "\u1fb4",
				"\u1fb6" - "\u1fbc",
				"\u1fbe",
				"\u1fc2" - "\u1fc4",
				"\u1fc6" - "\u1fcc",
				"\u1fd0" - "\u1fd3",
				"\u1fd6" - "\u1fdb",
				"\u1fe0" - "\u1fec",
				"\u1ff2" - "\u1ff4",
				"\u1ff6" - "\u1ffc",
				"\u207f",
				"\u2102",
				"\u2107",
				"\u210a" - "\u2113",
				"\u2115",
				"\u2118" - "\u211d",
				"\u2124",
				"\u2126",
				"\u2128",
				"\u212a" - "\u2131",
				"\u2133" - "\u2138",
				"\u3005",
				"\u3031" - "\u3035",
				"\u3041" - "\u3094",
				"\u309b" - "\u309e",
				"\u30a1" - "\u30fa",
				"\u30fc" - "\u30fe",
				"\u3105" - "\u312c",
				"\u3131" - "\u318e",
				"\u4e00" - "\u9fa5",
				"\uac00" - "\ud7a3",
				"\uf900" - "\ufa2d",
				"\ufb00" - "\ufb06",
				"\ufb13" - "\ufb17",
				"\ufb1f" - "\ufb28",
				"\ufb2a" - "\ufb36",
				"\ufb38" - "\ufb3c",
				"\ufb3e",
				"\ufb40" - "\ufb41",
				"\ufb43" - "\ufb44",
				"\ufb46" - "\ufbb1",
				"\ufbd3" - "\ufd3d",
				"\ufd50" - "\ufd8f",
				"\ufd92" - "\ufdc7",
				"\ufdf0" - "\ufdfb",
				"\ufe70" - "\ufe72",
				"\ufe74",
				"\ufe76" - "\ufefc",
				"\uff21" - "\uff3a",
				"\uff41" - "\uff5a",
				"\uff66" - "\uffbe",
				"\uffc2" - "\uffc7",
				"\uffca" - "\uffcf",
				"\uffd2" - "\uffd7",
				"\uffda" - "\uffdc"
			]>
}

TOKEN :
{
	<#DIGIT: [
				"0" - "9",
				"\u0660" - "\u0669",
				"\u06f0" - "\u06f9",
				"\u0966" - "\u096f",
				"\u09e6" - "\u09ef",
				"\u0a66" - "\u0a6f",
				"\u0ae6" - "\u0aef",
				"\u0b66" - "\u0b6f",
				"\u0be7" - "\u0bef",
				"\u0c66" - "\u0c6f",
				"\u0ce6" - "\u0cef",
				"\u0d66" - "\u0d6f",
				"\u0e50" - "\u0e59",
				"\u0ed0" - "\u0ed9",
				"\u0f20" - "\u0f29",
				"\uff10" - "\uff19"
			]>
}

TOKEN :
{	/* Delimited Identifiers - NOTE: this does not allow zero-length identifiers */
	<DELIMITED_IDENTIFIER: "\""
		(
			("\"\"") |
			(~["\""])
		) +
		"\"">
}

TOKEN :
{	/* Literals */
	<EXACT_NUMERIC: ( <UINT> ( "." ( <UINT> )? )? | "." <UINT> )>
|	<UINT: (["0" - "9"])+ >/* This is for an unsigned exact numeric */
|	<LENGTH_MODIFIER: ( <UINT> ["K","M","G","k","m","g"] )>
|	<STRING: "'"
		(
			"''" |
			~["'"]
		) *
		"'">
|	<HEX_STRING: ["X","x"] "'" (["0"-"9","a"-"f","A"-"F"])*"'"> /* RESOLVE: does not allow separators */
|	<APPROXIMATE_NUMERIC: <EXACT_NUMERIC> ["e","E"] ( ("+" | "-") )? ( ["0" - "9"] )+ >
/*****
	The tokenizer can't handle the date/time literals because
	they are constructed of two tokens with arbitrary whitespace between them.
	INTERVAL_LITERAL will also have to be upgraded at some point.
|	<DATE_LITERAL: "DATE" "'" <DATE_VALUE> "'" >
|	<#DATE_VALUE: <UINT> "-" <UINT> "-" <UINT> >
|	<TIME_LITERAL: "TIME" "'" <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
|	<#TIME_VALUE: <UINT> ":" <UINT> ":" <SECONDS_VALUE> >
|	<#TIMEZONE_INTERVAL: ("+" | "-") <UINT> ":" <UINT> >
|	<TIMESTAMP_LITERAL: "TIMESTAMP" "'" <DATE_VALUE> " " <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
*****/
|	<INTERVAL_LITERAL: "INTERVAL" "'" (["+","-"])? <INTERVAL_STRING> <INTERVAL_QUALIFIER> >
|	<#INTERVAL_STRING: "'" ( <YEAR_MONTH_LITERAL> | <DAY_TIME_LITERAL> ) "'" >
|	<#INTERVAL_QUALIFIER: <SINGLE_DATETIME_FIELD> | ( <START_FIELD> <TO> <END_FIELD> ) >
|	<#SINGLE_DATETIME_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#START_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#END_FIELD: <NON_SECOND_DATETIME_FIELD> >
|	<#NON_SECOND_DATETIME_FIELD: <YEAR> | <MONTH> | <DAY> | <HOUR> | <MINUTE> >
|	<#YEAR_MONTH_LITERAL: (<UINT> | ( <UINT> "-" ) )? <UINT> >
|	<#DAY_TIME_LITERAL:  ( <DAY_TIME_INTERVAL> | <TIME_INTERVAL> ) >
|	<#DAY_TIME_INTERVAL: <UINT> ( " " <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ? ) ? >
|	<#SECONDS_VALUE: <UINT> ( "." ( <UINT> ) ? ) ? >
|	<#TIME_INTERVAL: <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ?
		|	 <UINT> ( ":" <SECONDS_VALUE> ) ?
		|	<SECONDS_VALUE> >
}



/*
 * <A NAME="Statement">Statement</A>
 */
QueryTreeNode
Statement( String statementSQLText, Object[] paramDefaults) throws StandardException :
{
	QueryTreeNode	statementNode;

        initStatement(statementSQLText, paramDefaults);
}
{
	statementNode = StatementPart(null) <EOF>
	{
		return statementNode;
	}
}

QueryTreeNode 
proceduralStatement(Token[] tokenHolder) throws StandardException : 
{
	QueryTreeNode statementNode;
	tokenHolder[0] = getToken(1);
}   
{ 	
(
	statementNode = insertStatement()
|	
	statementNode = preparableUpdateStatement()
|
	statementNode = preparableDeleteStatement()
|
	statementNode =  preparableSelectStatement(true)	
)
	{
		return statementNode;
	}		
}

/*
 * <A NAME="StatementPart">StatementPart</A>
 * 
 * @param tokenHolder returns the token that starts
 * the statement.  If null, ignored.
 */
QueryTreeNode
StatementPart(Token[] tokenHolder) throws StandardException :
{
	QueryTreeNode	statementNode;
	//before starting new statements, initialize this variables. Otherwise, the left
	//over values from previously failed sql will affect the next sql. 
        explicitNotNull = false;
        explicitNull = false;
	explicitlyNullableColumnsList = new Vector();

	/*
	** Grab the token preceding this production
	*/
	if (tokenHolder != null) 
	{
		tokenHolder[0] = getToken(1);
	}
}
{
	/*
	 * The present method of invoking the parser is
	 * via JDBC, which uses preparable SQL statements only.
	 * the only place this makes a difference from other
	 * flavors of SQL (direct SQL, embedded SQL, dynamic SQL)
	 * is in the select and positioned update/delete statements,
	 * and in whether transaction and connection statements are
	 * allowed.
	 *
	 * When it becomes necessary to differentiate, we should
	 * define a way to put the parser into different modes
	 * (preparable SQL, dynamic SQL, direct SQL, embedded SQL, etc.)
	 * and have it accept/reject statements based on the mode
	 * it is in.
	 */
    (
        statementNode = spsRenameStatement() |
        // statementNode = SQLTransactionStatement() |
        statementNode = lockStatement()
    )
    {
        return statementNode;
    }
|   (
        statementNode = createStatements() |
        statementNode = dropStatements() |
        statementNode = spsAlterStatement() |
        statementNode = globalTemporaryTableDeclaration() |
        statementNode = preparableSQLDataStatement() |
        statementNode = spsSetStatement() |
	statementNode = truncateTableStatement() |
	statementNode = execStatement()
        // statementNode = SQLTransactionStatement()
    )
    {
        return statementNode;
    }
}

/*
 * <A NAME="createStatements">spsCreateStatement</A>
 */
QueryTreeNode
createStatements() throws StandardException :
{
	QueryTreeNode statementNode;
	Token beginToken;
	int tokKind;
}
{
	beginToken = <CREATE> (
		(
            statementNode = schemaDefinition() |
            statementNode = viewDefinition(beginToken) |
            statementNode = triggerDefinition() |
            statementNode = synonymDefinition()
        )
        {
        }
|       statementNode = tableDefinition()
        {
        }
|		statementNode = procedureDefinition()
|		statementNode = functionDefinition()
|
		statementNode = indexDefinition()
        {
        }
		)
	{
		return statementNode;
	}

}

/*
 * <A NAME="dropStatements">spsDropStatement</A>
 */
QueryTreeNode
dropStatements() throws StandardException :
{
	QueryTreeNode statementNode;
}
{
	<DROP>
        (
            statementNode = dropSchemaStatement() |
            statementNode = dropTableStatement() |
            statementNode = dropIndexStatement() |
            statementNode = dropAliasStatement() |
            statementNode = dropViewStatement() |
            statementNode = dropTriggerStatement() 
        )
	{
		return statementNode;
	}
}

/*
 * <A NAME="spsAlterStatement">spsAlterStatement</A>
 */
QueryTreeNode
spsAlterStatement() throws StandardException :
{
	QueryTreeNode statementNode;
}
{
	<ALTER>
        (
		    statementNode = alterTableStatement()
        )
	{
		return statementNode;
	}
}

/*
 * <A NAME="spsSetStatement">spsSetStatement</A>
 */
QueryTreeNode
spsSetStatement() throws StandardException :
{
	QueryTreeNode statementNode;
}
{
        LOOKAHEAD ( { getToken(1).kind == SET && getToken(2).kind != CURRENT } )
	<SET>
        (
                statementNode = setIsolationStatement() |
	        statementNode = setSchemaStatement() |
		statementNode = setMessageLocaleStatement()
        )
	{
		return statementNode;
	}
|
        LOOKAHEAD ( { getToken(1).kind == SET && getToken(2).kind == CURRENT } )
	<SET>
        (
	        statementNode = setSchemaStatement() |
                statementNode = setIsolationStatement()

        )
	{
		return statementNode;
	}
}
		
/*
 * <A NAME="preparableSQLDataStatement">preparableSQLDataStatement</A>
 *
 * preparableSQLDataStatement differs from
 * directSQLDataStatement in that it
 * supports positioned update and delete
 * and a preparable select (with FOR UPDATE)
 * instead of a direct select (without FOR UPDATE)
 */
QueryTreeNode
preparableSQLDataStatement() throws StandardException :
{
	QueryTreeNode	dmlStatement;
}
{
	/*
	** RESOLVE: Ignoring temporary table declarations for now.
	*/
	dmlStatement = preparableDeleteStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = preparableSelectStatement(true)
	{
		return dmlStatement;
	}
|
	dmlStatement = insertStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = preparableUpdateStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = callStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = savepointStatement()
	{
		return dmlStatement;
	}
}

/*
 * <A NAME="preparableDeleteStatement">preparableDeleteStatement</A>
 *
 *	This may be a search or positioned delete statement.
 */
QueryTreeNode
preparableDeleteStatement() throws StandardException :
{
	QueryTreeNode qtn;
}
{
	<DELETE> qtn = deleteBody()
	{
		return qtn;
	}
}

QueryTreeNode
deleteBody() throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	TableName  tableName = null;
	ValueNode  whereClause = null;
	FromTable  fromTable = null;
	QueryTreeNode retval;
	Properties targetProperties = null;
	Token	   whereToken = null;
}
{
	LOOKAHEAD( { fromNewInvocationFollows() } ) 
	<FROM> javaToSQLNode = newInvocation()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	{
		fromTable =  (FromTable) nodeFactory.getNode(
									C_NodeTypes.FROM_VTI,
									javaToSQLNode.getJavaValueNode(), 
									(String) null,
									null, 
									(Properties) null,
									getContextManager()); 

		return getDeleteNode(fromTable, tableName, whereClause);
	}
|
	<FROM> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	    [targetProperties = propertyList() ] 
		[ 
			whereToken = <WHERE>
		    (
				//need LOOKAHEAD here to decide between CURRENT in class name
				//and CURRENT in CURRENT OF
				LOOKAHEAD ( 
	             	{
		         	 (getToken(1).kind == CURRENT) &&
					 (getToken(2).kind == OF) 
				  	}
				)	
				fromTable = currentOfClause() |
				whereClause = whereClause(whereToken)
			)
		]
	{
		/* Fabricate a ResultSetNode (SelectNode) under the DeleteNode.
		 * For a searched delete,
		 * The FromList is simply the table that we are deleting from.
		 * (NOTE - we mark the table as the one that we are deleting from.)
		 * For a positioned delete,
		 * the FromList is a CurrentOfNode holding the cursor name.
		 * The select list will be null for now.  We will generate it at
	 	 * bind time, in keeping with the design decision that the parser's
	  	 * output should look like the language.
		 */
		if (fromTable == null)
			fromTable = (FromTable) nodeFactory.getNode(
										C_NodeTypes.FROM_BASE_TABLE,
										tableName,
										null,
										ReuseFactory.getInteger(
												FromBaseTable.DELETE),
										null,
										getContextManager());

		/* Update the FromTable with any properties, if non-null */
		if (targetProperties != null)
		{
			if (SanityManager.DEBUG)
			{
				if (((FromBaseTable) fromTable).getProperties() != null)
				{
					SanityManager.THROWASSERT(
						"Overwriting existing properties");
				}
			}
			((FromBaseTable) fromTable).setTableProperties(targetProperties);
		}

		return getDeleteNode(fromTable, tableName, whereClause);
	}
}

/*
 * <A NAME="currentOfClause">currentOfClause</A>
 */
FromTable
currentOfClause() throws StandardException :
{
	String cursorName = null;
}
{
	<CURRENT> <OF> cursorName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{ 
		return (FromTable) nodeFactory.getNode(
								C_NodeTypes.CURRENT_OF_NODE,
								cursorName,
								null,
								getContextManager());
	}
}


/*
 * <A NAME="preparableSelectStatement">preparableSelectStatement</A>
 *
 *
 *	The preparable select statement is a superset of
 *	the directSelectStatementMultipleRows in that it
 *	allows both the preparable single row select statement
 *	(a query expression that returns one row, although it
 *	is also handled like a cursor) and the preparable
 *	multiple row select statement, which allows not only
 *	an order by clause but also a for update clause.
 */
CursorNode
preparableSelectStatement(boolean checkParams) throws StandardException :
{
	ResultSetNode	  queryExpression;
	Vector  updateColumns = new Vector();
	int               forUpdateState = CursorNode.UNSPECIFIED;
	int				  isolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
	CursorNode		  retval;
	OrderByList orderCols = null;
}
{
	queryExpression = queryExpression(null, NO_SET_OP) 
		[ orderCols = orderByClause() ]
		[ <FOR> forUpdateState = forUpdateClause(updateColumns) ]
		[ isolationLevel = atIsolationLevel() ]
	{
		// Note: if order by is specified, the for update clause
		// must be READ ONLY or empty, and the cursor
		// is implicitly READ_ONLY.

		retval = (CursorNode) nodeFactory.getNode(
				C_NodeTypes.CURSOR_NODE,
				"SELECT",
				queryExpression,
				null,
				orderCols,
				ReuseFactory.getInteger(forUpdateState),
				(forUpdateState == CursorNode.READ_ONLY ? null : updateColumns ),
				getContextManager());

		if (checkParams)
		{
			setUpAndLinkParameters();
		}

		/* Set the isolation levels for the scans if specified */
		if (isolationLevel != ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
		{
			getCompilerContext().setScanIsolationLevel(isolationLevel);
		}

		return retval;
	}
}

/*
 * <A NAME="insertStatement">insertStatement</A>
 */
QueryTreeNode
insertStatement() throws StandardException :
{
	QueryTreeNode	insertNode;
	QueryTreeNode	targetTable;
}
{
	<INSERT> <INTO> targetTable = targetTable()
			insertNode = insertColumnsAndSource(targetTable)
	{
		setUpAndLinkParameters();

		return insertNode;
	}
}

QueryTreeNode
targetTable() throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	String				correlationName = null;
	TableName			tableName;
}
{
	/* NOTE: this rule has to come first in order to avoid making NEW
	 * a reserved word.
	 */
	/* identifier() used to be correlationName() */
	LOOKAHEAD( { newInvocationFollows(1) } )
	javaToSQLNode = newInvocation()
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.FROM_VTI,
								javaToSQLNode.getJavaValueNode(), 
								correlationName,
								null, 
								(Properties) null,
								getContextManager()); 
	}
|
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return (QueryTreeNode) tableName;
	}
}

/*
 * <A NAME="preparableUpdateStatement">preparableUpdateStatement</A>
 */
QueryTreeNode
preparableUpdateStatement() throws StandardException :
{
	QueryTreeNode qtn;
}
{
	// NOTE: It only makes sense to have a property list if there is a
	// table name, so I moved it into the [] for qualifiedName(). This removes
	// a grammar ambiguity, because PROPERTIES is a non-reserved keyword,
	// so there can be a table named PROPERTIES

	<UPDATE> qtn = updateBody()
	{
		return qtn;
	}

}

boolean
tableOrIndex() :
{
}
{
	<TABLE>
	{
		return true;
	}
|
	<INDEX>
	{
		return false;
	}
}

QueryTreeNode
updateBody() throws StandardException :
{
	ResultColumnList	columnList;
	JavaToSQLValueNode	javaToSQLNode = null;
	TableName  tableName = null;
	ValueNode  whereClause = null;
	FromTable  fromTable = null;
	Properties targetProperties = null;
	Token	   whereToken = null;
}
{
	LOOKAHEAD( { newInvocationFollows(1) } ) 
	javaToSQLNode = newInvocation()
		<SET> columnList = setClauseList()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	{
		fromTable =  (FromTable) nodeFactory.getNode(
									C_NodeTypes.FROM_VTI,
									javaToSQLNode.getJavaValueNode(), 
									(String) null,
									null, 
									(Properties) null,
									getContextManager()); 

		return getUpdateNode(fromTable, tableName, columnList, whereClause);
	}
|
		tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[targetProperties = propertyList() ] 
		<SET> columnList = setClauseList()
		[ 
			whereToken = <WHERE>
		    (
				whereClause = whereClause(whereToken) |
				fromTable = currentOfClause()
			)
		]
	{
		/* Fabricate a ResultSetNode (SelectNode) under the UpdateNode.
		 * For a searched update,
		 * The FromList is simply the table that we are updating.
		 * For a positioned update,
		 * the FromList is a CurrentOfNode holding the cursor name.
		 * (NOTE - we mark the table as the one that we are updating.)
		 * The select list is the columns in the SET clause.  At bind time,
	 	 * we will prepend the CurrentRowLocation() in keeping with the design 
		 * decision that the parser's output should look like the language.
		 */
		if (fromTable == null)
			fromTable = (FromTable) nodeFactory.getNode(
										C_NodeTypes.FROM_BASE_TABLE,
										tableName,
										null,
										ReuseFactory.getInteger(
														FromBaseTable.UPDATE),
										null,
										getContextManager());

		/* Update the FromTable with any properties, if non-null */
		if (targetProperties != null)
		{
			if (SanityManager.DEBUG)
			{
				if (((FromBaseTable) fromTable).getProperties() != null)
				{
					SanityManager.THROWASSERT(
						"Overwriting existing properties");
				}
			}
			((FromBaseTable) fromTable).setTableProperties(targetProperties);
		}
		return getUpdateNode(fromTable, tableName, columnList, whereClause);
	}
}

/*
 * <A NAME="callStatement">callStatement</A>
 */
QueryTreeNode
callStatement() throws StandardException :
{
	QueryTreeNode retval;
}
{
	(
		retval = bareCallStatement() |
		<LEFT_BRACE> retval = bareCallStatement() <RIGHT_BRACE>
	)
	{
		return retval;
	}
}

/*
 * <A NAME="bareCallStatement">baseCallStatement</A>
 */
QueryTreeNode
bareCallStatement() throws StandardException :
{
	ParameterNode		returnParam = null;
	String				methodName = null;
	ValueNode			value = null;
	ResultSetNode		resultSetNode = null;
}
{
	<CALL> value = primaryExpression(true)
	{
		if (! (value instanceof JavaToSQLValueNode) ||
			! (((JavaToSQLValueNode) value).getJavaValueNode() instanceof MethodCallNode))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		QueryTreeNode callStatement =
									(QueryTreeNode) nodeFactory.getNode(
												C_NodeTypes.CALL_STATEMENT_NODE,
												methodName,
												value,
												getContextManager());

		setUpAndLinkParameters();

		return callStatement;
	}

	// ? = CALL method()
|	returnParam = dynamicParameterSpecification()
	{
		getCompilerContext().setReturnParameterFlag(); //bug4450
	}
	<EQUALS_OPERATOR> <CALL> resultSetNode = rowValueConstructor(null)
	{
		// validate that we have something that is an appropriate call statement
		ResultColumnList rcl = resultSetNode.getResultColumns();

		// we can have only 1 return value/column
		if (rcl == null || rcl.size() > 1)
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		// we must have a method call node
		value = ((ResultColumn) rcl.elementAt(0)).getExpression();
		if (! (value instanceof JavaToSQLValueNode) ||
			! (((JavaToSQLValueNode) value).getJavaValueNode() instanceof MethodCallNode))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		// wrap the row result set in a cursor node
		QueryTreeNode cursorNode =
					(QueryTreeNode) nodeFactory.getNode(
						C_NodeTypes.CURSOR_NODE,
						"SELECT",
						resultSetNode,
						null,
						null,
						ReuseFactory.getInteger(CursorNode.READ_ONLY),
						null,
						getContextManager());

		// set the 0th param to be a RETURN param
		returnParam.setReturnOutputParam(value);

		setUpAndLinkParameters();

		return cursorNode;
	}
}

/*
 * <A NAME="primaryExpression">primaryExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode primaryExpression(boolean inSelectClause) throws StandardException :
{
	ValueNode			value = null;
}
{
	LOOKAHEAD
	( {
		getToken(2).kind == PERIOD &&
		getToken(4).kind == LEFT_PAREN
	  }
	)
	value = routineInvocation()
	{
		return value;
	}
|
	value = primaryExpressionXX(inSelectClause)
	{
		return value;
	}
}

/* 
 * <A NAME="savepointStatement">savepointStatement</A>

	savepointStatementClauses contains the UNIQUE, ON ROLLBACK RETAIN LOCKS, ON ROLLBACK RETAIN CURSORS clauses.

	0 - Boolean - UNIQUE clause
	1 - Boolean - ON ROLLBACK RETAIN LOCKS clause
	2 - Boolean - ON ROLLBACK RETAIN CURSORS clause
 */
QueryTreeNode
savepointStatement() throws StandardException :
{
	String			savepointName = null;
	int			savepointStatementType;
	Object[] savepointStatementClauses = new Object[3];
}
{
	(
	<SAVEPOINT> savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) (savepointStatementClause(savepointStatementClauses))+
	{
		//ON ROLLBACK RETAIN CURSORS is mandatory
		if (savepointStatementClauses[2] == null)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MISSING ON ROLLBACK RETAIN CURSORS");
		savepointStatementType = 1;
	}
|	<ROLLBACK> [ <WORK> ] <TO> <SAVEPOINT> [ savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) ]
	{
		savepointStatementType = 2;
	}
|	<RELEASE> [ <TO> ] <SAVEPOINT> savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		savepointStatementType = 3;
	}
	)
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.SAVEPOINT_NODE,
								savepointName,
								ReuseFactory.getInteger(savepointStatementType),
								getContextManager());
	}
}

void savepointStatementClause(Object[] savepointStatementClauses) throws StandardException :
{
	int clausePosition = -1;
}
{
	(
		<UNIQUE> {clausePosition = 0;}
	|
		<ON> <ROLLBACK> <RETAIN> (clausePosition = LocksOrCursors())
	)
	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (savepointStatementClauses[clausePosition] != null) {

				String which = SAVEPOINT_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}
				
			savepointStatementClauses[clausePosition] = Boolean.TRUE;
		}
	}
}

/*
 * <A NAME="LocksOrCursors">LocksOrCursors</A>
 */
int
LocksOrCursors() :
{
}
{
	<LOCKS>
	{
		return (1);
	}
|
	<CURSORS>
	{
		return (2);
	}
}

/* 
 * <A NAME="globalTemporaryTableDeclaration">globalTemporaryTableDeclaration</A>

	declareTableClauses contains the NOT LOGGED, on commit and on rollback clauses.

	0 - Boolean - NOT LOGGED clause
	1 - Boolean - on commit behavior
	2 - Boolean - on rollback behavior
 */
QueryTreeNode
globalTemporaryTableDeclaration() throws StandardException :
{
	TableName			tableName;
	TableElementList tableElementList;
	Object[] declareTableClauses = new Object[3];
}
{ 
	<DECLARE> <GLOBAL> <TEMPORARY> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		tableElementList = tableElementList()
		( declareTableClause(declareTableClauses) ) +
	{
		// NOT LOGGED is mandatory
		if (declareTableClauses[0] == null)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MISSING NOT LOGGED");
		// if ON COMMIT behavior not explicitly specified in DECLARE command, resort to default ON COMMIT DELETE ROWS
		if (declareTableClauses[1] == null)
				declareTableClauses[1] = Boolean.TRUE;
		// if ON ROLLBACK behavior not explicitly specified in DECLARE command, resort to default ON ROLLBACK DELETE ROWS
		if (declareTableClauses[2] == null)
				declareTableClauses[2] = Boolean.TRUE;
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_TABLE_NODE,
								tableName,
								tableElementList,
								(Properties)null,
								(Boolean) declareTableClauses[1],
								(Boolean) declareTableClauses[2],
								getContextManager());
	}
}

void declareTableClause(Object[] declareTableClauses) throws StandardException :
{
	int clausePosition = -1;
	Object clauseValue = null;
}
{
	(
		<NOT> <LOGGED> {clauseValue = Boolean.TRUE; clausePosition = 0;}
	|
		LOOKAHEAD( {getToken(1).kind == ON && getToken(2).kind == COMMIT} )
		<ON> <COMMIT> ( clauseValue = onCommit() ) <ROWS> { clausePosition = 1;} 
	|
		LOOKAHEAD( {getToken(1).kind == ON && getToken(2).kind == ROLLBACK} )
		<ON> <ROLLBACK> <DELETE> <ROWS> { clauseValue = Boolean.TRUE; clausePosition = 2;} 
	)


	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (declareTableClauses[clausePosition] != null) {

				String which = TEMPORARY_TABLE_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}
				
			declareTableClauses[clausePosition] = clauseValue;
		}
	}
}

/*
 * <A NAME="onCommit">onCommit</A>
 */
Boolean
onCommit() :
{
}
{
	<PRESERVE>
	{
		return (Boolean.FALSE);
	}
|
	<DELETE>
	{
		return (Boolean.TRUE);
	}
}

/*
 * <A NAME="tableElementList">tableElementList</A>
 */
TableElementList
tableElementList() throws StandardException :
{
	TableElementList	tableElementList =
					(TableElementList) nodeFactory.getNode(
									C_NodeTypes.TABLE_ELEMENT_LIST,
									getContextManager());
}
{
	<LEFT_PAREN> tableElement(tableElementList)
		( <COMMA> tableElement(tableElementList) ) * <RIGHT_PAREN>
	{
		return tableElementList;
	}
}

/*
 * <A NAME="tableElement">tableElement</A>
 */
void
tableElement(TableElementList tableElementList) throws StandardException :
{
	TableElementNode	tableElement;
	//initialize following two booleans for every new table element so that the
	//values from previous tableElement doesn't impact the next tableElement
	explicitNotNull = false;
	explicitNull = false;

}
{
	tableElement = columnDefinition(tableElementList)
	{
		tableElementList.addTableElement(tableElement);
	}
|
	tableElement = tableConstraintDefinition()
	{
		tableElementList.addTableElement(tableElement);
	}
}

/*
 * <A NAME="columnDefinition">columnDefinition</A>
 */
TableElementNode
columnDefinition(TableElementList tableElementList) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor = null;
	ValueNode			defaultNode = null;
	String				columnName;
	long[]				autoIncrementInfo = new long[3];
}
{
	/*
	** RESOLVE: We are ignoring domains and collation.
	*/

	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) 
		( typeDescriptor = dataTypeDDL() 
		)
	[ defaultNode = defaultAndConstraints(typeDescriptor, tableElementList, columnName, autoIncrementInfo) ]
	{
		// Only pass autoincrement info for autoincrement columns
		if (autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX] == 0)
		{
			autoIncrementInfo = null;
		}

		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.COLUMN_DEFINITION_NODE,
								columnName,
								defaultNode,
								typeDescriptor,
								autoIncrementInfo,
								getContextManager());
	}
}


/*
 * <A NAME="defaultAndConstraints">defaultAndConstraints</A>
 */
ValueNode
defaultAndConstraints(DataTypeDescriptor typeDescriptor,
					  TableElementList tableElementList,
					  String columnName,
					  long[] autoIncrementInfo) throws StandardException :
{
	ValueNode		defaultNode = null;
}
{	// compatible with db2 syntax
	columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName)) *
	[ defaultNode = defaultClause(autoIncrementInfo, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) )* ]
	{
		return defaultNode;
	}
|
	defaultNode = defaultClause(autoIncrementInfo, columnName)
	( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ) *
	{
		return defaultNode;
	}
}

/*
 * <A NAME="dataTypeDDL">dataTypeDDL</A>
 */
DataTypeDescriptor
dataTypeDDL() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	LOOKAHEAD( { commonDatatypeName(false) } )
	typeDescriptor = dataTypeCommon()
	{
		return typeDescriptor;
	}
}


/*
 * <A NAME="dataTypeCast">dataTypeCast</A>
 */
DataTypeDescriptor
dataTypeCast() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	// This lookahead is required because the names of the built-in
	// datatypes are not reserved words
	LOOKAHEAD( { commonDatatypeName(true) } )
	typeDescriptor = dataTypeCommon()
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="dataTypeCommon">dataTypeCommon</A>
 */
DataTypeDescriptor
dataTypeCommon() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	boolean checkCS = false;
}
{
(
	/* RESOLVE: Ignoring decimal, numeric, long */

	/*
	** We are not planning to support character sets, so I commented
	** out characterSetSpecification().
	*/
	( LOOKAHEAD({getToken(2).kind != LARGE})
		typeDescriptor = characterStringType()
	)
		/* [ <CHARACTER> <SET> characterSetSpecification() ] */
|
	( LOOKAHEAD({getToken(3).kind != LARGE})
		typeDescriptor = nationalCharacterStringType()
	)
|
	typeDescriptor = numericType()
|
	typeDescriptor = datetimeType()
| <BOOLEAN>
{
	checkInternalFeature(TypeId.BOOLEAN_NAME);
	typeDescriptor = new DataTypeDescriptor(TypeId.BOOLEAN_ID, true);
}
|
	typeDescriptor = longType()
|
	typeDescriptor = LOBType()
|
	typeDescriptor = XMLType()
	)
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="characterStringType">characterStringType</A>
 */
DataTypeDescriptor
characterStringType() throws StandardException :
{
	int					length = DEFAULT_STRING_COLUMN_LENGTH;
	Token				varyingToken = null;
	int type;
}
{
  (
	(
		<VARCHAR> length = charLength()
	)
	{
		type = Types.VARCHAR;
	}
|
	charOrCharacter()
	(
		// Length is optional for CHARACTER, not for plain CHARACTER VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{
		// If the user says CHARACTER VARYING, it's really VARCHAR
		type = (varyingToken == null ? Types.CHAR : Types.VARCHAR);
	}
  ) [ type = forBitData(type) ]

	{
		checkTypeLimits(type,length);
		DataTypeDescriptor charDTD = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
		return charDTD;
	}
}


/*
 * <A NAME="charOrCharacter">charOrCharacter</A>
 */
void
charOrCharacter() :
{
}
{
	<CHAR> | <CHARACTER>
}

/*
 * <A NAME="charType">charType</A>
 */
int
charLength() throws StandardException :
{
	int length;
}
{
	<LEFT_PAREN> length = length() <RIGHT_PAREN>
	{
		return length;
	}
}

/*
** <A NAME="forBitData">forBitData</A>
*/

int
forBitData(int charType) :
{
}
{
	<FOR> <BIT> <DATA>
	{
		if (charType == Types.CHAR)
			charType = Types.BINARY;
		else if (charType == Types.VARCHAR)
			charType = Types.VARBINARY;
		else if (charType == Types.LONGVARCHAR)
			charType = Types.LONGVARBINARY;

		return charType;
	}
}

/*
 * <A NAME="nationalCharacterStringType">nationalCharacterStringType</A>
 */
DataTypeDescriptor
nationalCharacterStringType() throws StandardException :
{
	DataTypeDescriptor	dataTypeDescriptor;
	int					length = DEFAULT_STRING_COLUMN_LENGTH;
	String				type = null;
	Token				varyingToken = null;
}
{
(
	<NATIONAL> charOrCharacter() 
	(
		// Length is optional for NATIONAL CHARACTER , not for NATIONAL CHARACTER VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{

		// If the user says NATIONAL CHARACTER VARYING, it's really NATIONALVARCHAR
		type = (varyingToken == null ? TypeId.NATIONAL_CHAR_NAME : 
				TypeId.NATIONAL_VARCHAR_NAME);
	}
|
	<NCHAR> 
	(
		// Length is optional for NCHAR, not for NCHAR VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{
		// If the user says NCHAR VARYING, it's really NATIONALVARCHAR
		type = (varyingToken == null ? TypeId.NATIONAL_CHAR_NAME : 
				TypeId.NATIONAL_VARCHAR_NAME);

	}
|
	<NVARCHAR> 
	(
		length = charLength()
	)
	{
		type = TypeId.NATIONAL_VARCHAR_NAME;
	}
)

	{
		// need to re-enable according to SQL standard
		throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		// return DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
	} 
}

/*
 * <A NAME="LOBType">lobType</A>
 */
DataTypeDescriptor
LOBType() throws StandardException :
{
	int	length = 1048576; // default to 1Mb if no length specified
	String	type;
}
{
	(
		<BLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.BLOB_NAME;
		}
	|
		<CLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	|
		<NCLOB> length = lengthAndModifier()
		{
			type = TypeId.NCLOB_NAME;
			// need to re-enable according to SQL standard
			throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		}
	|
		<BINARY> <LARGE> <OBJECT> [ length = lengthAndModifier() ]
		{
			type = TypeId.BLOB_NAME;
		}
	|
		charOrCharacter() <LARGE> <OBJECT> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	|
		<NATIONAL> <CHARACTER> <LARGE> <OBJECT> length = lengthAndModifier()
		{
			type = TypeId.NCLOB_NAME;
			// need to re-enable according to SQL standard
			throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		}
	)
	{
		DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);

		return dtd;
	}
}

/*
 * <A NAME="numericType">numericType</A>
 */
DataTypeDescriptor
numericType() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	typeDescriptor = exactNumericType()
	{
		return typeDescriptor;
	}
|
	typeDescriptor = approximateNumericType()
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="exactNumericType">exactNumericType</A>
 */
DataTypeDescriptor
exactNumericType() throws StandardException :
{
	int precision = TypeCompiler.DEFAULT_DECIMAL_PRECISION;
	int scale = TypeCompiler.DEFAULT_DECIMAL_SCALE;
	int type = Types.DECIMAL;
	String typeStr = "DECIMAL";
	int maxWidth;
	DataTypeDescriptor dtd =  null;
}
{
	( <NUMERIC> 
	{
		type = Types.NUMERIC;
		typeStr = "NUMERIC";
	}
	| <DECIMAL> | <DEC> )
	[ <LEFT_PAREN> precision = precision() [ <COMMA> scale = scale() ] <RIGHT_PAREN> ]
	{
		if ((precision <= 0) || 
			(precision > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION, 
				typeStr, String.valueOf(precision));
		} 
		else if ((scale < 0) || 
				 (scale > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_SCALE, 
				typeStr, String.valueOf(scale));
		}
		else if (scale > precision)
		{
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_PRECISION_SCALE, 
				String.valueOf(scale),
				String.valueOf(precision));
		}
		/*
		** If we have a decimal point, need to count it
		** towards maxwidth.  Max width needs to account
		** for the possible leading '0' and '-' and the
		** decimal point.  e.g., DEC(1,1) has a maxwidth
		** of 4 (to handle "-0.1").
		*/
		maxWidth = DataTypeUtilities.computeMaxWidth( precision, scale);
		return getDataTypeServices(type, precision, scale, maxWidth);
	}
	|
		dtd = exactIntegerType()
		{
			return dtd;
		}
}

/*
 * <A NAME="exactNumericType">exactNumericType</A>
 */
DataTypeDescriptor
exactIntegerType() throws StandardException :
{

}
{
	(<INTEGER> | <INT>)
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.INTEGER);
	}
|
	<SMALLINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.SMALLINT);
	}
|
	<LONGINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT);
	}
}

/*
 * <A NAME="approximateNumericType">approximateNumericType</A>
 */
DataTypeDescriptor
approximateNumericType() throws StandardException :
{
	int type = 0, scale = 0, width = 0;
	int prec = -1;
	DataTypeDescriptor dts = null;
}
{
	<FLOAT> [ <LEFT_PAREN> prec = precision() <RIGHT_PAREN> ]
	{
		/*
			When not specified, default is DOUBLE_PRECISION
		 */
		if (prec == -1)
			prec = TypeId.DOUBLE_PRECISION;

		if (prec > 0 && prec <= TypeId.REAL_PRECISION)
		{
			type = Types.REAL;
			prec = TypeId.REAL_PRECISION;
			scale = TypeId.REAL_SCALE;
			width = TypeId.REAL_MAXWIDTH;
		}
		else if (prec > TypeId.REAL_PRECISION &&
				 prec <= TypeId.DOUBLE_PRECISION)
		{
			type = Types.DOUBLE;
			prec = TypeId.DOUBLE_PRECISION;
			scale = TypeId.DOUBLE_SCALE;
			width = TypeId.DOUBLE_MAXWIDTH;
		}
		else
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION, "FLOAT", String.valueOf(prec));

		/*
			REMIND: this is a slight hack, in that exacting reading of
			the InformationSchema requires that the type the user typed
			in be visible to them in the InformationSchema views. But
			most implementations use synonyms or mappings at some point,
			and this is one of those places, for us.
		 */
		return getDataTypeServices(type, prec, scale, width);
	}
| 
	<REAL>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.REAL);
	}
|
		dts = doubleType()
	{
		return dts;
	}
}

/*
 * <A NAME="doubleType">doubleType</A>
 */
DataTypeDescriptor
doubleType() throws StandardException :

{

}
{
	( LOOKAHEAD({getToken(2).kind == PRECISION}) <DOUBLE> <PRECISION> | <DOUBLE> )
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DOUBLE);
	}
}


/*
 * <A NAME="longType">longType</A>
 */
DataTypeDescriptor
longType() throws StandardException :
{
	DataTypeDescriptor	dataTypeDescriptor;
}
{
	<LONG> dataTypeDescriptor = longSubType()
	{
		return dataTypeDescriptor;
	}
}


DataTypeDescriptor
longSubType() throws StandardException :
{
	int lvcType = Types.LONGVARCHAR;
}
{
	<VARCHAR> [ lvcType = forBitData(lvcType) ]
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(lvcType);
	}
|
	<NVARCHAR> 
	{
		// need to re-enable according to SQL standard
		throw StandardException.newException(SQLState.NOT_IMPLEMENTED, TypeId.NATIONAL_LONGVARCHAR_NAME);
		// return DataTypeDescriptor.getBuiltInDataTypeDescriptor(TypeId.NATIONAL_LONGVARCHAR_NAME);
	}
}

/*
 * <A NAME="XMLType">XMLType</A>
 */
DataTypeDescriptor
XMLType() throws StandardException :
{
	DataTypeDescriptor value;
}
{
	<XML>
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "XML");
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(
			StoredFormatIds.XML_TYPE_ID);
	}
}

/*
 * <A NAME="xmlDocOrContent">xmlDocOrContent</A>
 *
 * Parse the XML keywords DOCUMENT and CONTENT.  We don't
 * support CONTENT yet, so we throw an appropriate error
 * if we see it.
 *
 */
void
xmlDocOrContent() throws StandardException :
{
}
{
	LOOKAHEAD({ (getToken(1).kind != DOCUMENT) &&
		(getToken(1).kind != CONTENT) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "DOCUMENT");
	}
|
	LOOKAHEAD({ getToken(1).kind == CONTENT }) <CONTENT>
	{
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "CONTENT");
	}
|
	LOOKAHEAD({ getToken(1).kind == DOCUMENT }) <DOCUMENT>
	{
		return;
	}
}

/*
 * <A NAME="javaType">javaType</A>
 */
DataTypeDescriptor
javaType() throws StandardException :
{
	String	javaClassName;
}
{
	javaClassName = javaClassName() 
	{
		return getJavaClassDataTypeDescriptor(javaClassName);
	}
}

/*
 * <A NAME = "javaDSL">javaDSL</A>
 *
 * A Java dot-separated list.
 */
String
javaDSL() :
{
	String dotSeparatedList;
}
{
	dotSeparatedList = caseSensitiveIdentifierPlusReservedWords()
		( dotSeparatedList = javaDSLNameExtender(dotSeparatedList) ) *
	{
		return dotSeparatedList;
	}
}


/*
 * <A NAME="javaClassName">javaClassName</A>
 */
String
javaClassName() :
{
	String javaClassName;
}
{
	javaClassName = javaDSL()
	{
		return javaClassName;
	}
}

/*
 * <A NAME="javaDSLNameExtender">javaDSLNameExtender</A>
 */
String
javaDSLNameExtender(String dotSeparatedList)  :
{
	String	extender;
}
{
	<PERIOD> extender = caseSensitiveIdentifierPlusReservedWords()
	{
		return dotSeparatedList + "." + extender;
	}
}

/*
 * <A NAME="length">lengthAndModifier</A>
 */
int
lengthAndModifier() throws StandardException :
{
	Token	tok;
	Token	tokmod = null;
}
{
	<LEFT_PAREN> 
	// we have essentially 3 different ways of specifying the length of a LOB
	( tok = <LENGTH_MODIFIER>					// LOB(33K)
	| tok = <EXACT_NUMERIC> [ tokmod = <IDENTIFIER> ] )		// LOB(33) or LOB(33 K)
	<RIGHT_PAREN>
	{
		String s = tok.image + (tokmod==null ? "" : tokmod.image); // colapse cases;
		try
		{
			char modifier = s.charAt(s.length()-1);
			String number = s.substring(0, s.length()-1); // in case of ending w. letter
			long mul;
			switch (modifier) {
			case 'G': 
			case 'g':
				mul =1073741824L;	//1 Giga
				break;
			case 'M':
			case 'm':
				mul=1048576L;		// 1 Mega
				break;
			case 'K':
			case 'k':
				mul=1024L;		// 1 Kilo
				break;
			default:
				mul=1;
				number = s; // no letter in end, need whole string
				break;
			}
			long	specifiedLength = Long.parseLong(number) * mul;
			
			// match DB2 limits of 1 to 2147483647
			if ((specifiedLength > 0L) && 
                (specifiedLength <= Limits.DB2_LOB_MAXWIDTH))
            {
				return (int)specifiedLength;
            }

			// DB2 allows 2G or 2048M or 2097152k that calculate out to 
            // 2147483648, but sets the length to be one less.
			if (mul != 1 && specifiedLength == 2147483648L)
				return Limits.DB2_LOB_MAXWIDTH;
				
		}
		catch (NumberFormatException nfe)
		{
		}

		throw StandardException.newException(
            SQLState.LANG_INVALID_COLUMN_LENGTH, s);
	}
}

/*
 * <A NAME="length">length</A>
 */
int
length() throws StandardException :
{
	Token	tok;
	int	retval;
}
{
	tok = <EXACT_NUMERIC>
	{
		try
		{
			retval = Integer.parseInt(tok.image);

			if (retval > 0)
				return retval;
		}
		catch (NumberFormatException nfe)
		{
		}
		throw StandardException.newException(SQLState.LANG_INVALID_COLUMN_LENGTH, tok.image);
	}
}


/*
 * <A NAME="exactNumber">exactNumber</A>
*/
long
exactNumber() throws StandardException :
{
	Token longToken;
	String sign = "";
}
{
	[ sign = sign() ] longToken = <EXACT_NUMERIC>
	{
		try 
		{
			long longvalue = Long.parseLong(longToken.image);
			if (sign.equals("-"))
			{
				return -longvalue;
			}
			else
			{
				return longvalue;
			}
		}
		catch (NumberFormatException nfe)
		{
			throw
			StandardException.newException(
				   SQLState.LANG_INVALID_INTEGER_LITERAL, longToken.image);
		}
	}
}
/*
 * <A NAME="precision">precision</A>
 */
int
precision() throws StandardException :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}

/*
 * <A NAME="uint_value">uint_value</A>
 */
int 
uint_value() throws StandardException :
{
	Token uintToken;
}
{
	/*
		because the parser won't match to UINT, we use EXACT_NUMERIC.
	 */
	uintToken = <EXACT_NUMERIC>
	{
		try {
			return Integer.parseInt(uintToken.image);
		} catch (NumberFormatException nfe) {
			throw StandardException.newException(SQLState.LANG_INVALID_INTEGER_LITERAL, uintToken.image);
		}
	}
}

/*
 * <A NAME="scale">scale</A>
 */
int
scale() throws StandardException :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}


/*
 * <A NAME="datetimeType">datetimeType</A>
 */
DataTypeDescriptor
datetimeType() throws StandardException :
{
	Token tzTok = null;
	int prec = -1; // know the value back is positive and in range
}
{
	<DATE> 
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DATE);
	}
|
	<TIME> 
	{

		/*
			We do not try to set up a precision for time/timestamp
			values because this field gets mapped to the precision
			field in the JDBC driver that is for the number of
			decimal digits in the value.  Precision for time is
			actually the scale of the seconds value.

			If/when precision for times is supported, we may need
			to migrate the system catalog information to fill in
			the default values appropriately (the default for
			time is 0, fortunately; but for timestamp it is
			actually 9 due to java.sql.Timestamp's precision).
		 */
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIME);
	}
|
	<TIMESTAMP> 
	{

		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIMESTAMP);
	}
}

/*
 * <A NAME="timePrecision">timePrecision</A>
 */

void
qualifiedNameList(Vector list, int id_length_limit) throws StandardException :
{
}
{
	qualifiedNameElement(list, id_length_limit) ( <COMMA> qualifiedNameElement(list, id_length_limit) ) *
}

void 
qualifiedNameElement(Vector list, int id_length_limit) throws StandardException :
{
	TableName qualifiedName = null;
}
{
	qualifiedName = qualifiedName(id_length_limit)
	{
		list.addElement(qualifiedName);
	}
}

/*
 * <A NAME="qualifiedName">qualifiedName</A>
 */
TableName
qualifiedName( int nodeType, int id_length_limit) throws StandardException :
{
	//String	catalogName = null;
	String	schemaName = null;
	String	qualifiedId;
	String	firstName = null;
	String	secondName = null;
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
				[
					// This LOOKAHEAD is necessary because a selectSublist()
					// can be a qualifiedName.*. Make sure that the token after
					// the PERIOD is not an ASTERISK before committing to this
					// optional element.
					LOOKAHEAD( {getToken(1).kind == PERIOD &&
								getToken(2).kind != ASTERISK} )
					<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
				]
	{
		if (secondName == null)
		{
			qualifiedId = firstName;
		}
		else
		{
			schemaName = firstName;
			qualifiedId = secondName;
		}

		//limit the qualifiedId to the id length limit passed to this method
		checkIdentifierLengthLimit(qualifiedId, id_length_limit);
		if (schemaName != null)
			checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);

		return (TableName) nodeFactory.getNode(
								nodeType,
								schemaName,
								qualifiedId,
								new Integer(lastIdentifierToken.beginOffset),
								new Integer(lastIdentifierToken.endOffset),
								getContextManager());
	}
}

/*
 * <A NAME="queryExpression">queryExpression</A>
 *
 * We have to be carefull to get the associativity correct. According to the SQL spec
 *   <non-join query expression> ::=
 *     <non-join query term>
 *    | <query expression body> UNION [ ALL ] <query term>
 *    | <query expression body> EXCEPT [ ALL ] <query term>
 * Meaning that
 *   t1 UNION ALL t2 UNION t3
 * is equivalent to
 *   (t1 UNION ALL t2) UNION t3
 * However recursive descent parsers want recursion to be on the right, so this kind of associativity is unnatural
 * for our parser. The queryExpression method must know whether it is being called as the right hand side of a
 * set operator to produce a query tree with the correct associativity.
 */
ResultSetNode
queryExpression(ResultSetNode leftSide, int operatorType) throws StandardException :
{
	ResultSetNode	term;
}
{
	term = nonJoinQueryTerm(leftSide, operatorType) [ term = unionOrExcept(term) ]
	{
		return term;
	}
}

/*
 * <A NAME="unionOrExcept">unionOrExcept</A>
 */
ResultSetNode
unionOrExcept(ResultSetNode term) throws StandardException :
{
	ResultSetNode	expression;
	Token 			tok = null;
}
{
	<UNION> [ tok = <ALL> | <DISTINCT> ] expression =
				queryExpression(term,
								(tok != null) ? UNION_ALL_OP : UNION_OP)
	{
		return expression;
	}
|
	<EXCEPT> [ tok = <ALL> | <DISTINCT> ] expression =
				queryExpression(term,
								(tok != null) ? EXCEPT_ALL_OP : EXCEPT_OP)
	{
		return expression;
	}
}


/*
 * <A NAME="nonJoinQueryTerm">nonJoinQueryTerm</A>
 *
 * Be careful with the associativity of INTERSECT. According to the SQL spec
 *   t1 INTERSECT t2 INTERSECT ALL t3
 * is equivalent to
 *   (t1 INTERSECT t2) INTERSECT ALL t3
 * which is not the same as
 *   t1 INTERSECT (t2 INTERSECT ALL t3)
 * See the comment on queryExpression.
 */
ResultSetNode
nonJoinQueryTerm(ResultSetNode leftSide, int operatorType) throws StandardException :
{
	ResultSetNode	term;
}
{
	term = nonJoinQueryPrimary() [ term = intersect( term) ]
	{
        switch( operatorType)
        {
        case NO_SET_OP:
            return term;

        case UNION_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.UNION_NODE,
                leftSide,
                term,
                Boolean.FALSE,
                Boolean.FALSE,
                null,
                getContextManager());

        case UNION_ALL_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.UNION_NODE,
                leftSide,
                term,
                Boolean.TRUE,
                Boolean.FALSE,
                null,
                getContextManager());

        case EXCEPT_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.EXCEPT_OP),
                leftSide,
                term,
                Boolean.FALSE,
                null,
                getContextManager());

        case EXCEPT_ALL_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.EXCEPT_OP),
                leftSide,
                term,
                Boolean.TRUE,
                null,
                getContextManager());

        case INTERSECT_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.INTERSECT_OP),
                leftSide,
                term,
                Boolean.FALSE,
                null,
                getContextManager());

        case INTERSECT_ALL_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.INTERSECT_OP),
                leftSide,
                term,
                Boolean.TRUE,
                null,
                getContextManager());


        default:
            if (SanityManager.DEBUG)
            {
                SanityManager.THROWASSERT( "Invalid set operator type: " + operatorType);
            }
            return null;
        }
    }
}

/*
 * <A NAME="intersect">intersect</A>
 */
ResultSetNode
intersect(ResultSetNode term) throws StandardException :
{
	ResultSetNode	expression;
	Token 			tok = null;
}
{
	<INTERSECT> [ tok = <ALL> | <DISTINCT> ] expression =
				nonJoinQueryTerm(term, (tok != null) ? INTERSECT_ALL_OP : INTERSECT_OP)
	{
		return expression;
	}
}

/*
 * <A NAME="nonJoinQueryPrimary">nonJoinQueryPrimary</A>
 */
ResultSetNode
nonJoinQueryPrimary() throws StandardException :
{
	ResultSetNode	primary;
}
{
	primary = simpleTable()
	{
		return primary;
	}
|
	<LEFT_PAREN> primary = queryExpression(null, NO_SET_OP) <RIGHT_PAREN>
	{
		return primary;
	}
}

/*
 * <A NAME="simpleTable">simpleTable</A>
 */
ResultSetNode
simpleTable() throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	resultSetNode = querySpecification()
	{
		return resultSetNode;
	}
|
	resultSetNode = tableValueConstructor()
	{
		return resultSetNode;
	}
}

/*
 * <A NAME="querySpecification">querySpecification</A>
 */
ResultSetNode
querySpecification() throws StandardException :
{
	ResultColumnList	selectList;
	SelectNode			selectNode;
	boolean	isDistinct = false;
}
{
	<SELECT> [ isDistinct = setQuantifier() ]
		selectList = selectList()
		selectNode = tableExpression(selectList)
	{
		if (isDistinct) selectNode.makeDistinct();
		return selectNode;
	}
}

/*
 * <A NAME="setQuantifier">setQuantifier</A>
 */
boolean
setQuantifier() :
{}
{
	// This lookahead is required to distinquish distinct from
	// a class which starts with distinct (e.g., distinct::)
	LOOKAHEAD
	(
		{
			getToken(1).kind == DISTINCT &&
			!(
				getToken(2).kind == PERIOD ||
				getToken(2).kind == DOUBLE_COLON
			)
		}
	)
	<DISTINCT>
	{
		return true;
	}
|
	// This lookahead is required to distinquish all from
	// a class which starts with all (e.g., all::)
	LOOKAHEAD
	(
		{
			getToken(1).kind == ALL &&
			!(
				getToken(2).kind == PERIOD ||
				getToken(2).kind == DOUBLE_COLON
			)
		}
	)
	<ALL>
	{
		return false;
	}
}

/*
 * <A NAME="selectList">selectList</A>
 */
ResultColumnList
selectList() throws StandardException :
{
	ResultColumn	allResultColumn;
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN_LIST,
									getContextManager());
}
{
	<ASTERISK>
	{
		allResultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.ALL_RESULT_COLUMN,
										null,
										getContextManager());
		/* Add the new AllResultColumn to the end of the list */
		resultColumns.addResultColumn(allResultColumn);
		return resultColumns;
	}
|
	selectColumnList(resultColumns)
	{
		return resultColumns;
	}
}

void
selectColumnList(ResultColumnList resultColumns) throws StandardException :
{
}
{
	selectSublist(resultColumns) ( <COMMA> selectSublist(resultColumns) ) *
}

/*
 * <A NAME="selectSublist">selectSublist</A>
 */
void
selectSublist(ResultColumnList resultColumns) throws StandardException :
{
	ResultColumn	resultColumn;
	ResultColumn	allResultColumn;
	TableName	tableName;
}
{
	// This LOOKAHEAD is required because both a qualifiedName() and a
	// derivedColumn() can start with an identifier().  So, the two cases
	// we check for are x.* and x.y.*
	//
	// NOTE: It is hard to check for an identifier() using semantic lookahead.
	LOOKAHEAD
	(
		{
			getToken(2).kind == PERIOD &&
			(
				getToken(3).kind == ASTERISK ||
				(getToken(4).kind == PERIOD && getToken(5).kind == ASTERISK)
			)
		}
	)
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <PERIOD> <ASTERISK>
	{
		allResultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.ALL_RESULT_COLUMN,
										tableName,
										getContextManager());
		/* Add the new AllResultColumn to the end of the list */
		resultColumns.addResultColumn(allResultColumn);
	}
|
	resultColumn = derivedColumn(resultColumns)
	{
		/* Add the new ResultColumn to the end of the list */
		resultColumns.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="derivedColumn">derivedColumn</A>
 */
ResultColumn
derivedColumn(ResultColumnList resultColumns) throws StandardException :
{
	ValueNode	columnExpression;
	String		columnName = null;
}
{
	//true to additiveExpression ensures that for the derived columns, we will not allow boolean values inside (), 
	//eg (2 > 1) should be disallowed in the select clause
	columnExpression = additiveExpression(null, 0, true) 
			[ columnName = asClause() ]
	{ 
		/*
		** If there is no AS clause, and the expression is a simple
		** column, use the name of the column as the result column
		** name.
		*/
		if ((columnName == null) && (columnExpression instanceof ColumnReference))
		{
			columnName = ((ColumnReference) columnExpression).columnName;
		}

		return (ResultColumn) nodeFactory.getNode(
						C_NodeTypes.RESULT_COLUMN,
						columnName,
						columnExpression,
						getContextManager());
	}
}

/*
 * <A NAME="asClause">asClause</A>
 */
String
asClause() throws StandardException :
{
	String	columnName;
}
{
	/* identifier() used to be columnName() */
	[ <AS> ] columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return columnName;
	}
}

/*
 * <A NAME="valueExpression">valueExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
valueExpression(boolean inSelectClause) throws StandardException :
{
	ValueNode	leftOperand;
}
{
	leftOperand = orExpression(null, inSelectClause)
		(<OR> leftOperand = orExpression(leftOperand, inSelectClause) ) *
	{

		return leftOperand;
	}
}
	
/*
 * <A NAME="orExpression">orExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
orExpression(ValueNode farLeftOperand, boolean inSelectClause) throws StandardException :
{
	ValueNode	leftOperand;
}
{
	leftOperand = andExpression(null, inSelectClause)
		(<AND> leftOperand = andExpression(leftOperand, inSelectClause)) *
	{
		if (farLeftOperand == null)
		{
			return leftOperand;
		}
		else
		{
			return (ValueNode) nodeFactory.getNode(
										C_NodeTypes.OR_NODE,
										farLeftOperand,
										leftOperand,
										getContextManager());
		}
	}
}

/*
 * <A NAME="andExpression">andExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
andExpression(ValueNode farLeftOperand, boolean inSelectClause) throws StandardException :
{
	Token		tok = null;
	ValueNode	test;
}
{
	//LOOKAHEAD required to tell that NOT is not part of a class name
	[ LOOKAHEAD({getToken(1).kind == NOT && !(getToken(2).kind == PERIOD ||
			getToken(2).kind == DOUBLE_COLON)}) tok = <NOT> ] test = isSearchCondition(inSelectClause) 
	{
		/* Put the NOT on top of test */
		if (tok != null)
		{
			test = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.NOT_NODE,
									test,
									getContextManager());
		}

		if (farLeftOperand != null)
		{
			test = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.AND_NODE,
										farLeftOperand,
										test,
										getContextManager());
		}
		return test;
	}
}

/*
 * <A NAME="isSearchCondition">isSearchCondition</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
isSearchCondition(boolean inSelectClause) throws StandardException :
{
	ValueNode	result;
	ValueNode	booleanPrimary;
	Token		isToken = null;
	Token		notToken = null;
	Token		truthValue = null;
}
{
	booleanPrimary = booleanPrimary(inSelectClause)
	[
		isToken = <IS> [ notToken = <NOT> ] <NULL>
	]
	{
		if ( isToken != null )
		{
				result = (ValueNode) nodeFactory.getNode(
											C_NodeTypes.IS_NULL_NODE,
											booleanPrimary,
											getContextManager());
		
				/* Put the NOT on top of the tree */
				if (notToken != null)
				{
					result = (ValueNode) nodeFactory.getNode(
											C_NodeTypes.NOT_NODE,
											result,
											getContextManager());
				}
		}
		else { result = booleanPrimary; }

		return result;
	}
}

/*
 * <A NAME="booleanPrimary">booleanPrimary</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
booleanPrimary(boolean inSelectClause) throws StandardException :
{
	ValueNode	primary;
	ValueNode	searchCondition;
}
{
	primary = predicate(inSelectClause)
	{
		return	primary;
	}
}

/*
 * <A NAME="predicate">predicate</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
predicate(boolean inSelectClause) throws StandardException :
{
	ValueNode	value;
}
{
	(
		value = additiveExpression(null, 0, inSelectClause) |
		value = existsExpression()
	)
	(
		// This LOOKAHEAD is necessary because remainingPredicate() can
		// start with NOT, and what follows a predicate() can also start
		// with NOT
		LOOKAHEAD( { remainingPredicateFollows() } )
		value = remainingPredicate(value, inSelectClause)
	)*
	{
		return value;
	}
/*
** RESOLVE: overlapsExpression commented out for the time being to avoid
** a left recursion.  An OVERLAPS expression is defined as taking row
** constructors as parameters.  A row constructor contains a valueExpression
** as its first element, so it can't return be the first element in a
** valueExpression.

|
	overlapsExpression()
	{
		return null;
	}
*/
}

/*
 * <A NAME="remainingPredicates">remainingPredicates</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
remainingPredicate(ValueNode value, boolean inSelectClause) throws StandardException :
{
	Token tok = null;
}
{
	value = remainingNonNegatablePredicate(value, inSelectClause)
	{
		return value;
	}
|
	[ tok = <NOT> ] value = remainingNegatablePredicate(value, inSelectClause)
	{
		/* Put the NOT on top of the tree */
		if (tok != null)
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.NOT_NODE,
										value,
										getContextManager());
		}

		return value;
	}
}

/*
 * <A NAME="remainingNonNegatablePredicate">remainingNonNegatablePredicate</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode 
remainingNonNegatablePredicate(ValueNode leftOperand, boolean inSelectClause) throws StandardException :
{
	int			operator;
	String		javaClassName;
	Token 		tok = null;
	ValueNode	tree = null;
	ValueNode	likePattern;
	ValueNode	betweenLeft;
	ValueNode	betweenRight;
}
{
	operator = compOp()
	(
		// Lookahead required here to tell ALL, ANY or SOME from a 
		// class which starts with these words (e.g., ALL::)
		LOOKAHEAD({(getToken(1).kind == ALL || getToken(1).kind == ANY || 
			getToken(1).kind == SOME) && getToken(2).kind == LEFT_PAREN})
		(
			operator = quantifier(operator)
			<LEFT_PAREN>
			leftOperand = tableSubquery(operator, leftOperand)
			<RIGHT_PAREN>
		)
		|
		(
			leftOperand = additiveExpression(leftOperand, operator, inSelectClause)
		)
	)
	{
		return leftOperand;
	}
}

/*
 * <A NAME="remainingNegatablePredicate">remainingNegatablePredicate</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode 
remainingNegatablePredicate(ValueNode leftOperand, boolean inSelectClause) throws StandardException :
{
	ValueNode	tree = null;
	ValueNode	likePattern;
	ValueNode	betweenLeft;
	ValueNode	betweenRight;
	ValueNode	escapeValue = null;
}
{
	<IN> tree = inPredicateValue(leftOperand)
	{
		return tree;
	}
|
	<LIKE> likePattern = additiveExpression(null, 0, inSelectClause)
            [
                <ESCAPE> escapeValue = additiveExpression(null, 0, inSelectClause) |
                <LEFT_BRACE> <ESCAPE> escapeValue = additiveExpression(null, 0, inSelectClause) <RIGHT_BRACE>
            ]
	{
		tree = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.LIKE_OPERATOR_NODE,
								leftOperand,
								likePattern,
								escapeValue,
								getContextManager());
		
		return tree;
	}
|
	<BETWEEN> betweenLeft = additiveExpression(null, 0, inSelectClause) <AND>
			betweenRight = additiveExpression(null, 0, inSelectClause)
	{
		ValueNodeList betweenList = (ValueNodeList) nodeFactory.getNode(
													C_NodeTypes.VALUE_NODE_LIST,
													getContextManager());
		betweenList.addElement(betweenLeft);
		betweenList.addElement(betweenRight);
		tree = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.BETWEEN_OPERATOR_NODE,
								leftOperand,
								betweenList,
								getContextManager());
		
		return tree;
	}
}

/*
 * <A NAME="compOp">compOp</A>
 */
int
compOp() throws StandardException :
{}
{
	<EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.EQ;
	}
|
	<NOT_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.NE;
	}
|
	<NOT_EQUALS_OPERATOR2>
	{
		return BinaryOperatorNode.NE;
	}
|
	<LESS_THAN_OPERATOR>
	{
		return BinaryOperatorNode.LT;
	}
|
	<GREATER_THAN_OPERATOR>
	{
		return BinaryOperatorNode.GT;
	}
|
	<LESS_THAN_OR_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.LE;
	}
|
	<GREATER_THAN_OR_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.GE;
	}
}

/*
 * <A NAME="additiveExpression">additiveExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
additiveExpression(ValueNode farLeftOperand, int compOp, boolean inSelectClause) throws StandardException :
{
	ValueNode	leftOperand;
	int			operator;
	int			nodeType;
}
{
	leftOperand = multiplicativeExpression(null, 0, inSelectClause)  			
			(operator = additiveOperator() 			 
				leftOperand = multiplicativeExpression(leftOperand, operator, inSelectClause) )*
	{
		if (farLeftOperand == null)
			return leftOperand;

		switch (compOp)
		{
		  case BinaryOperatorNode.EQ:
			nodeType = C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.NE:
			nodeType = C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.LT:
		  	nodeType = C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.GT:
			nodeType = C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.LE:
			nodeType = C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.GE:
			nodeType = C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE;
			break;

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT("Unknown comparison operator " + compOp);
			nodeType = 0;
			break;
		}

		return (ValueNode) nodeFactory.getNode(
							nodeType,
							farLeftOperand,
							leftOperand,
							getContextManager());
	}
}

/*
 * <A NAME="additiveOperator">additiveOperator</A>
 */
int
additiveOperator() throws StandardException :
{
	Token tok;
}
{	tok = <PLUS_SIGN> 
	{
		return BinaryOperatorNode.PLUS;
	}
|
	tok = <MINUS_SIGN>
	{
		return BinaryOperatorNode.MINUS;
	}
}

/*
 * <A NAME="multiplicativeExpression">multiplicativeExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
multiplicativeExpression(ValueNode farLeftOperand, int additiveOperator, boolean inSelectClause) throws StandardException :
{
	ValueNode	leftOperand;
	int			multOp;
}
{
	leftOperand = unaryExpression(null, 0, inSelectClause) 
				(multOp = multiplicativeOperator() 
				 leftOperand = unaryExpression(leftOperand, multOp, inSelectClause) )*
	{
		if (farLeftOperand == null)
			return leftOperand;

		switch (additiveOperator)
		{
		  case BinaryOperatorNode.PLUS:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_PLUS_OPERATOR_NODE,
									farLeftOperand,
									leftOperand,
									getContextManager()
									);

		  case BinaryOperatorNode.MINUS:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_MINUS_OPERATOR_NODE,
									farLeftOperand,
									leftOperand,
									getContextManager()
									);

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT(
					"Unexpected operator value of " + additiveOperator);
			return null;
		}
	}
}

/*
 * <A NAME="multiplicativeOperator">multiplicativeOperator</A>
 */
int
multiplicativeOperator() throws StandardException :
{ }
{	<ASTERISK> 
	{
		return BinaryOperatorNode.TIMES;
	}
|
	<SOLIDUS>
	{
		return BinaryOperatorNode.DIVIDE;
	}
|
	<CONCATENATION_OPERATOR>
	{
		return BinaryOperatorNode.CONCATENATE;
	}
}

/*
 * <A NAME="unaryExpression">unaryExpression</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
unaryExpression(ValueNode farLeftOperand, int multiplicativeOperator, boolean inSelectClause) throws StandardException :
{
	ValueNode	value;
	String		sign = null;
	int			tokKind1;
	int			tokKind2;
}
{
	[
		// This LOOKAHEAD is required because a + or - sign can come before
		// any expression, and also can be part of a literal. If it comes
		// before a number, we want it to be considered part of the literal,
		// because the literal() rule knows how to handle the minimum value
		// for an int without changing it to a long.
		LOOKAHEAD( {
					( (tokKind1 = getToken(1).kind) == PLUS_SIGN ||
					   tokKind1 == MINUS_SIGN )
					&&
					( (tokKind2 = getToken(2).kind) != EXACT_NUMERIC &&
					   tokKind2 != APPROXIMATE_NUMERIC)
				   } )
		sign = sign()
	]
	value = primaryExpression(inSelectClause)
	{
		if ("-".equals(sign))
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.UNARY_MINUS_OPERATOR_NODE,
										value,
										getContextManager());
		}
		else if ("+".equals(sign))
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.UNARY_PLUS_OPERATOR_NODE,
										value,
										getContextManager());
		}
		else if (SanityManager.DEBUG)
		{
			if (sign != null)
			{
				SanityManager.THROWASSERT("Unknown unary operator '"
											+ sign
											+ "'");
			}
		}

		return multOp(farLeftOperand, value, multiplicativeOperator);
	}
}


/*
 * <A NAME="sign">sign</A>
 */
String
sign() :
{
	Token	s;
}
{
	s = <PLUS_SIGN>
	{
		return s.image;
	}
|
	s = <MINUS_SIGN>
	{
		return s.image;
	}
}

/*
 * <A NAME="primaryExpressionXX">primaryExpressionXX</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
primaryExpressionXX(boolean inSelectClause) throws StandardException :
{
	ValueNode	value;
}
{
	value = primary(inSelectClause)
	  ( value = nonStaticMethodCallOrFieldAccess(value)) *	
	{
		return value;
	}
}

ValueNode
nonStaticMethodCallOrFieldAccess(ValueNode receiver) throws StandardException :
{
	ValueNode value;
}
{
	value = nonStaticMethodInvocation(receiver)
	{
		return value;
	}
}

/*
 * <A NAME="nonStaticMethodInvocation">nonStaticMethodInvocation</A>
 */
ValueNode
nonStaticMethodInvocation(ValueNode receiver) throws StandardException :
{
	Vector					parameterList = new Vector();
	MethodCallNode			methodNode;
	ParameterNode			parameterNode;
}
{
        LOOKAHEAD
	( {
		getToken(3).kind == LEFT_PAREN
	  }
	)

	( <FIELD_REFERENCE> | <PERIOD> )
		methodNode = methodName(receiver) methodCallParameterList(parameterList)

	{

		/*
		** ? parameters are not allowed for the receiver --
		** unless the receiver is standing in for a named parameter,
		** whose type is therefore known.
		*/
		if (receiver instanceof ParameterNode)
		{
			throw StandardException.newException(SQLState.LANG_PARAMETER_RECEIVER,
												methodNode.getMethodName());
		}

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
|
        <PERIOD> methodNode = methodName(receiver)
	{
		/*
		** ? parameters are not allowed for the receiver --
		** unless the receiver is standing in for a named parameter,
		** whose type is therefore known.
		*/
		if (receiver instanceof ParameterNode)
		{
			throw StandardException.newException(SQLState.LANG_PARAMETER_RECEIVER,
												methodNode.getMethodName());
		}

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}


}

/*
 * <A NAME="methodName">methodName</A>
 */
MethodCallNode
methodName(ValueNode receiver) throws StandardException :
{
	String	methodName;
}
{
	/*
	** NOTE: allowing a delimited identifier as a method name is necessary,
	** because Java is case-sensitive.  But this also allows identifiers that
	** do not match Java syntax.  This will probably not cause a problem
	** in later phases, like binding and code generation.
	*/
	methodName = caseSensitiveIdentifierPlusReservedWords()
	{
		return (MethodCallNode) nodeFactory.getNode(
										C_NodeTypes.NON_STATIC_METHOD_CALL_NODE,
										methodName,
										receiver,
										getContextManager());
	}
}

/*
 * <A NAME="staticMethodName">staticMethodName</A>
 */
MethodCallNode
staticMethodName(String javaClassName) throws StandardException :
{
	String	methodName;
}
{
	/*
	** NOTE: allowing a delimited identifier as a method name is necessary,
	** because Java is case-sensitive.  But this also allows identifiers that
	** do not match Java syntax.  This will probably not cause a problem
	** in later phases, like binding and code generation.
	*/
	methodName = caseSensitiveIdentifierPlusReservedWords()
	{
		return (MethodCallNode) nodeFactory.getNode(
								C_NodeTypes.STATIC_METHOD_CALL_NODE,
								methodName,
								javaClassName,
								getContextManager());
	}
}

/*
 * <A NAME="methodParameter">methodParameter</A>
 */
void
methodParameter(Vector parameterList) throws StandardException :
{
	ValueNode	parameter;
}
{
	parameter = additiveExpression(null,0,false)
	{
		parameterList.addElement(parameter);
	}
|
	parameter = nullSpecification()
	{
		parameterList.addElement(parameter);
	}
}

/*
 * <A NAME="primary">primary</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
primary(boolean inSelectClause) throws StandardException :
{
	String		javaClassName;
	ValueNode	value;
}
{
	
	//Look ahead required here to tell a java class from a identifier
	LOOKAHEAD( { javaClassFollows() } )
	value = staticClassReference()
	{
		return value;
	}
|
	value = valueExpressionPrimary(inSelectClause)
	{
		return value;
	}
}

/*
 * <A NAME="staticClassReference">staticClassReference</A>
 */
ValueNode
staticClassReference() throws StandardException :
{
	String		javaClassName;
	ValueNode value;
}
{
	javaClassName = javaClass() <DOUBLE_COLON>  value = staticClassReferenceType(javaClassName)
	{
		return value;
	}
}

/*
 * <A NAME="staticClassReferenceType">staticClassReferenceType</A>
 */
ValueNode
staticClassReferenceType(String javaClassName) throws StandardException :
{
	ValueNode value;
}
{
	//Look ahead required here to tell method from field reference
	LOOKAHEAD({(getToken(2).kind == LEFT_PAREN)})
	value = staticMethodInvocation(javaClassName) 
	{
		return value;
	}
|
	value = staticClassFieldReference(javaClassName) 
	{
		return value;
	}
}

/*
 * <A NAME="staticClassFieldReference">staticClassFieldReference</A>
 */
ValueNode
staticClassFieldReference(String javaClassName) throws StandardException :
{
	String		fieldName = null;
}
{
	fieldName = caseSensitiveIdentifierPlusReservedWords() 
	{
		return	(ValueNode) nodeFactory.getNode(
					C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
					nodeFactory.getNode(
								C_NodeTypes.STATIC_CLASS_FIELD_REFERENCE_NODE,
								javaClassName,
								fieldName,
								nextToLastTokenDelimitedIdentifier,
								getContextManager()),
					getContextManager());
	}
}

/*
 * <A NAME="nonSecondDatetimeField">nonSecondDatetimeField</A>
 */
int
nonSecondDatetimeField() :
{}
{
	<YEAR> 
	{
		return DateTimeDataValue.YEAR_FIELD;
	}
|
	<MONTH> 
	{
		return DateTimeDataValue.MONTH_FIELD;
	}
|
	<DAY> 
	{
		return DateTimeDataValue.DAY_FIELD;
	}
|
	<HOUR> 
	{
		return DateTimeDataValue.HOUR_FIELD;
	}
|
	<MINUTE>
	{
		return DateTimeDataValue.MINUTE_FIELD;
	}
}


ValueNode
escapedValueFunction() throws StandardException :
{
	ValueNode	value;
    ValueNode   str1;
    ValueNode   str2;
	ValueNode	startPosition;
    ValueNode	length = null;
}
{
	value = miscBuiltinsCore( true /* is JDBC escape */)
	{
		return value;
	}
|
	/* Escaped function substring() */
    <SUBSTRING> <LEFT_PAREN> value = additiveExpression(null, 0, false) <COMMA> startPosition = additiveExpression(null, 0, false) [ <COMMA> length = additiveExpression(null, 0, false) ] <RIGHT_PAREN>
	{
        return getSubstringNode(value, startPosition, length, Boolean.FALSE);
	}
|
	/* CURDATE() is an escaped function supported by JCC 2.2 or higher */
	<CURDATE> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
|
	/* CURTIME() is an escaped function supported by JCC 2.2 or higher */
	<CURTIME> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
|
    /* CONCAT( string1, string2 )
     * CONCAT is not a reserved word.
     */
    <CONCAT> <LEFT_PAREN> str1 = additiveExpression(null,0,false) <COMMA> 
            str2 = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode(
                            C_NodeTypes.CONCATENATION_OPERATOR_NODE,
                            str1,
                            str2,
                            getContextManager());
    }
|
	/* Method versions of USER special registers
	 * are ODBC remnants.  Only supported
	 * when escaped.
	 */
	value = userNode() <LEFT_PAREN> <RIGHT_PAREN>
	{
		return value;
	}
|
    value = timestampArithmeticFuncion()
    {
        return value;
    }
}

/*
 * <A NAME="timestampArithmeticFuncion">timestampArithmeticFuncion</A>
 */
ValueNode
timestampArithmeticFuncion() throws StandardException :
{
    ValueNode intervalType;
    ValueNode tstamp1;
    ValueNode tstamp2;
    ValueNode count;
}
{
    <TIMESTAMPADD> <LEFT_PAREN> intervalType = jdbcIntervalType() <COMMA>
       count = additiveExpression(null,0,false) <COMMA>
       tstamp1 = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.TIMESTAMP_ADD_FN_NODE,
                                                tstamp1,
                                                intervalType,
                                                count,
                                                ReuseFactory.getInteger( TernaryOperatorNode.TIMESTAMPADD),
                                                null,
                                                getContextManager());
    }
|
    <TIMESTAMPDIFF> <LEFT_PAREN> intervalType = jdbcIntervalType() <COMMA>
       tstamp1 = additiveExpression(null,0,false) <COMMA>
       tstamp2 = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.TIMESTAMP_DIFF_FN_NODE,
                                                tstamp2,
                                                intervalType,
                                                tstamp1,
                                                ReuseFactory.getInteger( TernaryOperatorNode.TIMESTAMPDIFF),
                                                null,
                                                getContextManager());
    }
}       

/*
 * <A NAME="jdbcIntervalType">jdbcIntervalType</A>
 */
ValueNode jdbcIntervalType() throws StandardException :
{
}
{
    <SQL_TSI_FRAC_SECOND>
    {
        return getJdbcIntervalNode( DateTimeDataValue.FRAC_SECOND_INTERVAL);
    }
|
    <SQL_TSI_SECOND>
    {
        return getJdbcIntervalNode( DateTimeDataValue.SECOND_INTERVAL);
    }
|
    <SQL_TSI_MINUTE>
    {
        return getJdbcIntervalNode( DateTimeDataValue.MINUTE_INTERVAL);
    }
|
    <SQL_TSI_HOUR>
    {
        return getJdbcIntervalNode( DateTimeDataValue.HOUR_INTERVAL);
    }
|
    <SQL_TSI_DAY>
    {
        return getJdbcIntervalNode( DateTimeDataValue.DAY_INTERVAL);
    }
|
    <SQL_TSI_WEEK>
    {
        return getJdbcIntervalNode( DateTimeDataValue.WEEK_INTERVAL);
    }
|
    <SQL_TSI_MONTH>
    {
        return getJdbcIntervalNode( DateTimeDataValue.MONTH_INTERVAL);
    }
|
    <SQL_TSI_QUARTER>
    {
        return getJdbcIntervalNode( DateTimeDataValue.QUARTER_INTERVAL);
    }
|
    <SQL_TSI_YEAR>
    {
        return getJdbcIntervalNode( DateTimeDataValue.YEAR_INTERVAL);
    }
}

/*
 * <A NAME="numericValueFunction">numericValueFunction</A>
 */
ValueNode
numericValueFunction() throws StandardException :
{
	ValueNode	value;
	int			field;
}
{
    /*
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
     */

    <ABS>  value = absFunction()
    {
		return value;
    }
|
    <ABSVAL>  value = absFunction()
    {
		return value;
    }
|
    <SQRT> <LEFT_PAREN> value = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.SQRT_OPERATOR_NODE,
                value,
                getContextManager());
    }
|
	/* MOD(int, int)
	*/
	<MOD> value = modFunction()
	{
		return value;
	}
|
	<IDENTITY_VAL_LOCAL> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.IDENTITY_VAL_NODE,
						getContextManager());
	}
}

/*
 * <A NAME="coalesceFunction">coalesceFunction</A>
 */
ValueNode
coalesceFunction(String coalesceOrValue) throws StandardException :
{
    ValueNodeList expressionList = (ValueNodeList) nodeFactory.getNode(
	C_NodeTypes.VALUE_NODE_LIST,
	getContextManager());
}
{
    <LEFT_PAREN>
        coalesceExpression(expressionList)
		( <COMMA> coalesceExpression(expressionList) )* 
    <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.COALESCE_FUNCTION_NODE,
                coalesceOrValue,
                expressionList,
                getContextManager());
    }
}

/*
 * <A NAME="coalesceExpression">coalesceExpression</A>
 */
void
coalesceExpression(ValueNodeList expressionList) throws StandardException :
{
	ValueNode	expression;
}
{
	expression = additiveExpression(null,0,false)
	{
		expressionList.addElement(expression);
	}
}

/*
 * <A NAME="absFunction">absFunction</A>
 */
ValueNode
absFunction() throws StandardException :
{
    ValueNode value;
}
{
    <LEFT_PAREN> value = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.ABSOLUTE_OPERATOR_NODE,
                value,
                getContextManager());
    }
}
/*
 * <A NAME="modFunction">modFunction</A>
 */
ValueNode
modFunction() throws StandardException :
{
    ValueNode int1;
	ValueNode int2;
}
{
    <LEFT_PAREN> int1 = additiveExpression(null,0,false) <COMMA> 
            int2 = additiveExpression(null,0,false) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.MOD_OPERATOR_NODE,
                int1, int2,
                getContextManager());
    }
}

/*
 * <A NAME="datetimeField">datetimeField</A>
 */
int
datetimeField() :
{
	int field;
}
{
	field = nonSecondDatetimeField() 
	{
		return field;
	}
|
	<SECOND>
	{
		return DateTimeDataValue.SECOND_FIELD;
	}
}


ValueNode
characterValueFunction() throws StandardException :
{
	ValueNode 	value = null;
	ValueNode 	str1;
	ValueNode 	str2;
	Token		upperTok = null;
	Token		lowerTok = null;
	ValueNode	startPosition;
    ValueNode	length = null;
}
{
	<SUBSTR> <LEFT_PAREN> value = additiveExpression(null,0,false) <COMMA> startPosition = additiveExpression(null,0,false) [ <COMMA> length = additiveExpression(null,0,false) ] <RIGHT_PAREN>
	{
        return getSubstringNode( value, startPosition, length, Boolean.FALSE );
	}
|
	( upperTok = <UPPER> | lowerTok = <LOWER> ) <LEFT_PAREN> value = additiveExpression(null,0,false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_STRING_OPERATOR_NODE,
					value,
					(upperTok != null) ? "upper" : "lower",
					getContextManager());
	}
|
	( upperTok = <UCASE> | lowerTok = <LCASE> ) <LEFT_PAREN> value = additiveExpression(null,0,false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_STRING_OPERATOR_NODE,
					value,
					(upperTok != null) ? "upper" : "lower",
					getContextManager());
	}
|
	value = trimFunction()
	{
		return value;
	}
|
    /* LOCATE( string1, string2[, start] )
     * LOCATE is a SQLJ reserved word.
     */
    <LOCATE> <LEFT_PAREN> str1 = additiveExpression(null,0,false) <COMMA>
            str2 = additiveExpression(null,0,false)
            [ <COMMA> value = additiveExpression(null,0,false) ]
            <RIGHT_PAREN>
    {
		// if start is missing, start is equal to 1
        return (ValueNode) nodeFactory.getNode(
                            C_NodeTypes.LOCATE_FUNCTION_NODE,
                            str1,
                            str2,
                            (value == null) ? getNodeFactory().getNode(
                                        C_NodeTypes.INT_CONSTANT_NODE, 
                                        ReuseFactory.getInteger(1), 
                                        getContextManager() )
											: value,
                            ReuseFactory.getInteger(TernaryOperatorNode.LOCATE),
                            null,
                            getContextManager());
    }
}


ValueNode
trimFunction() throws StandardException :
{
	ValueNode	source;
	Integer		trimType;
}
{
	trimType = trimType() <LEFT_PAREN> source = additiveExpression(null,0,false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.TRIM_OPERATOR_NODE,
									source,
									source,
									null,
									ReuseFactory.getInteger(TernaryOperatorNode.TRIM),
									trimType,
									getContextManager());
	}
}
Integer
trimType() :
{
}
{
	<RTRIM>
	{
		return ReuseFactory.getInteger(StringDataValue.TRAILING);
	}
|
	<LTRIM>
	{
		return ReuseFactory.getInteger(StringDataValue.LEADING);
	}
}

/*
 * <A NAME="valueExpressionPrimary">valueExpressionPrimary</A>
 * 
 * @param inSelectClause will be true if this method got called while parsing the select or values clause
 * If in select or values clause, we do not want to allow boolean values.
 */
ValueNode
valueExpressionPrimary(boolean inSelectClause) throws StandardException :
{
	ValueNode	value;
	int			tokKind;
}
{
	/* This LOOKAHEAD is required to distinguish 
	 * a escapedValueFunction() from other escaped 
	 * clauses. The former always has an FN as its 
	 * second token.
	 */
	LOOKAHEAD( { escapedValueFunctionFollows() } )
	<LEFT_BRACE> <FN> value = escapedValueFunction() <RIGHT_BRACE>
	{
		return value;
	}
|
	LOOKAHEAD({getToken(2).kind == SCHEMA || getToken(2).kind == SQLID}) 
	<CURRENT> (<SCHEMA> | <SQLID>)
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_SCHEMA_NODE,
						getContextManager());
	}
|
	LOOKAHEAD({getToken(2).kind == ISOLATION}) 
	<CURRENT> <ISOLATION>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_ISOLATION_NODE,
						getContextManager());
	}
|
	/* Omitted "case_expression" */
	value = valueSpecification()
	{
		return value;
	}
|
	// This LOOKAHEAD is required to distinguish a newInvocation() from
	// an aggregateNode() and a columnReference(). It is necessary because
	// NEW is not a reserved word.
	LOOKAHEAD( { newInvocationFollows(1) } )
	value = newInvocation()
	{
		return value;
	}
|
	// This LOOKAHEAD is required to distinguish an aggregateNode from
	// miscBuiltins(). Both can start with an identifier.
	LOOKAHEAD( { aggregateFollows() } )
	value = aggregateNode()
	{
		return value;
	}
|
	// This LOOKAHEAD is required because both miscBuiltins() and
	// columnReference can start with an identifier()
	LOOKAHEAD( { miscBuiltinFollows() } )
	value = miscBuiltins()
	{
		return value;
	}
|
	value = columnReference()
	{
		return value;
	}
|
	<LEFT_PAREN>
	(
		// This LOOKAHEAD is required because a subquery can have
		// queryExpressions nested arbitrarily deep inside of parentheses,
		// so both subquery() and valueExpression() can start with
		// LEFT_PAREN. We disambiguate this case by only considering it
		// to be a subquery if it starts with SELECT or VALUES, which
		// are the first tokens to come after the LEFT_PAREN in a subquery.
		LOOKAHEAD( {getToken(1).kind == SELECT || getToken(1).kind == VALUES} )
		value = subquery(SubqueryNode.EXPRESSION_SUBQUERY, null)
		|
		/*
		** NOTE: The optional intervalQualfier() here makes sense only for
		** the MINUS operator.  We will have to add a semantic check that the
		** valueExpression() here is a MINUS operator if the intervalQualifier
		** is supplied.
		*/
		// without the following check, select/values (c1>c2) will not be caught
		LOOKAHEAD({inSelectClause})
		value = additiveExpression(null,0, inSelectClause)
		| //following will happen if we are not coming here for select/values clause
		value = valueExpression(inSelectClause)
	)
	<RIGHT_PAREN>
	{
		return value;
	}
|
	value = castSpecification()
	{
		return value;
	}
}

/*
 * <A NAME="miscBuiltins">miscBuiltins</A>
 */
ValueNode
miscBuiltins() throws StandardException :
{
	ValueNode value;
}
{
    /*
     * If you add rule to miscBuiltinsCore(), you must add the appropriate 
     *     LOOKAHEAD rule here.
     * SQRT and LOCATE are non-reserved keywords, so we need to disambiguate
     *     the grammar: "SQRT(" and "LOCATE(" introduce the SQRT and LOCATE
     *     built-in functions, not a static method invocation alias.
     */
    LOOKAHEAD( {
             ( (getToken(1).kind == GET_CURRENT_CONNECTION ||
                getToken(1).kind == ABS ||
                getToken(1).kind == ABSVAL ||
                getToken(1).kind == SQRT ||
                getToken(1).kind == MOD ||
                getToken(1).kind == COALESCE ||
                getToken(1).kind == VALUE ||
                getToken(1).kind == IDENTITY_VAL_LOCAL ||
                getToken(1).kind == SUBSTRING ||
                getToken(1).kind == SUBSTR ||
                getToken(1).kind == UPPER ||
                getToken(1).kind == LOWER ||
                getToken(1).kind == UCASE ||
                getToken(1).kind == LCASE ||
                getToken(1).kind == LTRIM ||
                getToken(1).kind == RTRIM ||
                getToken(1).kind == DATE ||
                getToken(1).kind == TIME ||
                getToken(1).kind == TIMESTAMP ||
		getToken(1).kind == DOUBLE ||
		getToken(1).kind == CHAR ||
		getToken(1).kind == VARCHAR ||
		getToken(1).kind == INTEGER ||
		getToken(1).kind == SMALLINT ||
		getToken(1).kind == LONGINT ||
                getToken(1).kind == YEAR ||
                getToken(1).kind == MONTH ||
                getToken(1).kind == DAY ||
                getToken(1).kind == HOUR ||
                getToken(1).kind == MINUTE ||
                getToken(1).kind == SECOND ||
                getToken(1).kind == LENGTH ||
                getToken(1).kind == LOCATE ||
                getToken(1).kind == XMLPARSE ||
                getToken(1).kind == XMLSERIALIZE ||
                getToken(1).kind == XMLEXISTS ) &&
              getToken(2).kind == LEFT_PAREN
              )
    } )
	/* miscBuiltins() are composed of the core
	 * system, string and numeric functions,
	 * date functions
	 * and static method calls.
	 */
	value = miscBuiltinsCore( false /* not JDBC escape */)
	{
		return value;
	}
|
	value = datetimeValueFunction()
	{
		return value;
	}
|	
	/* This is where we build a node for static method aliases */
	value = routineInvocation()
	{
		return value;
	}
}

ValueNode
miscBuiltinsCore( boolean isJDBCEscape) throws StandardException :
{
	ValueNode value;
}
{
	/* miscBuiltinsCore() are the core
	 * system, string and numeric functions.
	 * NOTE: date functions not currently considered
	 * core for purposes of the grammar since
	 * they can only be escaped when they appear
	 * as functions (not special registers).
     *
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
	 */

	<GET_CURRENT_CONNECTION> <LEFT_PAREN> <RIGHT_PAREN>
	{
		checkInternalFeature("GETCURRENTCONNECTION()");
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								nodeFactory.getNode(
									C_NodeTypes.GET_CURRENT_CONNECTION_NODE,
									getContextManager()),
								getContextManager());
	}
|
	value = numericValueFunction() 
	{
		return value;
	}
|
	value = characterValueFunction()
	{
		return value;
	}
|
	value = dataTypeScalarFunction()
	{
		return value;
	}
|
	<COALESCE>  value = coalesceFunction("COALESCE")
	{
		return value;
	}
|
	<VALUE>  value = coalesceFunction("VALUE")
	{
		return value;
	}
|
	<LENGTH> <LEFT_PAREN> value = additiveExpression(null,0, false) <RIGHT_PAREN>
	{
		ContextManager	localCM = getContextManager();
                if( isJDBCEscape)
                        return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CHAR_LENGTH_OPERATOR_NODE,
								(ValueNode) nodeFactory.getNode(
								        C_NodeTypes.TRIM_OPERATOR_NODE,
								        value,
										value,
										null,
								        ReuseFactory.getInteger(TernaryOperatorNode.TRIM),
								        ReuseFactory.getInteger(StringDataValue.TRAILING),
                                        localCM),
								localCM);
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.DB2_LENGTH_OPERATOR_NODE,
                                                        value,
                                                        localCM);
	}
|
	value = xmlFunction()
	{
		return value;
	}
}


/*
 * <A NAME="dataTypeScalarFunction">dataTypeScalarFunction</A>
 */
ValueNode
	dataTypeScalarFunction() throws StandardException :
{
	DataTypeDescriptor dts;
	ValueNode value;           //converted result
	ValueNode operand;
	int charType;
	int length = -1;
}
{
	//Note: When you add a new data type function, in addition to adding it 
	// here, you need to add it to miscBuiltins()
	value = dateTimeScalarFunction()
	{
		return value;
	}
	|
	 dts = numericFunctionType() <LEFT_PAREN> operand = additiveExpression(null,0, false) <RIGHT_PAREN>
	  {
			value = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CAST_NODE,
									operand,
									dts,
									getContextManager());
			((CastNode) value).setForDataTypeFunction(true);

			return value;
	  }
	 | charType = charOrVarchar() <LEFT_PAREN> operand = additiveExpression(null,0, false) [ <COMMA> length = length() ] <RIGHT_PAREN>
	{
		// Always check db2 limits for this function. It's new
		checkTypeLimits(charType,length);
		value = (ValueNode) nodeFactory.getNode(
												C_NodeTypes.CAST_NODE,
												operand,
												new Integer(charType),
												new Integer(length),
												getContextManager());

		((CastNode) value).setForDataTypeFunction(true);
		return value;
	}
}
	 
/*
 * <A NAME="xmlFunction">xmlFunction</A>
 *
 * This method parses the built-in functions used with
 * the XML datatype.
 *
 */
ValueNode
	xmlFunction() throws StandardException :
{
	ValueNode value;
	checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "XML");
}
{
	<XMLPARSE> <LEFT_PAREN>
		xmlDocOrContent() value = xmlParseValue() <RIGHT_PAREN>
	{
		return value;
	}
|
	<XMLSERIALIZE> <LEFT_PAREN> value = xmlSerializeValue() <RIGHT_PAREN>
	{
		return value;
	}
|
	<XMLEXISTS> <LEFT_PAREN> value = xmlExistsValue() <RIGHT_PAREN>
	{
		return value;
	}
}

/*
 * <A NAME="xmlParseValue">xmlParseValue</A>
 *
 * Syntax is as follows:
 *
 *     XMLPARSE( DOCUMENT <string-value-expression> PRESERVE WHITESPACE )
 *
 * The result of this operation will be an XML value, which can either
 * be used transiently or else can be stored persistently in a table that
 * has an XML column.  For example:
 *
 * ij> CREATE TABLE x_table (id INT, xdoc XML);
 * 0 rows inserted/updated/deleted
 * ij> INSERT INTO x_table VALUES (1, XMLPARSE(DOCUMENT '<simp> doc </simp>'
 * PRESERVE WHITESPACE));
 * 1 row inserted/updated/deleted
 *
 * We only allow XML documents (as opposed to XML content) to be
 * parsed into XML values.  Note that we require the "PRESERVE WHITESPACE"
 * keyword to be explicit; this is because the SQL/XML (2003) spec says that
 * if no whitespace option is given, the default is "STRIP WHITESPACE", which
 * we don't support (yet).
 *
 * By the time we get to this method, the "DOCUMENT" keyword has already
 * been parsed.
 *
 */
ValueNode
	xmlParseValue() throws StandardException :
{
	ValueNode value;
	boolean wsOption;
}
{
	value = additiveExpression(null,0,false) wsOption = xmlPreserveWhitespace() {
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.XML_PARSE_OPERATOR_NODE,
					value,
					ReuseFactory.getInteger(UnaryOperatorNode.XMLPARSE_OP),
					new Object[] {(wsOption ? Boolean.TRUE : Boolean.FALSE)},
					getContextManager());
	}
}

/*
 * <A NAME="xmlPreserveWhitespace">xmlPreserveWhitespace</A>
 *
 * For now, we only support the PRESERVE WHITESPACE option.
 *
 */
boolean
	xmlPreserveWhitespace() throws StandardException :
{
}
{
	LOOKAHEAD({ (getToken(1).kind != STRIP) &&
		(getToken(1).kind != PRESERVE) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "PRESERVE WHITESPACE");
	}
|
	<STRIP> <WHITESPACE>
	{ // don't preserve whitespace.
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "STRIP WHITESPACE");
	}
|
	<PRESERVE> <WHITESPACE>
	{ // must preserve whitespace.
		return true;
	}
}

/*
 * <A NAME="xmlSerializeValue">xmlSerializeValue</A>
 *
 * Syntax is as follows:
 *
 *   XMLSERIALIZE( <xml-value-expression> AS <string-data-type> )
 *
 * The result of this operation will be a string value with the type specified
 * by the user.  For example:
 *
 * ij> SELECT id, XMLSERIALIZE(xdoc AS varchar(30)) FROM x_table;
 * ID         |2
 * ------------------------------------------
 * 1          |<simp> doc </simp>
 *
 */
ValueNode
	xmlSerializeValue() throws StandardException :
{
	ValueNode value;
	DataTypeDescriptor targetType;
}
{
	value = additiveExpression(null,0,false)
		targetType = xmlSerializeTargetType()
	{
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.XML_SERIALIZE_OPERATOR_NODE,
					value,
					ReuseFactory.getInteger(UnaryOperatorNode.XMLSERIALIZE_OP),
					new Object[] {targetType},
					getContextManager());
	}
}

/*
 * <A NAME="xmlSerializeTargetType">xmlSerializeTargetType</A>
 *
 * Parse the target type of an XMLSERIALIZE operation.
 *
 */
DataTypeDescriptor xmlSerializeTargetType() throws StandardException :
{
	DataTypeDescriptor targetType;
}
{
	LOOKAHEAD({ (getToken(1).kind != AS) || (getToken(2).kind == RIGHT_PAREN) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "AS <string-type>");
	}
|
	<AS> targetType = dataTypeDDL()
	{
		return targetType;
	}
}

/*
 * <A NAME="xmlExistsValue">xmlExistsValue</A>
 *
 * Syntax is as follows:
 *
 *   XMLEXISTS( <xpath-expression> PASSING BY VALUE <xml-value-expression> )
 *
 * The result of this operation will be a boolean true/false/unknown value:
 *   -- Unknown if either <xpath-expression> or <xml-value-expression> is null;
 *   -- True if at least one node in the given xml-value matches the given
 *      XPath expression;
 *   -- False otherwise.
 *
 * For example:
 *
 * ij> SELECT id FROM x_table WHERE XMLEXISTS('/simple' PASSING BY VALUE xdoc);
 * ID
 * -----------
 * 1
 *
 */
ValueNode
	xmlExistsValue() throws StandardException :
{
	ValueNode xpathExpr;
	ValueNode xmlValue;
}
{
	xpathExpr = additiveExpression(null,0,false)
		xmlPassingMechanism() xmlValue = additiveExpression(null, 0, false)
	{
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.XML_EXISTS_OPERATOR_NODE,
					xpathExpr,
					xmlValue,
					ReuseFactory.getInteger(BinaryOperatorNode.XMLEXISTS_OP),
					getContextManager());
	}
}

/*
 * <A NAME="xmlPassingMechanism">xmlPassingMechanism</A>
 *
 * For now, we only support the BY VALUE option because,
 * at query time, we take the XML string value from disk and
 * pass it into Xalan, which creates a "copy" of the XML
 * value internally (as DOM/DTM) and then executes against
 * that.  Because Xalan creates this copy, this impl
 * is BY VALUE.
 *
 */
void
	xmlPassingMechanism() throws StandardException :
{
}
{
	LOOKAHEAD( { getToken(3).kind == REF })
	<PASSING> <BY> <REF>
	{ // pass the XML value by reference
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "BY REF");
	}
|
	<PASSING> <BY> <VALUE>
	{ // pass a 'copy' of the XML value.
		return;
	}
}

/*
 * <A NAME="numericFunctionType">numericFunctionType</A>
 */
DataTypeDescriptor
numericFunctionType() throws StandardException :

{
	DataTypeDescriptor dts;
}
{
	dts = doubleType()
	{
		return dts;
	}
	|
	dts = exactIntegerType()
	{
		return dts;
	}
}

/*
 * <A NAME="dateTimeScalarFunction">dateTimeScalarFunction</A>
 */
ValueNode
dateTimeScalarFunction() throws StandardException :
{
	ValueNode	value;
	ValueNode	timestampNode;
        int             field;
}
{
    /*
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
     */
        <TIME> <LEFT_PAREN> value = additiveExpression(null,0, false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CAST_NODE,
                                                        value,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIME),
                                                        getContextManager());
        }
|
        <DATE> <LEFT_PAREN> value = additiveExpression(null,0, false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                        value,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.DATE),
                                                        getContextManager());
        }
|
        <TIMESTAMP> <LEFT_PAREN> value = additiveExpression(null,0, false) timestampNode = timestampFunctionCompletion( value)
	{
                return timestampNode;
        }
|
        field = datetimeField() <LEFT_PAREN> value = additiveExpression(null,0, false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(field),
								value,
								getContextManager());
	}
}


/*
 * <A NAME="timestampFunctionCompletion">timestampFunctionCompletion</A>
 */
ValueNode
timestampFunctionCompletion( ValueNode firstArg) throws StandardException :
{
        ValueNode timeValue;
}
{
        <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                        firstArg,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIMESTAMP),
                                                        getContextManager());
        }
|
        <COMMA> timeValue = additiveExpression(null,0, false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.TIMESTAMP_OPERATOR_NODE,
                                                        firstArg,
                                                        timeValue,
                                                        getContextManager());
        }
}

/*
 * <A NAME="booleanLiteral">booleanLiteral</A>
 */
Token
booleanLiteral() :
{
	Token tok;
}
{
	tok = <TRUE>
	{
		return tok;
	}
|
	tok = <FALSE>
	{
		return tok;
	}
}

/*
 * <A NAME="generalValueSpecification">generalValueSpecification</A>
 */
ValueNode
generalValueSpecification() throws StandardException :
{
		ValueNode	parm;
}
{
	parm = dynamicParameterSpecification()
	{
		return parm;
	}
|
	parm = userNode()
	{
		return parm;
	}
}

ValueNode
userNode() throws StandardException :
{
}
{
	<USER>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.USER_NODE,
								getContextManager());
	}
|
	<CURRENT_USER>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_USER_NODE,
						getContextManager());
	}
|
	<SESSION_USER>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.SESSION_USER_NODE,
						getContextManager());
	}
}




/*
 * <A NAME="newInvocation">newInvocation</A>
 */
JavaToSQLValueNode
newInvocation() throws StandardException :
{
	QueryTreeNode	newNode;
	Vector	parameterList = new Vector();
	String	javaClassName;
}
{
	<NEW> javaClassName = javaClassName() methodCallParameterList(parameterList)
	{			
		if (!javaClassName.startsWith("org.apache.derby.diag.") && !javaClassName.startsWith("org.apache.derby.catalog.") && !javaClassName.startsWith("com.ibm.db2j."))
		{
			checkInternalFeature(javaClassName);
		}
		newNode =  nodeFactory.getNode(C_NodeTypes.NEW_INVOCATION_NODE,
									   javaClassName,
									   parameterList, 
									   lastTokenDelimitedIdentifier,
									   getContextManager());

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (JavaToSQLValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								newNode,
								getContextManager());
	}
}

/*
 * <A NAME="staticMethodInvocation">staticMethodInvocation</A>
 */
ValueNode
staticMethodInvocation(String javaClassName) throws StandardException :
{
	Vector	parameterList = new Vector();
	MethodCallNode	methodNode;
}
{
	methodNode = staticMethodName(javaClassName) methodCallParameterList(parameterList)
	{
		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
}

/**
 * <A NAME="methodCallParameterList">methodCallParameterList</A>
*/

void methodCallParameterList(Vector parameterList) throws StandardException :
{
}
{
	<LEFT_PAREN>
		[ methodParameter(parameterList)
			( <COMMA> methodParameter(parameterList) )* ]
	<RIGHT_PAREN>
}

/*
 * <A NAME="routineInvocation">routineInvocation</A>
 */
ValueNode
routineInvocation() throws StandardException :
{
	Vector	parameterList = new Vector();
	TableName	routineName;
	MethodCallNode	methodNode;
}
{
	routineName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		methodCallParameterList(parameterList)
	{

		methodNode = (MethodCallNode) nodeFactory.getNode(
								C_NodeTypes.STATIC_METHOD_CALL_NODE,
								routineName,
								null,
								getContextManager());

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
}

/*
 * <A NAME="javaClass">javaClass</A>
 */

String
javaClass() throws StandardException :
{
	String javaClassName;
}
{
	javaClassName = javaClassName() 
	{
		return javaClassName;
	}
}

/*
 * <A NAME="columnMethodInvocation">columnMethodInvocation</A>
 */
ValueNode
columnMethodInvocation() throws StandardException :
{
	ValueNode	columnReference;
	ValueNode	methodNode;
}
{
	columnReference = columnNameForInvocation()
	methodNode = nonStaticMethodInvocation(columnReference)
	{
		return methodNode;
	}
}

/*
 * <A NAME="columnNameForInvocation">columnNameForInvocation</A>
 */
ValueNode
columnNameForInvocation() throws StandardException :
{
	String firstName;
	String secondName = null;
	String thirdName = null;
	String		columnName = null;
	String		tableName = null;
	String		schemaName = null;
	TableName	tabName = null;
	ValueNode	retval;
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	[
		// This LOOKAHEAD is required because we have the following cases:
		// schema.table.column.method()
		// table.column.method()
		// column.method()
		//
		// We have to look ahead to ensure that there is at least one more
		// PERIOD after the current one, so that we don't consider the
		// method name to be a table or column name
		LOOKAHEAD( {
					getToken(1).kind == PERIOD &&
					getToken(3).kind == PERIOD
				} )
		<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[
			// See above: we don't want to mistake the method name for a
			// column name.
			LOOKAHEAD( {
						getToken(1).kind == PERIOD &&
						getToken(3).kind == PERIOD
					} )
			<PERIOD> thirdName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		]
	]
	{
		// Figure out what each identifier stands for
		if (thirdName == null)
		{
			if (secondName == null)
			{
				// There's only one identifier, so it must be a column name
				columnName = firstName;
			}
			else
			{
				// There are two identifiers, so they are table and column names
				tableName = firstName;
				columnName = secondName;
			}
		}
		else
		{
			// There are three identifiers,
			// so they are schema, table, and column names
			schemaName = firstName;
			tableName = secondName;
			columnName = thirdName;
		}

		if (tableName != null)
		{
			// There is a table name, so get a TableName node
			tabName =
				(TableName) nodeFactory.getNode(
							C_NodeTypes.TABLE_NAME,
							schemaName,
							tableName,
							new Integer(nextToLastIdentifierToken.beginOffset),
							new Integer(nextToLastIdentifierToken.endOffset),
							getContextManager());
		}

		// Get the column reference
		retval = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.COLUMN_REFERENCE,
									columnName,
									tabName,
									new Integer(lastIdentifierToken.beginOffset),
									new Integer(lastIdentifierToken.endOffset),
									getContextManager());

		return retval;
	}
}

/*
 * <A NAME="columnReference">columnReference</A>
 */
ColumnReference
columnReference() throws StandardException :
{
	String		firstName;
	String		secondName = null;
	String		thirdName = null;
	String		columnName = null;
	String		tableName = null;
	String		schemaName = null;
	TableName	tabName = null;
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
	[
		// This LOOKAHEAD is needed to ensure that, if the identifier
		// after the PERIOD is a method name , we
		// don't treat it as part of the column reference.
		LOOKAHEAD( {
					getToken(1).kind == PERIOD &&
					getToken(3).kind != LEFT_PAREN
				} )
		<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
		[
			// This LOOKAHEAD is needed to ensure that, if the identifier
			// after the PERIOD is a method name , we
			// don't treat it as part of the column reference.
			LOOKAHEAD( {
						getToken(1).kind == PERIOD &&
						getToken(3).kind != LEFT_PAREN
					} )
			<PERIOD> thirdName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
		]
	]
	{
		// Figure out what each name stands for
		if (thirdName == null)
		{
			if (secondName == null)
			{
				// Only one name, must be column name
				columnName = firstName;
			}
			else
			{
				// Two names: table.column
				tableName = firstName;
				columnName = secondName;
			}
		}
		else
		{
			// Three names: schema.table.column
			schemaName = firstName;
			tableName = secondName;
			columnName = thirdName;
		}

		checkIdentifierLengthLimit(columnName, Limits.MAX_IDENTIFIER_LENGTH);
		if (schemaName != null)
			checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);
		if (tableName != null)
			checkIdentifierLengthLimit(tableName, Limits.MAX_IDENTIFIER_LENGTH);

		if (tableName != null)
		{
			tabName = (TableName) nodeFactory.getNode(
							C_NodeTypes.TABLE_NAME,
							schemaName,
							tableName,
							new Integer(nextToLastIdentifierToken.beginOffset),
							new Integer(nextToLastIdentifierToken.endOffset),
							getContextManager());
		}

		return (ColumnReference) nodeFactory.getNode(
								C_NodeTypes.COLUMN_REFERENCE,
								columnName,
								tabName,
								new Integer(lastIdentifierToken.beginOffset),
								new Integer(lastIdentifierToken.endOffset),
								getContextManager());
	}
}

/*
void
columnReference() throws StandardException :
{}
{
	/*
	**
	** I re-wrote the above rule because it caused a grammar ambiguitity.
	** The problem is that we are parsing a dot-separated list of identifiers,
	** and the grammar doesn't know what the identifiers stand for, but the
	** syntax assumed that it did.  For example, in schema.table.column,
	** the grammar doesn't know when it parses the first identifier whether
	** it will be a catalog name, schema name, table name, or column name.
	**
	** I think this problem could be solved by increasing the lookahead.
	** I will try that solution next.  I like that solution better because,
	** if it works, it will be easier for the grammar to figure out what
	** each identifier stands for.
	**

	[ <MODULE> <PERIOD> <IDENTIFIER> |
	  [ [ [ <IDENTIFIER> <PERIOD> ] <IDENTIFIER> <PERIOD> ] <IDENTIFIER> <PERIOD> ]
	]
	<IDENTIFIER>
}
*/

OrderByList
orderByClause() throws StandardException :
{
	OrderByList orderCols;
}
{
	<ORDER> <BY> orderCols = sortSpecificationList()
	{
		return orderCols;
	}
}

int
atIsolationLevel() throws StandardException :
{
	int isolationLevel;
}
{
	<WITH> isolationLevel = isolationLevelDB2Abbrev()
	{
		return isolationLevel;
	}

}

OrderByList
sortSpecificationList() throws StandardException :
{ 
	OrderByList orderCols = (OrderByList) nodeFactory.getNode(
											C_NodeTypes.ORDER_BY_LIST,
											getContextManager()); 
}
{
	sortSpecification(orderCols) ( <COMMA> sortSpecification(orderCols) ) *
	{
		return orderCols;
	}
}

void
sortSpecification(OrderByList orderCols) throws StandardException :
{	OrderByColumn orderCol; }
{
	orderCol = sortKey() /* [ collateClause() ] */ [ orderingSpecification(orderCol) ]
	{
		orderCols.addOrderByColumn(orderCol);
	} 
}

OrderByColumn
sortKey() throws StandardException :
{
	ValueNode columnExpression;
} 
{
	columnExpression = additiveExpression(null,0,true)
	{
		return (OrderByColumn) nodeFactory.getNode(
								C_NodeTypes.ORDER_BY_COLUMN,
								columnExpression,
								getContextManager());
	}
}



void
orderingSpecification(OrderByColumn orderCol) :
{}
{
	<ASC> 
|
	<DESC>
	{
		orderCol.setDescending();
	}
}

/*
 * <A NAME="forUpdateClause">forUpdateClause</A>
 */
int
forUpdateClause(Vector columnList) throws StandardException :
{
	int	retval;
}
{
	<UPDATE> [ <OF> forUpdateColumnList(columnList) ]
	{
		return CursorNode.UPDATE;
	}
|
	<READ> <ONLY>
	{
		return CursorNode.READ_ONLY;
	}
|
	<FETCH> <ONLY>
	{
		return CursorNode.READ_ONLY;
	}
}

/*
 * <A NAME="forUpdateColumnList">forUpdateColumnList</A>
 */
void
forUpdateColumnList(Vector columnList) throws StandardException :
{
}
{
	forUpdateColumn(columnList) ( <COMMA> forUpdateColumn(columnList) ) *
}

/*
 * <A NAME="forUpdateColumn">forUpdateColumn</A>
 */
void
forUpdateColumn(Vector columnList) throws StandardException :
{
	String		 columnName;
}
{
	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		columnList.addElement(columnName);
	}
}

/*
 * <A NAME="setClauseList">setClauseList</A>
 */
ResultColumnList
setClauseList() throws StandardException :
{
	ResultColumnList	columnList = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
}
{
	setClause(columnList) ( <COMMA> setClause(columnList) ) *
	{
		return columnList;
	}
}

/*
 * <A NAME="setClause">setClause</A>
 */
void
setClause(ResultColumnList columnList) throws StandardException :
{
	ResultColumn resultColumn;
	ColumnReference	 columnName;
	ValueNode	 valueNode;
}
{
	/* identifier() used to be objectColumn() */
	/*
		SQL92 only wants identifiers here (column names)
		but JBuilder expects table.column, so we allow the
		general form.
	 */
	columnName = columnReference() <EQUALS_OPERATOR> valueNode = updateSource(columnName.getColumnName())
	{
		resultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN,
										columnName,
										valueNode,
										getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="updateSource">updateSource</A>
 */
ValueNode
updateSource(String columnName) throws StandardException :
{
	ValueNode	valueNode;
}
{
	valueNode = additiveExpression(null,0, false) 
	{
		return valueNode;
	}
|
	valueNode = nullSpecification() 
	{
		return valueNode;
	}
|
	<_DEFAULT>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								columnName,
								getContextManager());
	}
}

/*
 * <A NAME="nullSpecification">nullSpecification</A>
 */
ValueNode
nullSpecification() throws StandardException :
{}
{
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
}


/*
 * <A NAME="insertColumnsAndSource">insertColumnsAndSource</A>
 */
QueryTreeNode
insertColumnsAndSource(QueryTreeNode targetTable) 
	throws StandardException :
{
	Properties			targetProperties = null;
	ResultSetNode	queryExpression;
	ResultColumnList	columnList = null;
}
{
	[
		// This LOOKAHEAD is required because a query expression can
		// be a SELECT or VALUES nested arbitrarily deep in parentheses
		// (which looks like a subquery). So, to be sure that a left
		// parenthesis introduces an insertColumnList(), we have to
		// be sure it doesn't introduce a subquery.
		LOOKAHEAD( { getToken(1).kind == LEFT_PAREN && ! subqueryFollows() } )
		<LEFT_PAREN> columnList = insertColumnList() <RIGHT_PAREN>
	]
	[ targetProperties = propertyList() ]
	queryExpression = queryExpression(null, NO_SET_OP)
	{
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.INSERT_NODE,
							targetTable,
							columnList,
							queryExpression,
							targetProperties,
							getContextManager());
	}
	/* RESOLVE: Ignoring default values for now
|
	[ targetProperties = propertyList() ]
	<_DEFAULT> <VALUES>
	{
		return null;
	}
	*/
}

/*
 * <A NAME="insertColumnList">insertColumnList</A>
 */
ResultColumnList
insertColumnList() throws StandardException :
{
	ResultColumnList	columnList = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
}
{
	columnQualifiedNameList(columnList)
	{
		return columnList;
	}
}

/*
 * <A NAME="columnQualifiedNameList">columnQualifiedNameList</A>
 */
void
columnQualifiedNameList(ResultColumnList columnList) throws StandardException :
{}
{
	columnQualifiedNameItem(columnList) ( <COMMA> columnQualifiedNameItem(columnList) ) *
}

/*
 * <A NAME="columnQualifiedNameItem">columnQualifiedNameItem</A>
 */
void
columnQualifiedNameItem(ResultColumnList columnList) throws StandardException :
{
	ColumnReference		columnRef;
	ResultColumn	resultColumn;
}
{
	/*
		SQL92 only wants identifiers here (column names)
		but JBuilder expects table.column, so we allow the
		general form.
	 */
	columnRef = columnReference()
	{
		/*
		** Store the column names for the result columns in the
		** result column list.  We don't know yet what valueNodes
		** should be hooked up to each result column, so set that
		** to null for now.
		*/
		resultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN,
										columnRef,
										null,
										getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="rowValueConstructor">rowValueConstructor</A>
 */
ResultSetNode
rowValueConstructor(ResultSetNode leftRSN) throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
	ResultSetNode		newRSN;
}
{
	// This LOOKAHEAD is required because a rowValueConstructorList is
	// nested in parentheses, and each element of the list can also be
	// nested in an arbitrary number of parentheses.
	LOOKAHEAD( { rowValueConstructorListFollows() } )
	<LEFT_PAREN> rowValueConstructorList(resultColumns) <RIGHT_PAREN>
	{
		/* If leftRSN is null, simply return the newRSN, else generate and
		 * return a UNION ALL above the 2 RSNs, after verifying that the size()
		 * of both RSNs RCLs is the same.
		 */
		newRSN = (ResultSetNode) nodeFactory.getNode(
								C_NodeTypes.ROW_RESULT_SET_NODE,
								resultColumns,
								null,
								getContextManager());
		if (leftRSN != null)
		{
			if (leftRSN.getResultColumns().size() !=
				newRSN.getResultColumns().size())
			{
				throw StandardException.newException(SQLState.LANG_ROW_VALUE_CONSTRUCTOR_UNMATCHED_COLUMNS);
			}

			newRSN = (ResultSetNode) nodeFactory.getNode(	
									C_NodeTypes.UNION_NODE,
									leftRSN,
									newRSN,
									Boolean.TRUE,
									Boolean.TRUE,
									null,
									getContextManager());
		}
		return newRSN;
		
	}
|
	rowValueConstructorElement(resultColumns)
	{
		/* If leftRSN is null, simply return the newRSN, else generate and
		 * return a UNION ALL above the 2 RSNs, after verifying that the size()
		 * of both RSNs RCLs is the same.
		 */
		newRSN = (ResultSetNode) nodeFactory.getNode(
								C_NodeTypes.ROW_RESULT_SET_NODE,
								resultColumns,
								null,
								getContextManager());
		if (leftRSN != null)
		{
			if (leftRSN.getResultColumns().size() !=
				newRSN.getResultColumns().size())
			{
				throw StandardException.newException(SQLState.LANG_ROW_VALUE_CONSTRUCTOR_UNMATCHED_COLUMNS);
			}

			newRSN = (ResultSetNode) nodeFactory.getNode(
									C_NodeTypes.UNION_NODE,
									leftRSN,
									newRSN,
									Boolean.TRUE,
									Boolean.TRUE,
									null,
									getContextManager());
		}
		return newRSN;
	}
}

/*
 * <A NAME="rowValueConstructorElement">rowValueConstructorElement</A>
 */
void
rowValueConstructorElement(ResultColumnList resultColumns) throws StandardException :
{
	ValueNode	value;
}
{
	value = additiveExpression(null, 0, true)
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							value,
							getContextManager())
				);
	}
|
	value = nullSpecification()
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							value,
							getContextManager())
				);
	}
|
	<_DEFAULT>
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							(ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								null,
								getContextManager()),
							getContextManager())
				);
	}
|
	{
		throw StandardException.newException(SQLState.LANG_EMPTY_VALUES_CLAUSE);
	}
}

/*
 * <A NAME="rowValueConstructorList">rowValueConstructorList</A>
 */
void
rowValueConstructorList(ResultColumnList resultColumns) throws StandardException :
{}
{
	rowValueConstructorElement(resultColumns)
		( <COMMA> rowValueConstructorElement(resultColumns) ) *
}


/*
 * <A NAME="tableSubquery">tableSubquery</A>
 */
SubqueryNode
tableSubquery(int subqueryType, ValueNode leftOperand) throws StandardException :
{
	SubqueryNode	subqueryNode;
}
{
	subqueryNode = subquery(subqueryType, leftOperand)
	{
		return subqueryNode;
	}
}


/*
 * <A NAME="subquery">subquery</A>
 */
SubqueryNode
subquery(int subqueryType, ValueNode leftOperand) throws StandardException :
{
	ResultSetNode	queryExpression;
	SubqueryNode	subqueryNode;
}
{
	queryExpression = queryExpression(null, NO_SET_OP)
	{
		subqueryNode = (SubqueryNode) nodeFactory.getNode(
										C_NodeTypes.SUBQUERY_NODE,
										queryExpression, 
										ReuseFactory.getInteger(subqueryType),
										leftOperand,
										getContextManager());
		return subqueryNode;
	}
}

/*
 * <A NAME="inPredicateValue">inPredicateValue</A>
 */
ValueNode
inPredicateValue(ValueNode leftOperand) throws StandardException :
{
	ValueNode		retval;
	int				tokKind;
}
{
	<LEFT_PAREN>
	(
		// This LOOKAHEAD is necessary because both a subquery and an
		// inValueList can be nested arbitrarily deep in parentheses,
		// so both can start with LEFT_PAREN. To disambiguate, we only
		// consider it a subquery if the first token that comes after
		// all the LEFT_PARENS is either a SELECT or a VALUES.
		LOOKAHEAD( { subqueryFollows() } )
		retval = tableSubquery(SubqueryNode.IN_SUBQUERY, leftOperand)
	|
		retval = inValueList(leftOperand)
	)
	<RIGHT_PAREN>
	{
		return retval;
	}
}

/*
 * <A NAME="inValueList">inValueList</A>
 */
ValueNode
inValueList(ValueNode leftOperand) throws StandardException:
{
	ValueNodeList	inList = (ValueNodeList) nodeFactory.getNode(
											C_NodeTypes.VALUE_NODE_LIST,
											getContextManager());
}
{
	inElement(inList) ( <COMMA> inElement(inList) ) *
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.IN_LIST_OPERATOR_NODE,
								leftOperand,
								inList,
								getContextManager());
	}
}

/*
 * <A NAME="inElement">inElement</A>
 */
void
inElement(ValueNodeList inList) throws StandardException :
{
	ValueNode valueNode;
}
{
	valueNode = additiveExpression(null, 0, false)
	{
		inList.addElement(valueNode);
	}
}


/*
 * <A NAME="quantifier">quantifier</A>
 */
int
quantifier(int opType) throws StandardException :
{
	int retval = 0;
}
{
	<ALL> 
	{
		switch (opType)
		{
			case BinaryOperatorNode.EQ:
				retval = SubqueryNode.EQ_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.NE:
				retval = SubqueryNode.NE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.LE:
				retval = SubqueryNode.LE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.LT:
				retval = SubqueryNode.LT_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.GE:
				retval = SubqueryNode.GE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.GT:
				retval = SubqueryNode.GT_ALL_SUBQUERY;
				break;

			default:
				if (SanityManager.DEBUG)
				SanityManager.THROWASSERT(
						"Invalid value for opType (" + opType +
						") passed to quantifier()");
		}
		return retval;
	}
|
	some()
	{
		switch (opType)
		{
			case BinaryOperatorNode.EQ:
				retval = SubqueryNode.EQ_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.NE:
				retval = SubqueryNode.NE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.LE:
				retval = SubqueryNode.LE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.LT:
				retval = SubqueryNode.LT_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.GE:
				retval = SubqueryNode.GE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.GT:
				retval = SubqueryNode.GT_ANY_SUBQUERY;
				break;

			default:
				if (SanityManager.DEBUG)
				SanityManager.THROWASSERT(
						"Invalid value for opType (" + opType +
						") passed to quantifier()");
		}
		return retval;
	}
}

/*
 * <A NAME="some">some</A>
 */
void
some() throws StandardException :
{}
{
	<SOME> |
	<ANY>
}

/*
 * <A NAME="existsExpression">existsExpression</A>
 */
SubqueryNode
existsExpression() throws StandardException :
{
	SubqueryNode	subqueryNode;
}
{
	<EXISTS> <LEFT_PAREN>
	subqueryNode = tableSubquery(SubqueryNode.EXISTS_SUBQUERY, null)
	<RIGHT_PAREN>
	{
		return subqueryNode;
	}
}

/*
 * <A NAME="tableExpression">tableExpression</A>
 */
SelectNode
tableExpression(ResultColumnList selectList) throws StandardException :
{
	SelectNode	selectNode;
	FromList	fromList;
	ValueNode	whereClause = null;
	GroupByList	groupByList = null;
	ValueNode	havingClause = null;
	Token		whereToken;
}
{
	fromList = fromClause()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	[ groupByList = groupByClause() ]
	[ havingClause = havingClause() ]
	{
		selectNode = (SelectNode) nodeFactory.getNode(
							C_NodeTypes.SELECT_NODE,
							selectList,
							null, 		/* AGGREGATE list */
							fromList,
							whereClause,
							groupByList,
							getContextManager());

		/* A SELECT with a GROUP BY or HAVING clause is the one instance where the
		 * parser will generate a tree that does not exactly match the query.
		 * The resulting tree is an outer SelectNode with the HAVING clause
		 * as its WHERE clause and a FromList containing a single FromSubquery -
		 * the user SELECT, minus the HAVING clause.
		 * The outer SELECT gets a SELECT *.
		 * The FromSubquery will have a null name, something that the user cannot do,
		 * to enable the binding of any correlated columns in the HAVING clause.
		 */
		if (groupByList != null || havingClause != null)
		{
			FromSubquery		fromSubquery;
			ResultColumnList	outerRCL =
										(ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());

			/* Wrap the user SELECT in a FromSubquery */
			fromList = (FromList) nodeFactory.getNode(
									C_NodeTypes.FROM_LIST,
									getNodeFactory().doJoinOrderOptimization(),
									getContextManager());
			fromSubquery = (FromSubquery) nodeFactory.getNode(
													C_NodeTypes.FROM_SUBQUERY,
													selectNode, 
													null,
													null,
													null,
													getContextManager());
			fromList.addElement(fromSubquery);

			/* Pull any aggregates out of the HAVING clause and append them to 
			 * SELECT list in the user's select, replacing the aggregates in
			 * the HAVING clause with ColumnReferences to the aggregate.
			 * Do NOT replace anything below a ResultSetNode.  This means that
			 * we'll replace
			 * 		FROM x HAVING max(x.x) > 2
			 * but not
			 *		FROM x HAVING x.x = (select max(y.y) from y)
			 * Aggregates under a SELECT are all fixed up correctly
			 * later, but here we need to get the aggregates that
			 * aren't under result sets.
			 *
			 * Appended ResultColumns marked as generated so the wrapper
			 * select won't see them when the * is expanded.
			 *
			 * RESOLVE - someday we should try to find matching aggregates
			 * instead of just adding them.
             *
             * NOTE: This rewriting of the query tree makes the handling of an ORDER BY
             * clause difficult. See OrderByColumn.pullUpOrderByColumn. It makes specific
             * assumptions about the structure of the generated query tree. Do not make
             * any changes to this transformation without carefully considering the
             * OrderByColumn pullUpOrderByColumn and bindOrderByColumn methods.
			 */
			if (havingClause != null)
			{
				ReplaceAggregatesWithCRVisitor visitor = 
					new ReplaceAggregatesWithCRVisitor(selectList, ResultSetNode.class);
				havingClause = (ValueNode)havingClause.accept(visitor);
				
				// fix for HAVING without GROUP BY, makes sure we get one
				// aggregate operator by adding a count(*), this fixes beetle 5853, 5890
				if (groupByList == null) {
					ValueNode vn = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								null,
								org.apache.derby.impl.sql.compile.CountAggregateDefinition.class,
								Boolean.FALSE, // distinct Boolean.TRUE?
								"COUNT(*)",
								getContextManager());
					AggregateNode n = (AggregateNode) vn;
					n.replaceAggregatesWithColumnReferences(selectList, 0);
				}
			}

			outerRCL.addResultColumn((ResultColumn) nodeFactory.getNode(
												C_NodeTypes.ALL_RESULT_COLUMN,
												null,
												getContextManager()));
			// wrap another selectNode on the outside of the subquery
			selectNode = (SelectNode) nodeFactory.getNode(
										C_NodeTypes.SELECT_NODE,
										outerRCL,	/* SELECT * from user SELECT */
										null, 		/* AGGREGATE list */
										fromList,
										havingClause,
										null,		/* GROUP BY list */
										getContextManager());

			/* Mark the wrapping FromSubquery and SelectNode as appropriate */
			if (groupByList != null)
			{
				fromSubquery.markAsForGroupByClause();
				selectNode.markAsForGroupByClause();
			}
			if (havingClause != null)
			{
				fromSubquery.markAsForHavingClause();
				selectNode.markAsForHavingClause();
			}
		}
		return selectNode;
	}
}

/*
 * <A NAME="fromClause">fromClause</A>
 */
FromList
fromClause() throws StandardException :
{
	FromList fromList = (FromList) nodeFactory.getNode(
									C_NodeTypes.FROM_LIST,
									getNodeFactory().doJoinOrderOptimization(),
									getContextManager());
	int	tokKind;
        Token   beginToken;
        Token   endToken;
}
{
	<FROM> {beginToken = getToken(1);}
	[
		// This LOOKAHEAD is required because PROPERTIES is not a reserved
		// word, so we have to look ahead to see if it looks like a real
		// properties clause. A properties clause is the word "properties"
		// followed by a dot-separated list, followed by an =, followed by
		// a value. This means that the first token must be the word
		// "properties", and the third must be a period (from the dot-separated
		// list) or an =.
		LOOKAHEAD( { propertyListFollows() } )
		fromListProperties(fromList)
	]
	dummyTableReferenceRule(fromList)
			( <COMMA> dummyTableReferenceRule(fromList) ) * {endToken = getToken(0);}

	{
                fromList.setBeginOffset( beginToken.beginOffset);
                fromList.setEndOffset( endToken.endOffset);
		return fromList;
	}
}

/*
 * <A NAME="fromListProperties">fromListProperties</A>
 */
void
fromListProperties(FromList fromList) throws StandardException :
{
	Properties properties;
}
{
	properties = propertyList()
	{
		fromList.setProperties(properties);
	}
}

/* This rule created simply as a way to add the result of tableReference()
 * to the fromList.
 */
void
dummyTableReferenceRule(FromList fromList) throws StandardException :
{
	FromTable tableReference;
}
{
	<TABLE>
	LOOKAHEAD( {
				getToken(1).kind == LEFT_PAREN &&
				(
					getToken(2).kind == SELECT ||
					getToken(2).kind == VALUES
				)
			} )
	tableReference = tableReferenceTypes(false)
	{
		fromList.addFromTable(tableReference);
	}
|
	tableReference = tableReferenceTypes(false)
	{
		fromList.addFromTable(tableReference);
	}
}

FromTable
tableReferenceTypes(boolean nestedInParens) throws StandardException :
{
	FromTable tableReference;
}
{
	tableReference = tableReference(nestedInParens)
	{
		return tableReference ;
	}
|
	<LEFT_BRACE> <OJ> tableReference = tableReference(nestedInParens) <RIGHT_BRACE>
	{
		return tableReference;
	}
}

Object[]
optionalTableClauses() throws StandardException :
{
	Object[]			 otc = null;
	Properties			tableProperties = null;
	ResultColumnList	derivedRCL = null;
	String				correlationName = null;
}
{
	// This LOOKAHEAD is required because PROPERTIES is not a reserved
	// word, so we have to look ahead to see if it looks like a real
	// properties clause. A properties clause is the word "properties"
	// followed by a dot-separated list, followed by an =, followed by
	// a value. This means that the first token must be the word
	// "properties", and the third must be a period (from the dot-separated
	// list) or an =.
	LOOKAHEAD( { propertyListFollows() } )
	otc = optionalTableProperties() 
	{
		otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;
		otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;
		return otc;
	}
|
	[ [ <AS> ] 
		correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ] 
	    [tableProperties = propertyList() ] ]
	{
		otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
		otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;
		otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;
		otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;
		return otc;
	}
}

Object[]
optionalTableProperties() throws StandardException :
{
	Object[]			otc = null;
	Properties			tableProperties = null;
}
{
	tableProperties = propertyList() 
	{
		otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
		otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;
		return otc;
	}
}

/*
 * <A NAME="tableReference">tableReference</A>
 */
FromTable
tableReference(boolean nestedInParens) throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	TableName			tableName;
	String				correlationName = null;
	ResultColumnList	derivedRCL = null;
	FromTable			fromTable;
	TableOperatorNode	joinTable = null;
	FromTable			tableReference;
	Object[]			optionalTableClauses = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
	Properties			tableProperties = null;
	ResultSetNode		derivedTable;
}
{
	/* NOTE: this rule has to come first in order to avoid making NEW
	 * a reserved word.
	 */
	/* identifier() used to be correlationName() */
	LOOKAHEAD( { newInvocationFollows(1) } )
	javaToSQLNode = newInvocation() [ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]
		[ optionalTableClauses = optionalTableProperties() ]
		(LOOKAHEAD( { joinedTableExpressionFollows() } )
		 joinTable = joinedTableExpression(
									(joinTable != null) ?
										joinTable :
										(FromTable) nodeFactory.getNode(
											C_NodeTypes.FROM_VTI,
											javaToSQLNode.getJavaValueNode(), 
											correlationName,
											derivedRCL, 
											((optionalTableClauses != null) ? 
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
												(Properties) null),
											getContextManager()),
									nestedInParens)) *
	{
		/* Build a derived table if not a join expression */
		if (joinTable == null)
		{
			fromTable = (FromTable) nodeFactory.getNode(
								C_NodeTypes.FROM_VTI,
								javaToSQLNode.getJavaValueNode(), 
								correlationName,
								derivedRCL, 
								((optionalTableClauses != null) ? 
									(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
									(Properties) null),
								getContextManager()); 
		}
		else
		{
			fromTable = joinTable;
		}

		return fromTable;
	}
|
	/* identifier() used to be correlationName() */
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
		optionalTableClauses = optionalTableClauses()
		(LOOKAHEAD( { joinedTableExpressionFollows() } )
		 joinTable = joinedTableExpression(
									(joinTable != null) ?
										joinTable :
										(FromTable) nodeFactory.getNode(
												C_NodeTypes.FROM_BASE_TABLE,
												tableName,
												(String) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME],
												(ResultColumnList) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL],
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES],
												getContextManager()), 
									nestedInParens)) *
	{
		/* Build a from table if not a join expression */
		if (joinTable == null)
		{
			fromTable = (FromTable) nodeFactory.getNode(
											C_NodeTypes.FROM_BASE_TABLE,
											tableName,
												(String) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME],
												(ResultColumnList) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL],
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES],
											getContextManager());
		}
		else
		{		   
			fromTable = joinTable;
		}
		return fromTable;
	}
|
	// There is a grammar ambiguity with nested parentheses here.
	// A series of left parentheses could introduce either a table
	// reference or a derived table.  For example:
	//
	//		(((select c from t) a inner join (select d from s) b ))
	//
	// and:
	//
	//		(((select c from t) a)))
	//
	// To distinguish these two cases, we consider anything that starts
	// with a single parenthesis and either SELECT or VALUES to be
	// a derived table, and anything else to be a table reference.
	// Note that we can't use the subqueryFollows() lookahead method,
	// because it skips over all leading left parentheses to decide
	// whether a subquery follows.
	LOOKAHEAD( {
				getToken(1).kind == LEFT_PAREN &&
				(
					getToken(2).kind == SELECT ||
					getToken(2).kind == VALUES
				)
			} )
	derivedTable = derivedTable() [ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]
		[ optionalTableClauses = optionalTableProperties() ]
		( LOOKAHEAD( { joinedTableExpressionFollows() } )
		  joinTable = joinedTableExpression(
									(joinTable != null) ?
										joinTable :
										(FromTable) nodeFactory.getNode(
													C_NodeTypes.FROM_SUBQUERY,
													derivedTable, 
													correlationName,
													derivedRCL,
													((optionalTableClauses != null) ?
														(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
														(Properties) null),
													getContextManager()),
									nestedInParens)) *
	{
		/* Build a derived table if not a join expression */
		if (joinTable == null)
		{
			fromTable = (FromTable) nodeFactory.getNode(
											C_NodeTypes.FROM_SUBQUERY,
											derivedTable, 
											correlationName,
											derivedRCL,
											((optionalTableClauses != null) ?
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
												(Properties) null),
											getContextManager()); 
		}
		else
		{
			fromTable = joinTable;
		}

		return fromTable;
	}
|
	<LEFT_PAREN> tableReference = tableReferenceTypes(true) <RIGHT_PAREN>
		( LOOKAHEAD( { joinedTableExpressionFollows() } )
		  joinTable = joinedTableExpression(
									(joinTable != null) ?
										joinTable :
										tableReference,
									nestedInParens)) *
	{
		if (joinTable == null)
		{
			fromTable = tableReference; 
		}
		else
		{
			fromTable = joinTable;
		}

		return fromTable;
	}
}

/*
 * <A NAME="derivedColumnList">derivedColumnList</A>
 */
ResultColumnList
derivedColumnList() throws StandardException :
{
	ResultColumnList	resultColumns =
									(ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

/*
 * <A NAME="columnNameList">columnNameList</A>
 */
void
columnNameList(ResultColumnList columnList) throws StandardException :
{}
{
	columnNameItem(columnList) ( <COMMA> columnNameItem(columnList) ) *
}

/*
 * <A NAME="columnNameItem">columnNameItem</A>
 */
void
columnNameItem(ResultColumnList columnList) throws StandardException :
{
	String		columnName;
	ResultColumn	resultColumn;
}
{
	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		/*
		** Store the column names for the result columns in the
		** result column list.  We don't know yet what valueNodes
		** should be hooked up to each result column, so set that
		** to null for now.
		*/
		resultColumn = (ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="indexColumnList">indexColumnList</A>
 */
void
indexColumnList(Vector columnList) throws StandardException :
{}
{
	indexColumnItem(columnList) ( <COMMA> indexColumnItem(columnList) ) *
}

/*
 * <A NAME="indexColumnItem">indexColumnItem</A>
 */
void
indexColumnItem(Vector columnList) throws StandardException :
{
	String		columnName;
}
{
	/* identifier never ends with a space; appending a space meaning desc */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) [<ASC> | <DESC> {columnName = columnName + ' ';}]
	{
		/*
		** Store the column names for the index columns in the
		** index column list.
		*/
		columnList.addElement(columnName);
	}
}

/*
 * <A NAME="derivedTable">derivedTable</A>
 */
ResultSetNode
derivedTable() throws StandardException :
{
	SubqueryNode tableSubquery;
}
{
	<LEFT_PAREN>
	tableSubquery = tableSubquery(SubqueryNode.FROM_SUBQUERY, null)
	<RIGHT_PAREN>
	{
		return tableSubquery.getResultSet();
	}
}

TableOperatorNode
joinedTableExpression(ResultSetNode leftRSN, boolean nestedInParens) throws StandardException :
{
	TableOperatorNode joinNode;
}
{
	joinNode = qualifiedJoin(leftRSN, nestedInParens) 
	{
		return joinNode;
	}
}

TableOperatorNode
qualifiedJoin(ResultSetNode leftRSN, boolean nestedInParens) throws StandardException :
{
	int					joinType = JoinNode.INNERJOIN;
	ResultSetNode		rightRSN;
	TableOperatorNode	ton = null;
	Object[]			onOrUsingClause = null;
	ResultColumnList	usingClause = null;
	ValueNode			onClause;
}
{
	/* RESOLVE - If we ever support NATURAL JOIN then we will need to break up
	 * this rule.  Right now the joinSpecification() is non-optional.  This
	 * allows us to build the Join tree from left to right. With NATURAL JOINS
	 * there is no joinSpecification() and we would want to build the tree from
	 * right to left.
	 */
	//[ <NATURAL> ] 
		[ joinType = joinType() ] <JOIN>
		rightRSN = tableReferenceTypes(nestedInParens) 
		onOrUsingClause = joinSpecification(leftRSN, rightRSN)
	{
		/* If NATURAL OR UNION is specified, then no joinSpecification()
		 * is required, otherwise it is required.
		 */

		/* RESOLVE - Since we don't support NATURAL or UNION joins yet,
		 * onOrUsingClause must be non-null.  (Change error message if and
		 * when grammar changes.)
		 */

		/* Figure out whether an ON or USING clause was used */
		onClause = (ValueNode) onOrUsingClause[ON_CLAUSE];
		usingClause = (ResultColumnList) onOrUsingClause[USING_CLAUSE];

		if (onClause == null && usingClause == null)
		{
			throw StandardException.newException(SQLState.LANG_MISSING_JOIN_SPECIFICATION, 
							JoinNode.joinTypeToString(joinType));
		}

		switch(joinType)
		{
			case JoinNode.INNERJOIN:
				ton = (TableOperatorNode) nodeFactory.getNode(
									C_NodeTypes.JOIN_NODE,
									leftRSN,
									rightRSN,
									onClause,
									usingClause,
									null,
									null,
									getContextManager());
				break;

			case JoinNode.LEFTOUTERJOIN:
				ton = (TableOperatorNode) nodeFactory.getNode(
										C_NodeTypes.HALF_OUTER_JOIN_NODE,
										leftRSN,
										rightRSN,
										onClause,
										usingClause,
										Boolean.FALSE,
										null,
										getContextManager());
				break;

			case JoinNode.RIGHTOUTERJOIN:
				ton = (TableOperatorNode) nodeFactory.getNode(
										C_NodeTypes.HALF_OUTER_JOIN_NODE,
										leftRSN,
										rightRSN,
										onClause,
										usingClause,
										Boolean.TRUE,
										null,
										getContextManager());
				break;


			default:
				if (SanityManager.DEBUG)
				{
					SanityManager.ASSERT(false, "Unexpected joinType");
				}
				return null;
		}

		/* Mark whether or not we are nested within parens */
		ton.setNestedInParens(nestedInParens);
		return ton;
	}
}

int
joinType() throws StandardException :
{
	int joinType;
}
{
	<INNER> 
	{
		return JoinNode.INNERJOIN;
	}
|
	joinType = outerJoinType() [<OUTER>]
	{
		return joinType;
	}
}

int
outerJoinType() throws StandardException :
{}
{
	<LEFT> 
	{
		return JoinNode.LEFTOUTERJOIN;
	}
|
	<RIGHT> 
	{
		return JoinNode.RIGHTOUTERJOIN;
	}
}

Object[]
joinSpecification(ResultSetNode leftRSN, ResultSetNode rightRSN) 
		throws StandardException :
{
	Object[]			onOrUsingClause = new Object[ON_OR_USING_CLAUSE_SIZE];
	ResultColumnList	usingClause = null;
	ValueNode			joinClause = null;
}
{
	joinClause = joinCondition() 
	{
		onOrUsingClause[ON_CLAUSE] = joinClause;
		onOrUsingClause[USING_CLAUSE] = usingClause;
		return onOrUsingClause;
	}
}

ValueNode
joinCondition() throws StandardException :
{
	ValueNode joinClause;
}
{
	/* valueExpression() was searchCondition() */
	<ON> joinClause = valueExpression(false)
	{
		return joinClause;
	}
}

/*
 * <A NAME="tableValueConstructor">tableValueConstructor</A>
 */
ResultSetNode
tableValueConstructor() throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	<VALUES> resultSetNode = tableValueConstructorList()
	{
		return resultSetNode;
	}
}

/*
 * <A NAME="tableValueConstructorList">tableValueConstructorList</A>
 */
ResultSetNode
tableValueConstructorList() throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	resultSetNode = rowValueConstructor(null) 
		( <COMMA> resultSetNode = rowValueConstructor(resultSetNode) ) *
	{
		if (resultSetNode instanceof UnionNode)
		{
			((UnionNode) resultSetNode).markTopTableConstructor();
		}

		return resultSetNode;
	}
}

/*
 * <A NAME="explicitTable">explicitTable</A>
 */

/*
 * <A NAME="datetimeValueFunction">datetimeValueFunction</A>
 */
ValueNode
datetimeValueFunction() throws StandardException :
{
	int prec = -1; // can't be negative, if used
}
{
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == DATE)}) <CURRENT> <DATE> 
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
	| <CURRENT_DATE>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
|
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == TIME)}) <CURRENT> <TIME> 
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
	| <CURRENT_TIME> 
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
|
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == TIMESTAMP)}) <CURRENT> <TIMESTAMP> 
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP),
							getContextManager());
	}
	| <CURRENT_TIMESTAMP> 
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP),
							getContextManager());
	}
}

/*
** Note that set function and aggregate are used
** interchangeably in the parser.  The tree has
** aggregate nodes.
*/
ValueNode
aggregateNode() throws StandardException :
{
	ValueNode agg;
}
{
	<COUNT> <LEFT_PAREN>
	( <ASTERISK>
	{
			agg = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								null,
								CountAggregateDefinition.class, 
								Boolean.FALSE,
								"COUNT(*)",
								getContextManager());
	}
	|
		agg = aggregateExpression("COUNT", CountAggregateDefinition.class)
	)
	<RIGHT_PAREN>
	{
		return agg;
	}
|
	agg = generalAggregate()
	{
		return agg;
	}
}



ValueNode
aggregateExpression(String aggName, Class aggClass) throws StandardException :
{
	boolean		distinct = false;
	ValueNode	value;
}
{
	[ distinct = setQuantifier() ] value = additiveExpression(null, 0, false)
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								value,
								aggClass, 
								distinct ? Boolean.TRUE : Boolean.FALSE,
								aggName,
								getContextManager());
	}
}

ValueNode
generalAggregate() throws StandardException :
{
	Token			aggToken;
	String			methodAliasString;
	ValueNode	aggExpr;
	ValueNode		value;
}
{
	aggToken = builtInAggregateType()
	<LEFT_PAREN>
		aggExpr = aggregateExpression(aggName(aggToken), aggClass(aggToken))
	<RIGHT_PAREN>
	{
		return aggExpr;
	}
|
	/*
	** If we know we have a distinct, then we can catch
	** a user aggregate here; otherwise, we have to generate
	** a staticMethodNode and fix it up later.
	*/
	methodAliasString = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	<LEFT_PAREN> setQuantifier() value = additiveExpression(null, 0, false) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								value,
								methodAliasString, 
								Boolean.TRUE,
								methodAliasString, 
								getContextManager());
	}
}

/*
** All built in aggregates are pretty similar to user
** defined aggregates, except we know what to map to
** without looking up the class name.
**
** NOTE: COUNT is omitted here because the COUNT aggregate is
** factored into a different rule, to distinguish between
** COUNT(*) and COUNT(<expression>).
*/
Token
builtInAggregateType() throws StandardException :
{
	Token	retval;
}
{
	(
		retval = <MAX> |
		retval = <AVG> |
		retval = <MIN> |
		retval = <SUM>
	)
	{
		return retval;
	}
}

ValueNode
castSpecification() throws StandardException :
{
	DataTypeDescriptor dts;
	ValueNode		 treeTop;
	ValueNode		 value;
	int				 charType;
	int				 length = -1;
}
{
	<CAST> <LEFT_PAREN> value = castOperand() <AS> dts = dataTypeCast() <RIGHT_PAREN>
	{
		treeTop = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CAST_NODE,
									value,
									dts,
									getContextManager());

		/* We need to generate a SQL->Java conversion tree above us if
		 * the dataTypeCast is a user type.
		 */
		if (! dts.getTypeId().builtIn())
		{
			treeTop = (ValueNode) nodeFactory.getNode(
							C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
							nodeFactory.getNode(
											C_NodeTypes.SQL_TO_JAVA_VALUE_NODE,
											treeTop,
											getContextManager()),
							getContextManager());
		}

		return treeTop;
	}
		
}

/*
 * <A NAME="charOrVarchar">charOrVarchar</A>
 */
int
charOrVarchar() :
{
}
{
	<CHAR>
	{
		return Types.CHAR;
	}
|
	<VARCHAR>
	{
		return Types.VARCHAR;
	}
}

ValueNode
castOperand() throws StandardException :
{
	ValueNode value;
}
{
	value = additiveExpression(null, 0, false)
	{
		return value;
	}
|
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
}


/*
 * <A NAME="dynamicParameterSpecification">dynamicParameterSpecification</A>
 */
ParameterNode
dynamicParameterSpecification() throws StandardException :
{}
{
	<QUESTION_MARK>
	{
		return makeParameterNode( );
	}
}

/*
 * <A NAME="whereClause">whereClause</A>
 */
ValueNode
whereClause(Token beginToken) throws StandardException :
{
	ValueNode	value;
	Token		endToken;
}
{
	/* valueExpression() was searchCondition() */
	value = valueExpression(false)
	{
		endToken = getToken(0);

		value.setBeginOffset( beginToken.endOffset + 1 );
		value.setEndOffset( endToken.endOffset );

		return value;
	}
}

GroupByList
groupByClause() throws StandardException :
{
	GroupByList groupingCols;
}
{
	<GROUP> <BY> groupingCols = groupingColumnReferenceList()
	{
		return groupingCols;
	}
}

GroupByList
groupingColumnReferenceList() throws StandardException :
{
	GroupByList groupingCols = (GroupByList) nodeFactory.getNode(
									C_NodeTypes.GROUP_BY_LIST,
									getContextManager());
}
{
	groupingColumnReference(groupingCols) ( <COMMA> groupingColumnReference(groupingCols) ) *
	{
		return groupingCols;
	}
}

void
groupingColumnReference(GroupByList groupingCols) throws StandardException :
{
	ColumnReference colRef;
}
{
	colRef = columnReference() 
	{
		groupingCols.addGroupByColumn(
			(GroupByColumn) nodeFactory.getNode(
							C_NodeTypes.GROUP_BY_COLUMN,
							colRef,
							getContextManager()));
	}
}

ValueNode
havingClause() throws StandardException :
{
	ValueNode value;
}
{
	/* valueExpression() was searchCondition() */
	<HAVING> value = valueExpression(false)
	{
		return value;
	}
}

QueryTreeNode
schemaDefinition() throws StandardException :
{
	String	schemaName;
}
{
	/*
	** CREATE SCHEMA:
	** We are not currently handling character set
	** specifications for schema, or schema bodies.
	*/
	<SCHEMA> schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{

		if (schemaName.startsWith("SYS"))
			throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, schemaName);
 
		return (QueryTreeNode) nodeFactory.getNode(
				C_NodeTypes.CREATE_SCHEMA_NODE,
				schemaName,
				null,
				getContextManager()
				);
	}
}

/*
 * <A NAME="tableDefinition">tableDefinition</A>
 */
QueryTreeNode
tableDefinition() throws StandardException :
{
	char				lockGranularity = TableDescriptor.DEFAULT_LOCK_GRANULARITY;
	Properties			properties = null;
	TableName			tableName;
	TableElementList	tableElementList;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	tableElementList = tableElementList()
	[ properties = propertyList()]
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_TABLE_NODE,
								tableName,
								tableElementList,
								properties,
								new Character(lockGranularity),
								getContextManager());
		
	}
}

Properties
propertyList() throws StandardException :
{
	Properties properties = new FormatableProperties();
}
{
	<PROPERTIES> property(properties)
	// This LOOKAHEAD is required because a property() and a tableReference()
	// can both start with ", dot.separated.list". We need to look ahead
	// to the EQUALS_OPERATOR to ensure we really have another property.
	( LOOKAHEAD({ anotherPropertyFollows() }) <COMMA> property(properties) )*
	{
		checkInternalFeature("PROPERTIES");
		return properties;
	}
}

void
property(Properties properties) throws StandardException :
{
	String key;
	String value;
}
{
	key = javaDSL() <EQUALS_OPERATOR> value = propertyValue()
	{
		// Do not allow user to specify multiple values for the same key
		if (properties.put(key, value) != null)
		{
			throw StandardException.newException(SQLState.LANG_DUPLICATE_PROPERTY, key);
		}
	}
}

String
propertyValue() throws StandardException :
{
	int	   intValue;
	String value;
}
{
	value = caseInsensitiveIdentifierPlusReservedWords()
	{
		return value;
	}
| 
	intValue = uint_value()
	{
		return String.valueOf(intValue);
	}
|
	value = string()
	{
		return value;
	}
}

/*
 * <A NAME="DB2lockGranularityClause">DB2lockGranularityClause</A>
 */
char
DB2lockGranularityClause() throws StandardException :
{
	char lockGranularity;
}
{
	<LOCKSIZE> lockGranularity = lockGranularity()
	{
		return lockGranularity;
	}
}

/*
 * <A NAME="lockGranularity">lockGranularity</A>
 */
char
lockGranularity() throws StandardException :
{
}
{
	<TABLE>
	{
		return TableDescriptor.TABLE_LOCK_GRANULARITY;
	}
|
	<ROW>
	{
		return TableDescriptor.ROW_LOCK_GRANULARITY;
	}
}

/*
 * <A NAME="indexDefinition">indexDefinition</A>
 */
QueryTreeNode
indexDefinition() throws StandardException :
{
	Boolean		unique = Boolean.FALSE;
	Properties	properties = null;
	TableName	indexName;
	TableName	tableName;
	Vector	indexColumnList = new Vector();
}
{
	/*
	** fyi: The INDEX keyword is pushed into the indexType()
	** production to get the grammar to work...
	*/
	[ unique = unique() ] <INDEX>
		indexName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <ON> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
				<LEFT_PAREN> indexColumnList(indexColumnList) <RIGHT_PAREN>
		[ properties = propertyList()]
	{
		/* User allowed to specify schema name on table and index.
		 * If no schema name specified for index, then it "inherits" 
		 * its schema name from the table.
		 * If index has a schema name and table does not, then
		 * table "inherits" its schema name from the index.
		 * If schema names are specified for both objects, then the
		 * schema names must be the same.
		 */
		if (indexName.getSchemaName() == null)
		{
			indexName.setSchemaName(tableName.getSchemaName());
		}
		else if (tableName.getSchemaName() == null)
		{
			tableName.setSchemaName(indexName.getSchemaName());
		}
		else
		{
			/* schema name specified for both */
			if (! (indexName.getSchemaName().equals(
						tableName.getSchemaName())))
			{
				throw StandardException.newException(SQLState.LANG_INDEX_AND_TABLE_IN_DIFFERENT_SCHEMAS, 
							indexName,
							tableName);
			}
		}
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_INDEX_NODE,
								unique,
								DEFAULT_INDEX_TYPE,
								indexName,
								tableName,
								indexColumnList,
								properties,
								getContextManager());
	}
}

/*
 * <A NAME="unique">unique</A>
 */
Boolean
unique() throws StandardException :
{
}
{
	<UNIQUE>
	{
		return Boolean.TRUE;
	}
}

/**
	CREATE PROCEDURE

	procedureElements contains the description of the procedure.
	(CREATE FUNCTIONS shares this lyout), see functionDefinition

	0 - Object[] 3 element array for parameters
	1 - TableName - specific name
	2 - Integer - dynamic result set count
	3 - String language (always java) - ignore
	4 - String external name (also passed directly to create alias node - ignore
	5 - Short parameter style (always java) - ignore 
	6 - Short - SQL allowed.
	7 - Boolean - CALLED ON NULL INPUT (always TRUE for procedures)
	8 - TypeDescriptor - return type (always NULL for procedures)
*/

QueryTreeNode
procedureDefinition() throws StandardException :
{
	TableName procedureName;
	Object[] procedureElements = new Object[9];
}
{
		<PROCEDURE> procedureName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		procedureElements[0] = procedureParameterList()
		( routineElement(true, procedureElements) ) +
		{
			// some of the procedure elements are mandatory
		    if ((procedureElements[3] == null) || (procedureElements[4] == null) || (procedureElements[5] == null))
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MISSING ELEMENT");

			return getCreateAliasNode(
							procedureName,
							(String) procedureElements[4],
							procedureElements,
							AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR,
							Boolean.FALSE);
		}
}

void routineElement(boolean isProcedure, Object[] routineElements) throws StandardException :
{
	int drs;
	int clausePosition = -1;
	Object clauseValue = null;
}
{
	(
		<SPECIFIC> clauseValue = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
			{ clausePosition = 1; throw StandardException.newException(SQLState.NOT_IMPLEMENTED, "SPECIFIC identifier");}
	|
		[ <DYNAMIC> ] <RESULT> <SETS> drs = uint_value()
		{
			if (!isProcedure)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "RESULT SETS");
			clauseValue = ReuseFactory.getInteger(drs); clausePosition = 2;
		}
	|
		<LANGUAGE>  <JAVA> { clauseValue = "JAVA"; clausePosition = 3; }
	|
		<EXTERNAL> <NAME> clauseValue = string() { clausePosition = 4; }
	|
		<PARAMETER> <STYLE> clauseValue = parameterStyle() { clausePosition = 5; }

	|	<NO> <SQL>				{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.NO_SQL); clausePosition = 6; }
	|	<CONTAINS> <SQL>		{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.CONTAINS_SQL); clausePosition = 6; }
	|	<READS> <SQL> <DATA>	{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.READS_SQL_DATA); clausePosition = 6; }
	|	<MODIFIES> <SQL> <DATA>
		{
			if (!isProcedure)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MODIFIES SQL DATA");
			clauseValue = ReuseFactory.getShort(RoutineAliasInfo.MODIFIES_SQL_DATA); clausePosition = 6;
		}

	|   clauseValue = calledOnNullInput() {  clausePosition = 7; }

	)

	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (routineElements[clausePosition] != null) {

				String which = PROCEDURE_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}
				
			routineElements[clausePosition] = clauseValue;
		}
	}
}

Boolean calledOnNullInput() :
{
	Boolean calledOnNull;
}
{
	(
		<CALLED> { calledOnNull = Boolean.TRUE; }
		| <RETURNS> <NULL> { calledOnNull = Boolean.FALSE; }
		
	) <ON> <NULL> <INPUT>
	{
		return calledOnNull;
	}
}

Short parameterStyle() :
{
}
{
	  <JAVA>               { return ReuseFactory.getShort(RoutineAliasInfo.PS_JAVA); }
	}

Object[]
procedureParameterList() throws StandardException :
{
	Vector[] list = new Vector[3];
	list[0] = new Vector(); // name
	list[1] = new Vector(); // type
	list[2] = new Vector(); // in/out
}
{
	<LEFT_PAREN>
		[ procedureParameterDefinition(list)
				( <COMMA> procedureParameterDefinition(list) )* ]
	<RIGHT_PAREN>
	{
		return list;
	}
}

/*
 * <A NAME="Definition">procedureParameterDefinition</A>
 */
void
procedureParameterDefinition(Vector[] list) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	String				parameterName;
	Integer				inout;
}
{
	inout = inoutParameter()
	parameterName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) 
	typeDescriptor = dataTypeDDL() 
	{
		list[0].addElement(parameterName);
		list[1].addElement(typeDescriptor);
		list[2].addElement(inout);
	}
}

Integer
inoutParameter() :
{
	int mode = JDBC30Translation.PARAMETER_MODE_IN;
}
{
	[
		  <IN> { }
		| <OUT> { mode = JDBC30Translation.PARAMETER_MODE_OUT; }
		| <INOUT> { mode = JDBC30Translation.PARAMETER_MODE_IN_OUT; }
	]
	{ return ReuseFactory.getInteger(mode); }
}

/**
	CREATE FUNCTION

	functionElements contains the description of the function.

	0 - Object[] 3 element array for parameters
	1 - TableName - specific name
	2 - Integer - dynamic result set count - always 0
	3 - String language (always java) - required to be set
	4 - String external name (also passed directly to create alias node - ignore
	5 - Short parameter style (always java) - required to be set 
	6 - Short - SQL allowed.
	7 - Boolean - CALLED ON NULL INPUT
	8 - TypeDescriptor - return type
*/

QueryTreeNode
functionDefinition() throws StandardException :
{
	TableName functionName;
	Object[] functionElements = new Object[9];
}
{
		<FUNCTION> functionName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		functionElements[0] = functionParameterList()
		<RETURNS> functionElements[8] = dataTypeCommon() 
		( routineElement(false, functionElements) ) +
		{
			// some of the elements are mandatory
		    if ((functionElements[3] == null) || (functionElements[4] == null) || (functionElements[5] == null))
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MISSING ELEMENT");

			return getCreateAliasNode(
							functionName,
							(String) functionElements[4],
							functionElements,
							AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR,
							Boolean.FALSE);
		}
}

Object[]
functionParameterList() throws StandardException :
{
	Vector[] list = new Vector[3];
	list[0] = new Vector(); // name
	list[1] = new Vector(); // type
	list[2] = new Vector(); // in/out - ALWAYS IN
}
{
	<LEFT_PAREN>
		[ functionParameterDefinition(list)
				( <COMMA> functionParameterDefinition(list) )* ]
	<RIGHT_PAREN>
	{
		return list;
	}
}

/*
 * <A NAME="Definition">functionParameterDefinition</A>
 */
void
functionParameterDefinition(Vector[] list) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	String				parameterName;
	Integer				inout;
}
{
	parameterName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) 
	typeDescriptor = dataTypeDDL() 
	{
		list[0].addElement(parameterName);
		list[1].addElement(typeDescriptor);
		list[2].addElement(ReuseFactory.getInteger(JDBC30Translation.PARAMETER_MODE_IN));
	}
}

QueryTreeNode
viewDefinition(Token beginToken) throws StandardException :
{
	int					checkOptionType;
	ResultColumnList	resultColumns = null;
	ResultSetNode		queryExpression;
	TableName			tableName;
	Token				checkTok = null;
	Token				endToken;
}
{
	<VIEW> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
		[ <LEFT_PAREN> resultColumns = viewColumnList() <RIGHT_PAREN> ]
		<AS> queryExpression = queryExpression(null, NO_SET_OP)
	{
		checkOptionType = ViewDescriptor.NO_CHECK_OPTION;
		endToken = getToken(0);
		/* Parameters not allowed in create view */
		HasNodeVisitor visitor = new HasNodeVisitor(ParameterNode.class);
		queryExpression.accept(visitor);
		if (visitor.hasNode())
		{
			throw StandardException.newException(SQLState.LANG_NO_PARAMS_IN_VIEWS);
		}

		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_VIEW_NODE,
								tableName, 
								resultColumns, 
								queryExpression,
								ReuseFactory.getInteger(checkOptionType),
								getStringSlicer().slice(
												beginToken.beginOffset,
												endToken.endOffset,false),
								getContextManager());
	}
}

ResultColumnList
viewColumnList() throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	/* RESOLVE: Passing null parameter for now just to keep Java happy */
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

QueryTreeNode
triggerDefinition() throws StandardException :
{
	Boolean				isBefore;
	Boolean				isRow;
	TableName			tableName;
	TableName			triggerName;
	Token[]				tokenHolder = new Token[1];
	Token				beginToken;
	Token				checkTok = null;
	Token				endToken;
	int					actionBegin;
	int					actionEnd;
	int					triggerEvent;
	QueryTreeNode		actionNode;
	ResultColumnList	triggerColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
	Vector				refClause = null;
}
{
	<TRIGGER> triggerName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	isBefore = beforeOrAfter()
		triggerEvent = triggerEvent(triggerColumns)		// { INSERT | DELETE | UPDATE [ colList	] }
		<ON> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[ refClause = triggerReferencingClause() ]		// REFERENCING OLD/NEW AS 	
		<FOR> <EACH> isRow = rowOrStatement()
		<MODE> <DB2SQL>
		//we are not top level statement
		actionNode = proceduralStatement(tokenHolder)
		// the trigger body
	{
		actionEnd = getToken(0).endOffset;
		actionBegin = tokenHolder[0].beginOffset;

		// No DML in action node for BEFORE triggers.
		if (isBefore.booleanValue() && (actionNode instanceof DMLModStatementNode)) {
				throw StandardException.newException(
					SQLState.LANG_UNSUPPORTED_TRIGGER_STMT,
					((StatementNode) actionNode).statementToString(), "BEFORE");
					}


		// no params in trigger action
 		HasNodeVisitor visitor = new HasNodeVisitor(ParameterNode.class);
		actionNode.accept(visitor);
		if (visitor.hasNode())
		{
			throw StandardException.newException(SQLState.LANG_NO_PARAMS_IN_TRIGGER_ACTION);
		}

		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_TRIGGER_NODE,
								triggerName, 
								tableName,
								ReuseFactory.getInteger(triggerEvent),
								triggerColumns,
								isBefore,	
								isRow,
								Boolean.TRUE, 				// enabled
								refClause,			// referencing clause
								null,// when clause node
								null, 		// when clause text
								ReuseFactory.getInteger(0),
											// when clause begin offset
								actionNode,
								getStringSlicer().slice(
									actionBegin,
									actionEnd,false),
								ReuseFactory.getInteger(actionBegin),
								getContextManager());
	}
}

QueryTreeNode
synonymDefinition() throws StandardException :
{
	TableName synonymName;
	TableName targetName;
}
{
    <SYNONYM> synonymName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <FOR>
		 targetName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1,
			     "CREATE SYNONYM");

		return  (StatementNode) getNodeFactory().getCreateAliasNode
			(
				synonymName,
				targetName,
				null,
				AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR,
				Boolean.FALSE,
				getContextManager()
			);
	}
}


Boolean
beforeOrAfter() :
{}
{
	<NO> <CASCADE> <BEFORE> 
	{
		return Boolean.TRUE;
	}
| 	<AFTER>
	{
		return Boolean.FALSE;
	}
}

int
triggerEvent(ResultColumnList rcl) throws StandardException :
{}
{
	<INSERT> 
	{
		return TriggerDescriptor.TRIGGER_EVENT_INSERT;
	}
| 	<DELETE>
	{
		return TriggerDescriptor.TRIGGER_EVENT_DELETE;
	}
|	<UPDATE> [ <OF> columnNameList(rcl) ]
	{
		return TriggerDescriptor.TRIGGER_EVENT_UPDATE;
	}
}

Boolean
rowOrStatement() :
{
}
{
	token = <ROW> 
	{
		return Boolean.TRUE;
	}
| 	token = <STATEMENT>
	{
		return Boolean.FALSE;
	}
}

Vector
triggerReferencingClause() throws StandardException :
{
	Vector vector = new Vector();
}
{
	<REFERENCING> triggerReferencingExpression(vector) ( triggerReferencingExpression(vector) )*
	{
		return vector;
	}
}

void
triggerReferencingExpression(Vector vector) throws StandardException :
{
	String	identifier;
	boolean isNew = true;
	boolean	isRow = true;
}
{
	(
	  <NEW> 
	  |
	  <OLD> {isNew = false;}
	  |
	  <NEW_TABLE> { isRow = false;}
	  |
	  <OLD_TABLE> { isNew = false; isRow = false;}
	)

	<AS> identifier = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		vector.addElement(new TriggerReferencingStruct(isRow, isNew, identifier));
	}
}
 

/*
 * <A NAME="defaultClause">defaultClause</A>
 */
ValueNode
defaultClause(long[] autoIncrementInfo, String columnName) throws StandardException :
{
	ValueNode	value;
	Token		beginToken;
	Token		endToken;
}
{
	[ <WITH> ] beginToken = <_DEFAULT> value = defaultOption(beginToken, autoIncrementInfo, columnName)
	{
		return value;
	}
|
	value = generatedColumnOption(autoIncrementInfo)
	{
		return value;
	}
}

/*
 * <A NAME="defaultNullOnlyClause">defaultNullOnlyClause</A>
 */
ValueNode
defaultNullOnlyClause() throws StandardException :
{
}

{
	 <_DEFAULT> <NULL>
	 {
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	 }
}

/*
 * <A NAME="generatedColumnOption">generatedColumnOption</A>
 */

//ToCleanUp
//A specific class not such long[] should exists for autoIncrementInfo ...

ValueNode
generatedColumnOption(long[] autoIncrementInfo) throws StandardException :
{
	ValueNode	value = null;
}
{
    {
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_START_INDEX] = 1;
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = 1;
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX] = 1;
    }

	<GENERATED> 
	(
	 <ALWAYS>  {
		value = null;
	}|
	 <BY> <_DEFAULT> { 
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1,
			     "GENERATED BY DEFAULT");

		value = (ValueNode) nodeFactory.getNode(C_NodeTypes.DEFAULT_NODE,
							getContextManager()) ;}
	)
	<AS> <IDENTITY> [<LEFT_PAREN> autoIncrementBeginEnd(autoIncrementInfo) <RIGHT_PAREN>]
    {
		return value;
    }
}

/*
 * <A NAME="autoIncrementBeginEnd">autoIncrementBeginEnd</A>
 */
void 
autoIncrementBeginEnd(long[] autoIncrementInfo) throws StandardException :
{
	long		autoIncrementInitial = 1;
	long		autoIncrementIncrement = 1;
}
{
        <INCREMENT> <BY> autoIncrementIncrement = exactNumber()
    {
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		return;
    }
|
		<START> <WITH> autoIncrementInitial = exactNumber() [<COMMA> <INCREMENT> <BY> autoIncrementIncrement = exactNumber() ]
    {
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_START_INDEX] = autoIncrementInitial;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		return;
    }
}

/*
 * <A NAME="defaultOption">defaultOption</A>
 */
ValueNode
defaultOption(Token beginToken, long[] autoIncrementInfo,
	String columnName) throws StandardException :
{
	Token		endToken;
	Token		errorTok = null;
	Token		initialTok = null;
	ValueNode	value;
}
{
	//Look ahead required to tell NULL from a class name which starts with
	// NULL (e.g., NULL::)
	LOOKAHEAD( {getToken(1).kind == NULL && !(getToken(2).kind == PERIOD ||
			getToken(2).kind == DOUBLE_COLON)})
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
|
	value = DB2DefaultOption(columnName)
	{
		endToken = getToken(0);
		value.setBeginOffset( beginToken.beginOffset );
		value.setEndOffset( endToken.endOffset );
		value = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								value,
								getStringSlicer().slice(
									beginToken.beginOffset + 7,
									endToken.endOffset,true),
								getContextManager()
							);
		return value;
	}
}

/*
 * <A NAME="DB2DefaultOption">DB2DefaultOption</A>
 */
ValueNode
DB2DefaultOption(String columnName) throws StandardException :
{
	ValueNode	value;
}
{
	// DB2 spec says default can only be one of the
	// following: <constant>, <datetime-special-register> (ex.
	// "current time"), CURRENT SCHEMA, USER, NULL, or
	// <cast-function>.  We currently support all of these
	// except the 'blob' function that is part of the DB2 valid
	// <cast-function> grammar.  See beetle 5281 for plans
	// support 'blob' function in future.

	LOOKAHEAD({getToken(2).kind == SCHEMA || getToken(2).kind == SQLID}) 
	<CURRENT> (<SCHEMA> | <SQLID>)
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_SCHEMA_NODE,
						getContextManager());
	}
|
	<USER>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.USER_NODE,
								getContextManager());
	}
|
	LOOKAHEAD({
				getToken(1).kind == DATE ||
                getToken(1).kind == TIME ||
                getToken(1).kind == TIMESTAMP
			})
	value = miscBuiltins()
	{ // these functions are allowed as valid <cast-function> defaults.
	  // Once "BLOB" is allowed as a cast-function (5281), a case should be
	  // added for that, as well.
		return value;
	}
|
	LOOKAHEAD( {getToken(2).kind == LEFT_PAREN ||
				getToken(4).kind == LEFT_PAREN})
	value = miscBuiltins()
	{
		// If we have a function (as indicated by an open paren,
		// which can be either the 2nd token (w/ normal function name)
		// or the 4th token (w/ qualified function name)), then
		// it's not valid.  Catch it here and throw an "invalid
		// default" error (42894) instead of letting it go as
		// a syntax error (this matches DB2 UDB behavior).
		throw StandardException.newException(
			SQLState.LANG_DB2_INVALID_DEFAULT_VALUE,
			columnName);
	}
|
	value = datetimeValueFunction()
	{
		return value;
	}
|
	// Only (valid) thing left is literals (i.e. actual constants).
	value = literal()
	{
		return value;
	}

}

/*
 * <A NAME="literal">literal</A>
 */
ValueNode
literal() throws StandardException :
{
	String	sign = "";
	Token	tok;
	String  datetimeString;
	String  bitString;
	ValueNode		constantNode;
}
{
	[ sign = sign() ] constantNode = numericLiteral(sign)
	{
		return constantNode;
	}
|
	constantNode = stringLiteral()
	{
		return	constantNode;
	}
|
	constantNode = hexLiteral()
	{
		return	constantNode;
	}
|
	constantNode = dateTimeLiteral()
	{
		return constantNode;
	}
|
	tok = booleanLiteral()
	{
		checkInternalFeature(tok.image);
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BOOLEAN_CONSTANT_NODE,
									StringUtil.SQLEqualsIgnoreCase(tok.image, "true") ?
										Boolean.TRUE : Boolean.FALSE,
									getContextManager());
	}
/*
	JDBC and ODBC do not support the interval type, so let's not do it
	ourselves for now.
|
	tok = <INTERVAL_LITERAL>
	{
		return nodeFactory.getIntervalNode(tok.image,
					getTypeCompilationFactory(),
					getContextManager());
	}
*/
}

/*
 * <A NAME="numericLiteral">numericLiteral</A>
 */
ValueNode
numericLiteral(String sign) throws StandardException :
{
	Token	tok;
}
{
	tok = <EXACT_NUMERIC>
	{
		/*
		** The various java parse utilities can't handle leading +,
		** so only concatenate leading -.
		*/

		String num = tok.image;

		if (sign.equals("-"))
			num = sign.concat(num);

		return getNumericNode(num);
	}
|
	tok = <APPROXIMATE_NUMERIC>
	{
		StringBuffer doubleImage;
		String doubleString;
		int ePosn, dotPosn; // Position of letter e and '.' in value
		Double		doubleValue;
		
		doubleImage = new StringBuffer(sign);
		doubleImage.append(tok.image);
		doubleString = doubleImage.toString();

		ePosn = doubleString.indexOf('E');
		if (ePosn == -1)
			ePosn = doubleString.indexOf('e');
		if (SanityManager.DEBUG)
			SanityManager.ASSERT(ePosn != -1, "no E or e in approximate numeric");

		// there is a limit on the length of a floatingpoint literal in DB2
		if (doubleString.length() > Limits.DB2_MAX_FLOATINGPOINT_LITERAL_LENGTH)
			throw StandardException.newException(SQLState.LANG_DB2_TOO_LONG_FLOATING_POINT_LITERAL, doubleString, TypeId.DOUBLE_NAME);
		// if there is no '.' before the e, put one in
		dotPosn = doubleString.substring(0,ePosn).indexOf('.');
		if (dotPosn == -1) {
			doubleImage.insert(ePosn,'.');
			doubleString = doubleImage.toString();
			ePosn++;
		}

		try
		{
			doubleValue = Double.valueOf(doubleString);

		}
		catch (NumberFormatException nfe)
		{
			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, TypeId.DOUBLE_NAME);
		}

		double dv = doubleValue.doubleValue();

		// When the value is 0 it's possible rounded, try to detect it by checking if the mantissa is 0.0
		//   "proof of correctness": any nonzero value (mantissa) with less than 30 characters will not be
		//                           rounded to 0.0 by a float/real. This correctly detects the case when
		//                           the radix/exponent being "too small" (1e-900) giving a value rounded to zero.
		if ( (dv == 0.0d) && (Double.parseDouble(doubleString.substring(0, ePosn-1)) != 0.0d) )
		{
			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, TypeId.DOUBLE_NAME);
		}

		if (Double.isNaN(dv) || Double.isInfinite(dv))
			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, TypeId.DOUBLE_NAME);

		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.DOUBLE_CONSTANT_NODE,
									doubleValue,
									getContextManager());
	}
}

/*
 * <A NAME="dateTimeLiteral">dateTimeLiteral</A>
 */
ValueNode
dateTimeLiteral() throws StandardException :
{
	ValueNode	constantNode;
}
{
// RESOLVE: There is an incompatibility between Cloudscape and DB2 here. The DB2 SQL parser does not recognize
// JDBC date/time escapes. They are handled in a JDBC pre-processor. However embedded Cloudscape does not have
// a separate pre-processor. JDBC date/time escapes are handled by the Cloudscape SQL parser. This will only
// be visible if Cloudscape is accessed through a non-JDBC pathway. (ODBC?) In that case Cloudscape will allow
// the JDBC date/time escape while DB2 will not.
	(
		( <LEFT_BRACE> constantNode = escapedDateTimeLiteral() <RIGHT_BRACE> )
	)
	{
		return constantNode;
	}
}

/*
 * <A NAME="escapedDateTimeLiteral">escapedDateTimeLiteral</A>
 */
ValueNode
escapedDateTimeLiteral() throws StandardException :
{
	ValueNode constantNode;
}
{
	<D> constantNode = bareDateLiteral()
	{
		return constantNode;
	}
|
	<T> constantNode = bareTimeLiteral()
	{
		return constantNode;
	}
|
	<TS> constantNode = bareTimestampLiteral()
	{
		return constantNode;
	}
}

/*
 * <A NAME="bareDateLiteral">bareDateLiteral</A>
 */
ValueNode
bareDateLiteral() throws StandardException :
{
	String dateString;
}
{
	dateString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getDateValue(dateString, true),
						getContextManager());
	}
}

/*
 * <A NAME="bareTimeLiteral">bareTimeLiteral</A>
 */
ValueNode
bareTimeLiteral() throws StandardException :
{
	String timeString;
}
{
	timeString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getTimeValue(timeString, true),
						getContextManager());
	}
}

/*
 * <A NAME="bareTimestampLiteral">bareTimestampLiteral</A>
 */
ValueNode
bareTimestampLiteral() throws StandardException :
{
	String timestampString;
}
{
	timestampString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getTimestampValue(timestampString, true),
						getContextManager());
	}
}

/*
 * <A NAME="string">string</A>
 */
String
string() throws StandardException :
{
	Token	tok;
}
{
	tok = <STRING>
	{
		verifyImageLength(tok.image);
		/* Trim off the leading and trailing ', and compress all '' to ' */
		return compressQuotes(tok.image.substring(1, tok.image.length() - 1),
							  SINGLEQUOTES);
	}
}

/*
 * <A NAME="stringLiteral">stringLiteral</A>
 */
CharConstantNode
stringLiteral() throws StandardException :
{
	Token	tok;
	String	string;
}
{
	tok = <STRING>
	{
		//there is a maximum limit on the length of the string
		if (tok.image.length()-2 > Limits.DB2_MAX_CHARACTER_LITERAL_LENGTH)//-2 is for the beginning and ending quote
			throw StandardException.newException(SQLState.LANG_DB2_STRING_CONSTANT_TOO_LONG, StringUtil.formatForPrint(tok.image));
		string = compressQuotes(tok.image.substring(1, tok.image.length() - 1), SINGLEQUOTES);
		/* Trim quotes from string. */
		return (CharConstantNode) nodeFactory.getNode(
								C_NodeTypes.CHAR_CONSTANT_NODE,
								string,
								getContextManager());
	}
}

/*
 * <A NAME="hexLiteral">hexLiteral</A>
 */
ValueNode
hexLiteral() throws StandardException :
{
	Token	tok;
}
{
	tok = <HEX_STRING>
	{
		String hexLiteral = tok.image;

		//there is a maximum limit on the length of the hex constant
		if (hexLiteral.length()-3 > Limits.DB2_MAX_HEX_LITERAL_LENGTH)//-3 is for X' at the beginning and ' at the end
			throw StandardException.newException(SQLState.LANG_DB2_STRING_CONSTANT_TOO_LONG, StringUtil.formatForPrint(hexLiteral));
		if ((hexLiteral.length()-3)%2 == 1)
			throw StandardException.newException(SQLState.LANG_DB2_INVALID_HEXADECIMAL_CONSTANT, StringUtil.formatForPrint(hexLiteral));

		int bitLength = ((hexLiteral.length() - 3) / 2);
		return (ValueNode)
				nodeFactory.getNode(C_NodeTypes.VARBIT_CONSTANT_NODE,
									hexLiteral.substring(2, hexLiteral.length() - 1), ReuseFactory.getInteger(bitLength),
									getContextManager());
	}
}


TableName
constraintNameDefinition() throws StandardException :
{
	TableName constraintName;
}
{
	/* changed constraintName() to qualifiedName() for compaction */
	<CONSTRAINT> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return constraintName;
	}
}

/*
 * DB2 requires column check constraints to refer to only that column. Cloudscape currently
 * doesn't care if check constraints are column level or table level. For DB2 compatibility
 * check that column check constraints only refer to that column.
 */
ConstraintDefinitionNode
checkConstraintDefinition(TableName constraintName, String columnName)
							throws StandardException :
{  
	Token		beginToken;
	Token		endToken;
	ValueNode	value;
	ResultColumnList rclList = null;
}
{
	/* valueExpression() was searchCondition() */
	<CHECK>  beginToken = 
		<LEFT_PAREN> value = valueExpression(false) endToken = <RIGHT_PAREN>
	{
		if (columnName != null)
		{
			/* Column check constraint */
			rclList = (ResultColumnList) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN_LIST,
									getContextManager());
			rclList.addElement((ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager()));
		}

		value.setBeginOffset( beginToken.beginOffset );
		value.setEndOffset( endToken.endOffset );
		return (ConstraintDefinitionNode) nodeFactory.getNode(
					C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
					constraintName,
					ReuseFactory.getInteger(DataDictionary.CHECK_CONSTRAINT),
					rclList,
					null,
					value,
					getStringSlicer().slice(
						beginToken.beginOffset,
						endToken.endOffset,true),
					getContextManager()
					);
	}
}


/*
 * <A NAME="spsRenameStatement">spsRenameStatement</A>
 */
QueryTreeNode
spsRenameStatement() throws StandardException :
{
	QueryTreeNode qtn;
}
{
	<RENAME> (
		qtn = renameTableStatement() |
		qtn = renameIndexStatement()
		)
	{
		return qtn;
	}
}

/*
 * <A NAME="renameTableStatement">renameTableStatement</A>
 */
QueryTreeNode
renameTableStatement() throws StandardException :
{
	QueryTreeNode qtn;
	TableName tableName;
	String newTableName;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <TO> newTableName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.RENAME_NODE,
								tableName,
								null,
								newTableName,
								Boolean.FALSE,
								ReuseFactory.getInteger(StatementType.RENAME_TABLE),
								getContextManager());
	}
}

/*
 * <A NAME="renameIndexStatement">renameIndexStatement</A>
 */
QueryTreeNode
renameIndexStatement() throws StandardException :
{
	String oldIndexName;
	String newIndexName;
}
{
	<INDEX> oldIndexName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <TO> newIndexName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		QueryTreeNode qtn = nodeFactory.getNode(
								C_NodeTypes.RENAME_NODE,
								null,
								oldIndexName,
								newIndexName,
								Boolean.FALSE,
ReuseFactory.getInteger(StatementType.RENAME_INDEX),
								getContextManager());

		return qtn;

	}
}


QueryTreeNode
lockStatement() throws StandardException :
{
	Boolean						exclusiveMode;
	TableName					tableName;
}
{
	<LOCK> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <IN> exclusiveMode = lockMode() <MODE>
	{
		return nodeFactory.getNode(
								C_NodeTypes.LOCK_TABLE_NODE,
								tableName,
								exclusiveMode,
								getContextManager());
	}
}

Boolean
lockMode() :
{
}
{
	<EXCLUSIVE>
	{
		return Boolean.TRUE;
	}
|
	<SHARE>
	{
		return Boolean.FALSE;
	}
}

QueryTreeNode
execStatement() throws StandardException :
{
	TableName	stmtName;
}
{
	<EXECUTE> <STATEMENT> stmtName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.EXEC_SPS_NODE,
								stmtName,
								getContextManager());
	}
}

TransactionStatementNode
setIsolationStatement() throws StandardException :
{
	TransactionStatementNode tranNode;
}
{
	setIsolationHeader() [ ( <EQUALS_OPERATOR> | <TO> ) ] tranNode = transactionMode()
	{
		return tranNode;
	}
}

void
setIsolationHeader() throws StandardException :
{}
{
	<ISOLATION>
|
        LOOKAHEAD( { getToken(1).kind == CURRENT && getToken(2).kind == ISOLATION } )
	<CURRENT> <ISOLATION>
}


TransactionStatementNode
transactionMode() throws StandardException :
{
	int isolationLevel;
}
{
	isolationLevel = isolationLevelDB2OrReset() 
	{
		return (TransactionStatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_TRANSACTION_ISOLATION_NODE,
								ReuseFactory.getInteger(isolationLevel),
								getContextManager());
	}
}

int
isolationLevelDB2OrReset() :
{
	int isolationLevel;
}
{
        (
                <RESET> { return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL; }
                | isolationLevel = isolationLevelDB2() { return isolationLevel; }
        )
}

int
isolationLevelDB2() :
{
        int isolationLevel;
}
{
	(
                isolationLevel = isolationLevelDB2Abbrev() { return isolationLevel; }
                | ( ( <REPEATABLE> <READ> ) | <SERIALIZABLE> )
                        { return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL; }
		| <CURSOR> <STABILITY>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		| <DIRTY> <READ>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }

		|
                        LOOKAHEAD( { getToken(1).kind == READ && getToken(2).kind == COMMITTED } )
                        <READ> <COMMITTED>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		|
                        LOOKAHEAD( { getToken(1).kind == READ && getToken(2).kind == UNCOMMITTED } )
                        <READ> <UNCOMMITTED>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }
	)
}

int
isolationLevelDB2Abbrev() :
{
}
{
	(
		<RR>
                        { return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL; }

		| <RS> { return ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL; }

		| <CS>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		| <UR>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }
	)
}


int
isolationLevel() :
{
	int isolationLevel;
}
{
	<ISOLATION> <LEVEL> isolationLevel = levelOfIsolation()
	{
		return isolationLevel;
	}
}

int
levelOfIsolation() :
{
}
{
	<READ>
	{
		return levelOfIsolationRead();
	}
| 
    <REPEATABLE> <READ>
    {
		return ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL;
    }
|
	<SERIALIZABLE>
	{
		return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL;
	}
}

int
levelOfIsolationRead() :
{
}
{
	<UNCOMMITTED> 
	{
		return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
	}
|
	<COMMITTED> 
	{
		return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
	}
}


/*
 * <A NAME="simpleValueSpecification">simpleValueSpecification</A>
 */
ValueNode
simpleValueSpecification() throws StandardException :
{
	ValueNode	value;
}
{
	value = literal()
	{
		return value;
	}
}


QueryTreeNode
setSchemaStatement() throws StandardException :
{
	QueryTreeNode setSchema = null;
}
{
	setSchemaHeader() [<EQUALS_OPERATOR>] setSchema = setSchemaValues()
	{
		if (parameterList != null && parameterList.size() > 0)
		{
			setUpAndLinkParameters();
			// set the type of parameter node, it should be a varchar max Limits.MAX_IDENTIFIER_LENGTH - non nullable
			ParameterNode p = (ParameterNode)parameterList.elementAt(0);
			p.setDescriptor(new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), false, Limits.MAX_IDENTIFIER_LENGTH));
		}
		return setSchema;
	}
}

void 
setSchemaHeader() throws StandardException :
{}
{
	<SCHEMA>
|
        LOOKAHEAD( { getToken(1).kind == CURRENT && ( getToken(2).kind == SCHEMA ||  getToken(2).kind == SQLID ) } )
	<CURRENT> ( <SCHEMA>  | <SQLID> )
}

QueryTreeNode
setSchemaValues() throws StandardException :
{
	String schemaName;
}
{
	schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								schemaName,
								null,
								getContextManager());
	}
|
	<USER>
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								null,
								ReuseFactory.getInteger(StatementType.SET_SCHEMA_USER),
								getContextManager());
	}
|   dynamicParameterSpecification()
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								null,
								ReuseFactory.getInteger(StatementType.SET_SCHEMA_DYNAMIC),
								getContextManager());
	}
|	schemaName = string()
	{
		/* Max length for schema name is Limits.MAX_IDENTIFIER_LENGTH */
		checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								schemaName,
								null,
								getContextManager());
	}
}



// Set the locale for messages coming from the database system. This
// is for support only, so we can get messages in our preferred language
// (usually English). I didn't want to create all the execution wiring
// to do this, so this command executes in the parser
QueryTreeNode
setMessageLocaleStatement() throws StandardException :
{
	String messageLocale;
}
{
	<MESSAGE_LOCALE> messageLocale = string()
	{
		getContextManager().setMessageLocale(messageLocale);

		return nodeFactory.getNode(
											C_NodeTypes.NOP_STATEMENT_NODE,
											getContextManager());
	}
}

/*
 * <A NAME="valueSpecification">valueSpecification</A>
 */
ValueNode
valueSpecification() throws StandardException :
{
	ValueNode	   value;
	ValueNode	   leftExpression;
	ValueNode	   rightExpression;
}
{
	value = literal()
	{
		return value;
	}
|
	value = generalValueSpecification()
	{
		return value;
	}
|
	<NULLIF> <LEFT_PAREN> leftExpression = additiveExpression(null, 0, false) <COMMA> rightExpression = additiveExpression(null, 0, false) <RIGHT_PAREN>
	{
		// "NULLIF(L, R)" is the same as "L=R ? CAST(NULL AS CHAR(1)) : L"
		// An impl assumption here is that Cloudscape can promote CHAR to any comparable datatypes such as numeric
		ContextManager cm = getContextManager();
		ValueNodeList thenElseList = (ValueNodeList) nodeFactory.getNode(C_NodeTypes.VALUE_NODE_LIST, cm);

		thenElseList.addElement((ValueNode) nodeFactory.getNode(
									C_NodeTypes.CAST_NODE,
									(ValueNode) nodeFactory.getNode(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,	cm),
									DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.CHAR, 1),	
									cm));
		thenElseList.addElement(leftExpression);

		return (ValueNode) nodeFactory.getNode(
											C_NodeTypes.CONDITIONAL_NODE,
											(ValueNode) nodeFactory.getNode(
														C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
														leftExpression,
														rightExpression,
														cm),
											thenElseList,
											cm);
	}
|
	// CASE WHEN P1 THEN [T1 | NULL] (WHEN Pi THEN [Ti | NULL])* [ELSE E | NULL] END
	<CASE> value = whenThenExpression()
	{
		return value;
	}
}

/*
 * <A NAME="caseExpression">caseExpression</A>
 */
ValueNode
caseExpression() throws StandardException :
{
	ValueNode	   expr;
}
{
	<END>
	{
		return ((ValueNode) nodeFactory.getNode(
										C_NodeTypes.CAST_NODE,
										(ValueNode) nodeFactory.getNode(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
																		getContextManager()),
										DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.CHAR, 1),	
										getContextManager()));
	}
|
	<ELSE> expr = thenElseExpression() <END>
	{
		return expr;
	}
|
	expr = whenThenExpression()
	{
		return expr;
	}
}

/*
 * <A NAME="whenThenExpression">whenThenExpression</A>
 */
ValueNode
whenThenExpression() throws StandardException :
{
	ValueNode	   expr;
	ValueNode	   thenExpr;
	ValueNode	   elseExpr;
}
{
	<WHEN> expr = orExpression(null, false) 
		   (<OR> expr = orExpression(expr, false) )*
	<THEN> thenExpr = thenElseExpression()
	elseExpr = caseExpression()
	{
		ContextManager cm = getContextManager();
		ValueNodeList thenElseList = (ValueNodeList) nodeFactory.getNode(C_NodeTypes.VALUE_NODE_LIST, cm);
		thenElseList.addElement(thenExpr); // then
		thenElseList.addElement(elseExpr); // else

		return((ValueNode) nodeFactory.getNode(C_NodeTypes.CONDITIONAL_NODE,
												expr,
												thenElseList,
												cm));
	}
}

/*
 * <A NAME="thenElseExpression">thenElseExpression</A>
 */
ValueNode
thenElseExpression() throws StandardException :
{
	ValueNode	   expr;
}
{	
	LOOKAHEAD ( {getToken(1).kind == NULL} )
	<NULL>
	{
		return((ValueNode) nodeFactory.getNode(
										C_NodeTypes.CAST_NODE,
										(ValueNode) nodeFactory.getNode(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
																		getContextManager()),
										DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.CHAR, 1),	
										getContextManager()));
	}
|
	expr = additiveExpression(null, 0, false)
	{
		return expr;
	}
}

TableElementNode
tableConstraintDefinition() throws StandardException :
{
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	TableName		constraintName = null;
	//initialize following two booleans before handling table level constraints
	explicitNotNull = false;
	explicitNull = false;
}
{
	[ constraintName = constraintNameDefinition() ] 
		tcdn = tableConstraint(constraintName) 
		[ properties = propertyList()]
	{
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
}

ConstraintDefinitionNode
tableConstraint(TableName constraintName) throws StandardException :
{
	ConstraintDefinitionNode tcdn;
}
{
	tcdn = uniqueConstraintDefinition(constraintName) 
	{
		return tcdn;
	}
|
	tcdn = referentialConstraintDefinition(constraintName) 
	{
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, null)
	{
		return tcdn;
	}
}

ConstraintDefinitionNode
uniqueConstraintDefinition(TableName constraintName) throws StandardException :
{
	int constraintType;
	ResultColumnList uniqueColumnList;
}
{
	//for table level constraint, second parameter will be null
	constraintType = uniqueSpecification((DataTypeDescriptor) null, null) 
		<LEFT_PAREN> uniqueColumnList = uniqueColumnList() <RIGHT_PAREN>
	{
		//go through the unique columns list and if any of the columns in the
		//list is explicitly defined null, throw an exception for this. Columns
		//for which no nullability is defined are by default nullable. But in
		//case of create table, there nullability changes automatically to 
		//non-nullable if primary key is defined on it. But if user explicitly
		//defines the nullability, then defining a primary key on it in create
		//table will result in an exception.
		if (constraintType ==  DataDictionary.PRIMARYKEY_CONSTRAINT)
		{
			for (int index = 0; index < uniqueColumnList.size(); index++)
			{
				String primaryKeyColumnName = ((ResultColumn) uniqueColumnList.elementAt(index)).getName();
				if (explicitlyNullableColumnsList.contains(primaryKeyColumnName))
				{
					String errorState = SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
					throw StandardException.newException(errorState, primaryKeyColumnName);
				}
			}
		}
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						null,
						null,
						null,
						getContextManager()
						);
	}
}

//the second parameter to the following method will always be null for a table level
//constraint but not for a column level constraint
int
uniqueSpecification(DataTypeDescriptor dataTypeDescriptor,
String columnName) throws StandardException :
{
}
{
	<UNIQUE> 
	{
		return DataDictionary.UNIQUE_CONSTRAINT;
	}
|
	<PRIMARY> <KEY>
	{
		//explicitNull can be true only if it's column level constraint and
		//that column has null constraint defined on it. In that case, defining
		//a column-level constraint of primary key on it will result in an error.
		if (explicitNull) 
		{
			String errorState = SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
			throw StandardException.newException(errorState, columnName);
		}
		return DataDictionary.PRIMARYKEY_CONSTRAINT;
	}
}

ResultColumnList
uniqueColumnList() throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

ConstraintDefinitionNode
referentialConstraintDefinition(TableName constraintName) throws StandardException :
{
	ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION, 
			    StatementType.RA_NOACTION}; //default values
}
{
	<FOREIGN> <KEY> <LEFT_PAREN> columnNameList(fkRcl) <RIGHT_PAREN>
		referencedTable = referencesSpecification(refRcl, refActions)
	{
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
	}
}

TableName
referencesSpecification(ResultColumnList rcl, int[] refActions) throws StandardException :
{
	TableName tableName = null;
}
{
	<REFERENCES> tableName = referencedTableAndColumns(rcl)
		// not supporting MATCH or referential actions beyond syntax for default
		[ <ON> referentialTriggeredAction(refActions) ]
	{
		return tableName;
	}
}

TableName
referencedTableAndColumns(ResultColumnList rcl) throws StandardException :
{
	TableName	tableName = null;
}
{
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) [ <LEFT_PAREN> columnNameList(rcl) <RIGHT_PAREN> ]
	{
		return tableName;
	}
}

void
referentialTriggeredAction(int [] refActions) throws StandardException :
{}
{
	( refActions[1] = updateRule() [<ON> refActions[0] = deleteRule() ] |
	refActions[0] = deleteRule() [<ON> refActions[1] = updateRule() ] )
}

int
updateRule() :
{
	int action;
}
{
	<UPDATE> action = updateReferentialAction()
	{
		return action;
	}
}

int
deleteRule()  :
{
	int action;
}
{
	<DELETE> action = deleteReferentialAction()
	{
		return action;
	}

}

int
updateReferentialAction() :
{}
{
	
	  <RESTRICT> {return StatementType.RA_RESTRICT;}
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}

}

int
deleteReferentialAction() :
{}
{
	<CASCADE> {return StatementType.RA_CASCADE;}   
	| <RESTRICT> {return StatementType.RA_RESTRICT;} 
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}
	| <SET> 
	   (  <NULL> {return StatementType.RA_SETNULL;}    
              |<_DEFAULT>  {return StatementType.RA_SETDEFAULT;}
	   )
}

/*
 * <A NAME="columnConstraintDefinition">columnConstraintDefinition</A>
 */
void
columnConstraintDefinition(DataTypeDescriptor dataTypeDescriptor,
						   TableElementList tableElementList,
						   String columnName) throws StandardException :
{
	int constraintType;
	TableElementNode tcdn;
	TableName constraintName = null;
}
{
	[ constraintName = constraintNameDefinition() ]
		tcdn = columnConstraint(constraintName, dataTypeDescriptor, columnName)
	{
		/* NOT NULL constraints are handled by marking the dataTypeDescriptor
		 * as being non-nullable.
		 */
		if (tcdn == null)
		{
			return;
		}

		/* All other constraints, whether column or table will be added as
		 * table constraints.  We do this to facilitate the handling of
		 * multiple column constraints on the same column.
		 */
		tableElementList.addTableElement(tcdn);
	}
}

/*
 * <A NAME="columnConstraint">columnConstraint</A>
 */
ConstraintDefinitionNode
columnConstraint(TableName constraintName,
				 DataTypeDescriptor dataTypeDescriptor,
				 String columnName) throws StandardException :
{
	int constraintType;
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION,
                            StatementType.RA_NOACTION} ; //default: NO ACTION
}
{
	<NOT> <NULL>
	{
		//if column is explicitly defined not nullable, set following flag
		explicitNotNull = true;
		//if both null and not null constraints are defined for a column,
		//throw an exception
		if (explicitNull) 
                   throw StandardException.newException(SQLState.LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT, columnName); 
		dataTypeDescriptor.setNullability(false);
		return null;
	}
|
	//pass the columnname as the second parameter. It will be used to throw an
	//exception if null constraint is defined for this column-level primary 
	//key constraint
	constraintType = uniqueSpecification(dataTypeDescriptor,columnName)
		[ properties = propertyList()]
	{
		ResultColumnList uniqueColumnList =
										(ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
		uniqueColumnList.addElement(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							columnName,
							null,
							getContextManager()));

		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						properties,
						null,
						null,
						getContextManager()
						);
	}
|	
	referencedTable = referencesSpecification(refRcl, refActions)
		[ properties = propertyList()] 
	{
		ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
		fkRcl.addElement(
					(ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager())
				);
		tcdn = (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, columnName)
	{
		return tcdn;
	}
}

QueryTreeNode
dropSchemaStatement() throws StandardException :
{
	String schemaName;
}
{
	<SCHEMA> schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <RESTRICT>
	{
		QueryTreeNode stmt =  nodeFactory.getNode(
							C_NodeTypes.DROP_SCHEMA_NODE,
							schemaName,
							new Integer(StatementType.DROP_RESTRICT),
							getContextManager());

		return stmt;
	}
}

QueryTreeNode
alterTableStatement() throws StandardException :
{
	QueryTreeNode		node;
	TableName			tableName;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) node = alterTableBody(tableName)
	{
		return node;
	}
}

QueryTreeNode
alterTableBody(TableName tableName) throws StandardException :
{
	QueryTreeNode qtn;
	char				lockGranularity = '\0';
	String               newTableName;
	TableElementList	tableElementList =
									(TableElementList) nodeFactory.getNode(
												C_NodeTypes.TABLE_ELEMENT_LIST,
												getContextManager());
	Token				tok = null;
	int[]				changeType = new int[1];
	int[]				behavior = new int[1];
	boolean[]			sequential = new boolean[1];
}
{
//insert special key before compress so that only internal SP can know
	<COMPRESS> [ tok = <SEQUENTIAL> ]
	{		
		checkInternalFeature("COMPRESS");
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							new Boolean(tok != null),
							getContextManager());
	}
|
	lockGranularity = alterTableAction( tableElementList, changeType, behavior, sequential )
	{
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							tableElementList,
							new Character(lockGranularity),
							changeType,
							behavior,
							sequential,
							getContextManager());
	}
}

/*
 * <A NAME="alterTableRenameTableStatement">alterTableRenameTableStatement</A>
 */
/*
QueryTreeNode
alterTableRenameTableStatement(TableName tableName) throws StandardException :
{
	String newTableName;
}
{
	<TO> newTableName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.RENAME_NODE,
							tableName,
							null,
							newTableName,
							Boolean.TRUE,
ReuseFactory.getInteger(StatementType.RENAME_TABLE),
							getContextManager());
	}
}
*/

/*
 * <A NAME="alterTableRenameColumnStatement">alterTableRenameColumnStatement</A>
 */
/*
QueryTreeNode
alterTableRenameColumnStatement(TableName tableName) throws StandardException :
{
	String oldColumnName;
	String newColumnName;
}
{
	oldColumnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <TO> newColumnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.RENAME_NODE,
							tableName,
							oldColumnName,
							newColumnName,
							Boolean.TRUE,
ReuseFactory.getInteger(StatementType.RENAME_COLUMN),
							getContextManager());
	}
}
*/
char
alterTableAction(TableElementList tableElementList, int[] changeType, int[] behavior, boolean[] sequential) throws StandardException :
{
	char				lockGranularity = '\0';
	TableElementNode	tableElement;
	DataTypeDescriptor	typeDescriptor;
	Token				tok = null;
	String				columnName;
	long[]				autoIncrementInfo = new long[3];
}
{
	<ADD>
	(
		tableElement = addColumnDefinition(tableElementList)
		|
		tableElement = tableConstraintDefinition()
	)
	{
		if (tableElement instanceof ColumnDefinitionNode)
		{
			//bug 5724 - auto increment columns not allowed in ALTER TABLE statement
			ColumnDefinitionNode cdn = (ColumnDefinitionNode) tableElement;
			if ( cdn.isAutoincrementColumn())
				throw StandardException.newException(SQLState.LANG_ALTER_TABLE_AUTOINCREMENT_COLUMN_NOT_ALLOWED);
		}
		changeType[0] = CreateStatementNode.ADD_TYPE;
		tableElementList.addTableElement(tableElement);
		return lockGranularity;
	}
|
	<ALTER> [ <COLUMN> ] columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <SET>
		typeDescriptor = DB2AlterColumn(autoIncrementInfo)
	{
		changeType[0] = CreateStatementNode.MODIFY_TYPE;
		/* typeDescriptor is not null for MODIFY_COLUMN_TYPE_NODE */
		if (typeDescriptor != null)
			tableElementList.addTableElement((TableElementNode) nodeFactory.getNode(
						C_NodeTypes.MODIFY_COLUMN_TYPE_NODE,
						columnName, null,
						typeDescriptor, null,
						getContextManager()));
		else
			tableElementList.addTableElement((TableElementNode) nodeFactory.getNode(
						C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE,
						columnName,
						null, null, autoIncrementInfo,
						getContextManager()));
		return lockGranularity;
	}
|
	LOOKAHEAD( {getToken(1).kind == DROP
                && (getToken(2).kind == CONSTRAINT
                        || getToken(2).kind == PRIMARY
                        || getToken(2).kind == FOREIGN
                        || getToken(2).kind == UNIQUE
                        || getToken(2).kind == CHECK)} )
	tableElement = dropTableConstraintDefinition()
	{
		changeType[0] = CreateStatementNode.DROP_TYPE;
		tableElementList.addTableElement(tableElement);
		return lockGranularity;
	}
|
	lockGranularity = DB2lockGranularityClause()
	{
		changeType[0] = CreateStatementNode.LOCKING_TYPE;
		return lockGranularity;
	}
}

TableElementNode
addColumnDefinition(TableElementList tableElementList) throws StandardException :
{
	TableElementNode	tableElement;
}
{
	[ <COLUMN> ] tableElement = columnDefinition(tableElementList)
	{
		return tableElement;
	}
}


TableElementNode 
columnAlter() throws StandardException :
{
	String columnName;
	TableElementNode tn;
}
{
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) tn = columnAlterClause(columnName)
	{
		return tn;
	}
}

TableElementNode
columnAlterClause(String columnName) throws StandardException :
{
	ValueNode	defaultNode;
	DataTypeDescriptor typeDescriptor;
	long[]				autoIncrementInfo = new long[3];
}
{
	// MODIFY column_name [WITH] DEFAULT <Value>
	LOOKAHEAD( {getToken(1).kind == WITH || getToken(1).kind == _DEFAULT })
	defaultNode = defaultClause(autoIncrementInfo, columnName)
	{
		if (autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX]
				 == 0)
		{
			autoIncrementInfo = null;
		}

		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE,
								columnName,
								defaultNode, null, autoIncrementInfo,
								getContextManager());
	}
|
	// MODIFY column_name NULL
	LOOKAHEAD ({getToken(1).kind == NULL })
	<NULL>
	{
		// for a MODIFY column NULL clause form a modify_column node
		// with all null values. In a column definition a [NOT] NULL
		// column constraint is specified by setting the right value
		// in the nullability field of the data type but we don't have
		// a datatype here.
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_CONSTRAINT_NODE,
								columnName, null, null, null,
								getContextManager());
	}
|
	// MODIFY column_name NOT NULL
	LOOKAHEAD({getToken(1).kind == NOT})
	<NOT> <NULL>
	{
		// for a MODIFY column NOT NULL clause form a modify_column node
		// with all null values. In a column definition a [NOT] NULL
		// column constraint is specified by setting the right value
		// in the nullability field of the data type but we don't have
		// a datatype here.
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_CONSTRAINT_NOT_NULL_NODE,
								columnName, null, null, null,
								getContextManager());
	}
|
	// MODIFY column_name varchar(64)
	typeDescriptor = dataTypeDDL()
	{
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_TYPE_NODE,
								columnName,
								null, typeDescriptor, null,
								getContextManager());
	}
}

/*
 * DB2 syntax for ALTER COLUMN
 */
DataTypeDescriptor
DB2AlterColumn(long[] autoIncrementInfo) throws StandardException :
{
	long				autoIncrementIncrement = 1;
	DataTypeDescriptor	typeDescriptor = null;
}
{
	<DATA> <TYPE> typeDescriptor = dataTypeDDL()
	{
		return typeDescriptor;
	}
|
	<INCREMENT> <BY> autoIncrementIncrement = exactNumber()
	{
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		return typeDescriptor;
	}
}


TableElementNode
dropTableConstraintDefinition() throws StandardException :
{
	TableName		 constraintName;
}
{
	LOOKAHEAD( {getToken(2).kind == CONSTRAINT} )
	/* changed constraintName() to qualifiedName() for compaction */
	<DROP> <CONSTRAINT> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(2).kind == PRIMARY} )
	<DROP> <PRIMARY> <KEY>
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						null,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(2).kind == FOREIGN} )
        <DROP> <FOREIGN> <KEY> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.FOREIGNKEY_CONSTRAINT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(2).kind == UNIQUE} )
        <DROP> <UNIQUE> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.UNIQUE_CONSTRAINT),
						getContextManager()
						);
	}
|
        <DROP> <CHECK> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.CHECK_CONSTRAINT),
						getContextManager()
						);
	}
}

/*
 * <A NAME="dropTableStatement">dropTableStatement</A>
 */
QueryTreeNode
dropTableStatement() throws StandardException :
{
	TableName tableName;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		// DB2 does not support a drop behaviour
		return (QueryTreeNode) nodeFactory.getNode(
											C_NodeTypes.DROP_TABLE_NODE,
											tableName,
											new Integer(StatementType.DROP_DEFAULT),
											getContextManager());
	}
}

/*
 * <A NAME="dropIndexStatement">dropIndexStatement</A>
 */
QueryTreeNode
dropIndexStatement() throws StandardException :
{
	TableName indexName;
}
{
	<INDEX> indexName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.DROP_INDEX_NODE,
								indexName,
								getContextManager());
	}
}

/*
 * <A NAME="dropAliasStatement">dropAliasStatement</A>
 */
QueryTreeNode
dropAliasStatement() throws StandardException :
{
	Object aliasName;
}
{
  	<PROCEDURE> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR);
	}  
|  	<FUNCTION> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR);
	}  
|	<SYNONYM> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "DROP SYNONYM");

		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR);
	}
}

QueryTreeNode
dropViewStatement() throws StandardException :
{
	TableName viewName;
}
{
	<VIEW> viewName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.DROP_VIEW_NODE,
								viewName,
								getContextManager());
	}
}

QueryTreeNode
dropTriggerStatement() throws StandardException :
{
	TableName triggerName;
}
{
	<TRIGGER> triggerName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.DROP_TRIGGER_NODE,
								triggerName,
								getContextManager());
	}
}


QueryTreeNode
truncateTableStatement() throws StandardException :
{
	TableName tableName;
}
{
	<TRUNCATE> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) 
	{
		return (QueryTreeNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							getContextManager());
	}
}

/*
 * <A NAME="identifier">identifier</A>
 */
String
internalIdentifier( int id_length_limit, boolean useANSICasing, boolean checkLength) throws StandardException :
{
	String	str;
	Token 	tok;
}
{
	tok = <IDENTIFIER>
	{
        if( useANSICasing)
            str = StringUtil.SQLToUpperCase(tok.image);
        else
            str = getLanguageConnectionContext().convertIdentifierCase( tok.image);
		if (checkLength) {//if checkLength false, then calling method would do the length limit checks
			//limit the identifier to the id length limit passed to this method
			checkIdentifierLengthLimit(str, id_length_limit);
		}
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;
		return str;
	}
|
	str = delimitedIdentifier()
	{
		if (checkLength) {//if checkLength false, then calling method would do the length limit checks
			//limit the identifier to the id length limit passed to this method
			checkIdentifierLengthLimit(str, id_length_limit);
		} 
		return str;
	}
|
	str = nonReservedKeyword()
	{
		return getLanguageConnectionContext().convertIdentifierCase( str);
	}
}

String
identifier(int id_length_limit, boolean checkLength) throws StandardException :
{
	String	id;
}
{
    id = internalIdentifier( id_length_limit, false, checkLength)
    {
        return id;
    }
}

/*
 * <A NAME="delimitedIdentifier">delimitedIdentifier</A>
 */
String
delimitedIdentifier() :
{
	String	str;
	Token	tok;
}
{
	tok = <DELIMITED_IDENTIFIER>
	{
		str = tok.image.substring(1, tok.image.length() -1);
		str = normalizeDelimitedID( str );
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.TRUE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;

		return str;
	}
}

/*
 * <A NAME="reservedKeyword">reservedKeyword</A>
 */
String
reservedKeyword() :
{
	Token	tok;
}
{
	/*
		All reserved keywords have to be repeated here,
		so that they may be used as normal identifiers.

		NOTE: The same ones are commented out here as above in the token
		rule, for the same reason.
		
		Derby-139 - LOCAL removed as reserved word as most other
		databases do not enforce it. LOCAL not used at all in grammar so token removed.
	 */
	(
 	/* SQL92 reserved Keywords */
	tok = <ADD>
|	tok = <ALL>
|	tok = <ALLOCATE>
|	tok = <ALTER>
|	tok = <AND>
|	tok = <ANY>
|	tok = <ARE>
|	tok = <AS>
|	tok = <ASC>
|	tok = <ASSERTION>
|	tok = <AT>
|	tok = <AUTHORIZATION>
|	tok = <AVG>
|	tok = <BEGIN>
|	tok = <BETWEEN>
|	tok = <BIT>
|	tok = <BOTH>
|	tok = <BY>
|	tok = <CASCADE>
|	tok = <CASCADED>
|	tok = <CASE>
|	tok = <CAST>
|	tok = <CHAR>
|	tok = <CHARACTER>
|	tok = <CHECK>
|	tok = <CLOSE>
|	tok = <COLLATE>
|	tok = <COLLATION>
|	tok = <COLUMN>
|	tok = <COMMIT>
|	tok = <CONNECT>
|	tok = <CONNECTION>
|	tok = <CONSTRAINT>
|	tok = <CONSTRAINTS>
|	tok = <CONTINUE>
|	tok = <CONVERT>
|	tok = <CORRESPONDING>
|	tok = <COUNT>
|	tok = <CREATE>
|	tok = <CURRENT>
|	tok = <CURRENT_DATE>
|	tok = <CURRENT_TIME>
|	tok = <CURRENT_TIMESTAMP>
|	tok = <CURRENT_USER>
|	tok = <CURSOR>
|	tok = <DEALLOCATE>
|	tok = <DEC>
|	tok = <DECIMAL>
|	tok = <DECLARE>
|	tok = <_DEFAULT>
|	tok = <DEFERRABLE>
|	tok = <DEFERRED>
|	tok = <DELETE>
|	tok = <DESC>
|	tok = <DESCRIBE>
|	tok = <DIAGNOSTICS>
|	tok = <DISCONNECT>
|	tok = <DISTINCT>
|	tok = <DOUBLE>
|	tok = <DROP>
|	tok = <ELSE>
|	tok = <END>
|	tok = <ENDEXEC>
|	tok = <ESCAPE>
|	tok = <EXCEPT>
|	tok = <EXCEPTION>
|	tok = <EXEC>
|	tok = <EXECUTE>
|	tok = <EXISTS>
|	tok = <EXTERNAL>
|	tok = <FALSE>
|	tok = <FETCH>
|	tok = <FIRST>
|	tok = <FLOAT>
|	tok = <FOR>
|	tok = <FOREIGN>
|	tok = <FOUND>
|	tok = <FROM>
|	tok = <FULL>
|	tok = <FUNCTION>
|	tok = <GET>
|	tok = <GET_CURRENT_CONNECTION>
|	tok = <GLOBAL>
|	tok = <GO>
|	tok = <GOTO>
|	tok = <GRANT>
|	tok = <GROUP>
|	tok = <HAVING>
|	tok = <HOUR>
|	tok = <IDENTITY>
|	tok = <IMMEDIATE>
|	tok = <IN>
|	tok = <INDICATOR>
|	tok = <INITIALLY>
|	tok = <INNER>
|   tok = <INOUT>
|	tok = <INPUT>
|	tok = <INSENSITIVE>
|	tok = <INSERT>
|	tok = <INT>
|	tok = <INTEGER>
|	tok = <INTERSECT>
// SQL92 says it is reserved, but we want it to be non-reserved.
|	tok = <INTO>
|	tok = <IS>
|	tok = <ISOLATION>
|	tok = <JOIN>
|	tok = <KEY>
|	tok = <LAST>
|	tok = <LEFT>
|	tok = <LIKE>
|	tok = <LOWER>
|	tok = <MATCH>
|	tok = <MAX>
|	tok = <MIN>
|	tok = <MINUTE>
// SQL92 says it is reserved, but we want it to be non-reserved.
|	tok = <NATIONAL>
|	tok = <NATURAL>
|	tok = <NCHAR>
|	tok = <NVARCHAR> 
|	tok = <NEXT>
|	tok = <NO>
|	tok = <NOT>
|	tok = <NULL>
|	tok = <NULLIF>
|	tok = <NUMERIC>
|	tok = <OF>
|	tok = <ON>
|	tok = <ONLY>
|	tok = <OPEN>
|	tok = <OPTION>
|	tok = <OR>
|	tok = <ORDER>
|   tok = <OUT>
|	tok = <OUTER>
|	tok = <OUTPUT>
|	tok = <OVERLAPS>
|	tok = <PAD>
|	tok = <PARTIAL>
|	tok = <PREPARE>
|	tok = <PRESERVE>
|	tok = <PRIMARY>
|	tok = <PRIOR>
|	tok = <PRIVILEGES>
|	tok = <PROCEDURE>
|	tok = <PUBLIC>
|	tok = <READ>
|	tok = <REAL>
|	tok = <REFERENCES>
|	tok = <RELATIVE>
|	tok = <RESTRICT>
|	tok = <REVOKE>
|	tok = <RIGHT>
|	tok = <ROLLBACK>
|	tok = <ROWS>
|	tok = <SCHEMA>
|	tok = <SCROLL>
|	tok = <SECOND>
|	tok = <SELECT>
|	tok = <SESSION_USER>
|	tok = <SET>
|	tok = <SMALLINT>
|	tok = <SOME>
|	tok = <SPACE>
|	tok = <SQL>
|	tok = <SQLCODE>
|	tok = <SQLERROR>
|	tok = <SQLSTATE>
|	tok = <SUBSTRING>
|	tok = <SUM>
|	tok = <SYSTEM_USER>
|	tok = <TABLE>
|	tok = <TEMPORARY>
|	tok = <TIMEZONE_HOUR>
|	tok = <TIMEZONE_MINUTE>
|	tok = <TO>
|	tok = <TRANSACTION>
|	tok = <TRANSLATE>
|	tok = <TRANSLATION>
|	tok = <TRUE>
|	tok = <UNION>
|	tok = <UNIQUE>
|	tok = <UNKNOWN>
|	tok = <UPDATE>
|	tok = <UPPER>
|	tok = <USER>
|	tok = <USING>
|	tok = <VALUES>
|	tok = <VARCHAR>
|	tok = <VARYING>
|	tok = <VIEW>
|	tok = <WHENEVER>
|	tok = <WHERE>
|	tok = <WITH>
|	tok = <WORK>
|	tok = <WRITE>
|	tok = <YEAR>
	/* Additional JSQL reserved keywords -- non-SQL92 reserved Keywords */
|	tok = <BOOLEAN>
|	tok = <CALL>
|	tok = <EXPLAIN>
|	tok = <LONGINT>
|	tok = <LTRIM>
|	tok = <RTRIM>
|	tok = <SUBSTR>
|	tok = <XML>
|	tok = <XMLPARSE>
|	tok = <XMLSERIALIZE>
|	tok = <XMLEXISTS>
)
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		return tok.image;
	}
}

/*
 * <A NAME="nonReservedKeyword">nonReservedKeyword</A>
 */
String
nonReservedKeyword()  :
{
	Token	tok;
}
{
	/*
		All non-reserved keywords have to be repeated here,
		so that they may be used as normal identifiers.

		NOTE: The same ones are commented out here as above in the token
		rule, for the same reason.
	 */
	(
        tok = <ABS>  
	|	tok = <ABSVAL>  
	|	tok = <ACTION>
	|	tok = <AFTER>
	|	tok = <ALWAYS>
	|	tok = <BEFORE>
	|	tok = <BINARY>
	|	tok = <BLOB>
	|	tok = <C>
	|	tok = <CALLED>
	|	tok = <CLASS>
	|	tok = <CLOB>
|	tok = <COALESCE>
	|	tok = <COBOL>
	|	tok = <COMMITTED>
	|	tok = <COMPRESS>
	|	tok = <CONCAT>
	|	tok = <CONTAINS>
	|	tok = <CONTENT>
	|   tok = <CS>
	|	tok = <CURDATE>
	|	tok = <CURTIME>
	|	tok = <D>
	|	tok = <DATA>
	|	tok = <DATE>
	|	tok = <DAY>
        |	tok = <DIRTY>
	|	tok = <DYNAMIC>
    |   tok = <DATABASE>
	|	tok = <DB2SQL>
	|	tok = <DOCUMENT>
	|	tok = <EACH>
	|	tok = <EXCLUSIVE>
	|	tok = <FN>
	|	tok = <FORTRAN>
	|	tok = <GENERATED>
	|	tok = <IDENTITY_VAL_LOCAL>
	|	tok = <INCREMENT>
	|	tok = <INDEX>
	|	tok = <INITIAL>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <INTERVAL>
	|   tok = <JAVA>
	|	tok = <LANGUAGE>
	|	tok = <LARGE>
    |   tok = <LCASE>
	|	tok = <LENGTH>
	|	tok = <LEVEL>
    |   tok = <LOCATE>
	|	tok = <LOCK>
	|	tok = <LOCKS>
	|	tok = <LOCKSIZE>
	|	tok = <LOGGED>
	|	tok = <LONG>
	|	tok = <MESSAGE_LOCALE>
	|	tok = <METHOD>
	|	tok = <MOD>
	|	tok = <MODE>
	|	tok = <MODIFIES>
	|	tok = <MODIFY>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <MODULE>
	|	tok = <MONTH>
	|	tok = <_MORE>
	|	tok = <MUMPS>
	|	tok = <NAME>
	|	tok = <NCLOB>
	|	tok = <NEW>
	|   tok = <NEW_TABLE>
	|	tok = <NULLABLE>
	|	tok = <NUMBER>
	|	tok = <OBJECT>
	|	tok = <OFF>
	|	tok = <OLD>
	|	tok = <OLD_TABLE>
	|	tok = <OJ>
	|	tok = <PASCAL>
	|	tok = <PASSING>
	|	tok = <PLI>
	|	tok = <PRECISION>
	|	tok = <PROPERTIES>
	|	tok = <READS>
	|	tok = <REF>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <RELEASE>
	|	tok = <RENAME>
	|	tok = <REPEATABLE>
	|	tok = <REFERENCING>
        |       tok = <RESET>
	|	tok = <RESULT>
	|	tok = <RETAIN>
	|	tok = <RETURNS>
	|	tok = <ROW>
//	|	tok = <ROW_COUNT>
	|   tok = <RR>
	|   tok = <RS>
	|	tok = <SCALE>
	|	tok = <SAVEPOINT>
	|	tok = <SEQUENTIAL>
	|	tok = <SERIALIZABLE>
	|	tok = <SETS>
	|	tok = <SHARE>
	|   tok = <SPECIFIC>
	|	tok = <SQLID>
	|	tok = <SQL_TSI_FRAC_SECOND>
	|	tok = <SQL_TSI_SECOND>
	|	tok = <SQL_TSI_MINUTE>
	|	tok = <SQL_TSI_HOUR>
	|	tok = <SQL_TSI_DAY>
	|	tok = <SQL_TSI_WEEK>
	|	tok = <SQL_TSI_MONTH>
	|	tok = <SQL_TSI_QUARTER>
	|	tok = <SQL_TSI_YEAR>
    |   tok = <SQRT>
    |       tok = <STABILITY>
	|	tok = <START>
	|	tok = <STATEMENT>
	|	tok = <STRIP>
	|	tok = <SYNONYM>
	|	tok = <STYLE>
	|	tok = <T>
	|	tok = <THEN>
	|	tok = <TIME>
	|	tok = <TIMESTAMP>
	|	tok = <TIMESTAMPADD>
	|	tok = <TIMESTAMPDIFF>
    |   tok = <TRIGGER>
	|	tok = <TRUNCATE>
	|	tok = <TS>
	|	tok = <TYPE>
    |   tok = <UCASE>
	|	tok = <UNCOMMITTED>
	|   tok = <UR>
	|	tok = <USAGE>
// SQL92 says VALUE is reserved, but we want it to be nonreserved.
	|	tok = <VALUE>
	|	tok = <VARBINARY>
	|	tok = <PARAMETER>
	|	tok = <WHEN>
	|	tok = <WHITESPACE>
	)
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;
		return tok.image;
	}
}

/*
 * <A NAME="caseSensitiveIdentifierPlusReservedWords">caseSensitiveIdentifierPlusReservedWords</A>
 */
String
caseSensitiveIdentifierPlusReservedWords() :
{
	String str;
}
{
	str = caseSensitiveIdentifier()
	{
		return str;
	}
|
	str = reservedKeyword()
	{
		return str;
	}
}

/*
 * <A NAME="caseInsensitiveIdentifierPlusReservedWords">caseInsensitiveIdentifierPlusReservedWords</A>
 */
String
caseInsensitiveIdentifierPlusReservedWords() throws StandardException :
{
	String str;
}
{
	str = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return str;
	}
|
	str = reservedKeyword()
	{
		return getLanguageConnectionContext().convertIdentifierCase( str);
	}
}

/*
 * <A NAME="caseSensitiveIdentifier">caseSensitiveIdentifier</A>
 */
String
caseSensitiveIdentifier() :
{
	String	str;
	Token 	tok;
}
{
	tok = <IDENTIFIER>
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		return tok.image;
	}
|
	str = delimitedIdentifier()
	{
		return str;
	}
|
	str = nonReservedKeyword()
	{
		return str;
	}
}
